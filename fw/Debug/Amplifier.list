
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a598  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001df18  0800a728  0800a728  0001a728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028640  08028640  00040084  2**0
                  CONTENTS
  4 .ARM          00000008  08028640  08028640  00038640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028648  08028648  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028648  08028648  00038648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802864c  0802864c  0003864c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08028650  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040084  2**0
                  CONTENTS
 10 .bss          00004df4  20000084  20000084  00040084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e78  20004e78  00040084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028cfc  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000050c8  00000000  00000000  00068db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b90  00000000  00000000  0006de78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019b8  00000000  00000000  0006fa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026457  00000000  00000000  000713c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021725  00000000  00000000  00097817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de0ad  00000000  00000000  000b8f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00196fe9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075c8  00000000  00000000  0019703c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a710 	.word	0x0800a710

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800a710 	.word	0x0800a710

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <swOnOutputs>:
* @param argument: Not used
* @retval None
*/

void swOnOutputs(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  osDelay(200);
 80004cc:	20c8      	movs	r0, #200	; 0xc8
 80004ce:	f007 f8a3 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH1_OUT_GPIO_Port, CH1_OUT_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004d8:	4816      	ldr	r0, [pc, #88]	; (8000534 <swOnOutputs+0x6c>)
 80004da:	f003 fecd 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 80004de:	2064      	movs	r0, #100	; 0x64
 80004e0:	f007 f89a 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH2_OUT_GPIO_Port, CH2_OUT_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ea:	4812      	ldr	r0, [pc, #72]	; (8000534 <swOnOutputs+0x6c>)
 80004ec:	f003 fec4 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 80004f0:	2064      	movs	r0, #100	; 0x64
 80004f2:	f007 f891 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH3_OUT_GPIO_Port, CH3_OUT_Pin, GPIO_PIN_SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2101      	movs	r1, #1
 80004fa:	480f      	ldr	r0, [pc, #60]	; (8000538 <swOnOutputs+0x70>)
 80004fc:	f003 febc 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 8000500:	2064      	movs	r0, #100	; 0x64
 8000502:	f007 f889 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH6_OUT_GPIO_Port, CH6_OUT_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2140      	movs	r1, #64	; 0x40
 800050a:	480b      	ldr	r0, [pc, #44]	; (8000538 <swOnOutputs+0x70>)
 800050c:	f003 feb4 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 8000510:	2064      	movs	r0, #100	; 0x64
 8000512:	f007 f881 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH5_OUT_GPIO_Port, CH5_OUT_Pin, GPIO_PIN_SET);
 8000516:	2201      	movs	r2, #1
 8000518:	2120      	movs	r1, #32
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <swOnOutputs+0x70>)
 800051c:	f003 feac 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f007 f879 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH4_OUT_GPIO_Port, CH4_OUT_Pin, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2102      	movs	r1, #2
 800052a:	4803      	ldr	r0, [pc, #12]	; (8000538 <swOnOutputs+0x70>)
 800052c:	f003 fea4 	bl	8004278 <HAL_GPIO_WritePin>
}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40020400 	.word	0x40020400
 8000538:	40021000 	.word	0x40021000

0800053c <swOffOutputs>:

void swOffOutputs(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  osDelay(100);
 8000540:	2064      	movs	r0, #100	; 0x64
 8000542:	f007 f869 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH1_OUT_GPIO_Port, CH1_OUT_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	4816      	ldr	r0, [pc, #88]	; (80005a8 <swOffOutputs+0x6c>)
 800054e:	f003 fe93 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 8000552:	2064      	movs	r0, #100	; 0x64
 8000554:	f007 f860 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH2_OUT_GPIO_Port, CH2_OUT_Pin, GPIO_PIN_RESET);
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055e:	4812      	ldr	r0, [pc, #72]	; (80005a8 <swOffOutputs+0x6c>)
 8000560:	f003 fe8a 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 8000564:	2064      	movs	r0, #100	; 0x64
 8000566:	f007 f857 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH3_OUT_GPIO_Port, CH3_OUT_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2101      	movs	r1, #1
 800056e:	480f      	ldr	r0, [pc, #60]	; (80005ac <swOffOutputs+0x70>)
 8000570:	f003 fe82 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f007 f84f 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH6_OUT_GPIO_Port, CH6_OUT_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2140      	movs	r1, #64	; 0x40
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <swOffOutputs+0x70>)
 8000580:	f003 fe7a 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 8000584:	2064      	movs	r0, #100	; 0x64
 8000586:	f007 f847 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH5_OUT_GPIO_Port, CH5_OUT_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	4807      	ldr	r0, [pc, #28]	; (80005ac <swOffOutputs+0x70>)
 8000590:	f003 fe72 	bl	8004278 <HAL_GPIO_WritePin>
  osDelay(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f007 f83f 	bl	8007618 <osDelay>
  HAL_GPIO_WritePin(CH4_OUT_GPIO_Port, CH4_OUT_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2102      	movs	r1, #2
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <swOffOutputs+0x70>)
 80005a0:	f003 fe6a 	bl	8004278 <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40020400 	.word	0x40020400
 80005ac:	40021000 	.word	0x40021000

080005b0 <buttonTaskEntry>:

void buttonTaskEntry(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08e      	sub	sp, #56	; 0x38
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
 80005c8:	615a      	str	r2, [r3, #20]
 80005ca:	619a      	str	r2, [r3, #24]

  // Set LED blinking
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005cc:	2360      	movs	r3, #96	; 0x60
 80005ce:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005dc:	2300      	movs	r3, #0
 80005de:	623b      	str	r3, [r7, #32]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005e0:	2300      	movs	r3, #0
 80005e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005e4:	2300      	movs	r3, #0
 80005e6:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2200      	movs	r2, #0
 80005ee:	4619      	mov	r1, r3
 80005f0:	48b7      	ldr	r0, [pc, #732]	; (80008d0 <buttonTaskEntry+0x320>)
 80005f2:	f006 f823 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005f6:	2100      	movs	r1, #0
 80005f8:	48b5      	ldr	r0, [pc, #724]	; (80008d0 <buttonTaskEntry+0x320>)
 80005fa:	f005 fcf3 	bl	8005fe4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80005fe:	f107 0310 	add.w	r3, r7, #16
 8000602:	2204      	movs	r2, #4
 8000604:	4619      	mov	r1, r3
 8000606:	48b2      	ldr	r0, [pc, #712]	; (80008d0 <buttonTaskEntry+0x320>)
 8000608:	f006 f818 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800060c:	2104      	movs	r1, #4
 800060e:	48b0      	ldr	r0, [pc, #704]	; (80008d0 <buttonTaskEntry+0x320>)
 8000610:	f005 fce8 	bl	8005fe4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  uint8_t led_level = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t i = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t delay_cnt = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t display_event;

  for(;;)
  {
	switch (state){
 8000622:	4bac      	ldr	r3, [pc, #688]	; (80008d4 <buttonTaskEntry+0x324>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b07      	cmp	r3, #7
 8000628:	f200 814d 	bhi.w	80008c6 <buttonTaskEntry+0x316>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <buttonTaskEntry+0x84>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000655 	.word	0x08000655
 8000638:	08000709 	.word	0x08000709
 800063c:	080008c7 	.word	0x080008c7
 8000640:	0800076b 	.word	0x0800076b
 8000644:	080008c7 	.word	0x080008c7
 8000648:	08000817 	.word	0x08000817
 800064c:	080008c7 	.word	0x080008c7
 8000650:	08000833 	.word	0x08000833
	  // LED Blinking - Stand-by
	  case (STAND_BY):
		led_level++;
 8000654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000658:	3301      	adds	r3, #1
 800065a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800065e:	2100      	movs	r1, #0
 8000660:	489b      	ldr	r0, [pc, #620]	; (80008d0 <buttonTaskEntry+0x320>)
 8000662:	f005 fd87 	bl	8006174 <HAL_TIM_PWM_Stop>
	    if (led_level > 127)
 8000666:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800066a:	2b00      	cmp	r3, #0
 800066c:	da0e      	bge.n	800068c <buttonTaskEntry+0xdc>
	    {
	      sConfigOC.Pulse = (0XFF - led_level) * 0xFFFF/200;
 800066e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000672:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 8000676:	4613      	mov	r3, r2
 8000678:	041b      	lsls	r3, r3, #16
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	4a96      	ldr	r2, [pc, #600]	; (80008d8 <buttonTaskEntry+0x328>)
 800067e:	fb82 1203 	smull	r1, r2, r2, r3
 8000682:	1192      	asrs	r2, r2, #6
 8000684:	17db      	asrs	r3, r3, #31
 8000686:	1ad3      	subs	r3, r2, r3
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	e00b      	b.n	80006a4 <buttonTaskEntry+0xf4>
	    }
	    else
	    {
	      sConfigOC.Pulse = led_level * 0xFFFF/200;
 800068c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000690:	4613      	mov	r3, r2
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	4a90      	ldr	r2, [pc, #576]	; (80008d8 <buttonTaskEntry+0x328>)
 8000698:	fb82 1203 	smull	r1, r2, r2, r3
 800069c:	1192      	asrs	r2, r2, #6
 800069e:	17db      	asrs	r3, r3, #31
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	617b      	str	r3, [r7, #20]
	    }
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	4619      	mov	r1, r3
 80006ac:	4888      	ldr	r0, [pc, #544]	; (80008d0 <buttonTaskEntry+0x320>)
 80006ae:	f005 ffc5 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006b2:	2100      	movs	r1, #0
 80006b4:	4886      	ldr	r0, [pc, #536]	; (80008d0 <buttonTaskEntry+0x320>)
 80006b6:	f005 fc95 	bl	8005fe4 <HAL_TIM_PWM_Start>

		if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_RESET)
 80006ba:	2108      	movs	r1, #8
 80006bc:	4887      	ldr	r0, [pc, #540]	; (80008dc <buttonTaskEntry+0x32c>)
 80006be:	f003 fdc3 	bl	8004248 <HAL_GPIO_ReadPin>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f040 80f9 	bne.w	80008bc <buttonTaskEntry+0x30c>
		{
			osDelay(100);
 80006ca:	2064      	movs	r0, #100	; 0x64
 80006cc:	f006 ffa4 	bl	8007618 <osDelay>
            state = ON_REQUEST;
 80006d0:	4b80      	ldr	r3, [pc, #512]	; (80008d4 <buttonTaskEntry+0x324>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	701a      	strb	r2, [r3, #0]
			led_level = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			// Wait for button release
			for (i = 0 ; i < 200 ; i++)
 80006dc:	2300      	movs	r3, #0
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
 80006e0:	e00c      	b.n	80006fc <buttonTaskEntry+0x14c>
			{
			  osDelay(100);
 80006e2:	2064      	movs	r0, #100	; 0x64
 80006e4:	f006 ff98 	bl	8007618 <osDelay>
			  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 80006e8:	2108      	movs	r1, #8
 80006ea:	487c      	ldr	r0, [pc, #496]	; (80008dc <buttonTaskEntry+0x32c>)
 80006ec:	f003 fdac 	bl	8004248 <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d006      	beq.n	8000704 <buttonTaskEntry+0x154>
			for (i = 0 ; i < 200 ; i++)
 80006f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006f8:	3301      	adds	r3, #1
 80006fa:	633b      	str	r3, [r7, #48]	; 0x30
 80006fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006fe:	2bc7      	cmp	r3, #199	; 0xc7
 8000700:	d9ef      	bls.n	80006e2 <buttonTaskEntry+0x132>
			}
		}
	    break;
 8000702:	e0db      	b.n	80008bc <buttonTaskEntry+0x30c>
			  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 8000704:	bf00      	nop
	    break;
 8000706:	e0d9      	b.n	80008bc <buttonTaskEntry+0x30c>

	  // ON requested
	  case (ON_REQUEST):
	    // Main transformer will be switch on from the zero crossing interrupt based on state
		display_event = 0x0001;
 8000708:	2301      	movs	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
		osMessageQueuePut(displayQueueHandle, &display_event, 10, 0);
 800070c:	4b74      	ldr	r3, [pc, #464]	; (80008e0 <buttonTaskEntry+0x330>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	f107 010c 	add.w	r1, r7, #12
 8000714:	2300      	movs	r3, #0
 8000716:	220a      	movs	r2, #10
 8000718:	f007 f80c 	bl	8007734 <osMessageQueuePut>
	    delay_cnt = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
        state = SS_REQUEST;
 8000720:	4b6c      	ldr	r3, [pc, #432]	; (80008d4 <buttonTaskEntry+0x324>)
 8000722:	2202      	movs	r2, #2
 8000724:	701a      	strb	r2, [r3, #0]

     	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000726:	2100      	movs	r1, #0
 8000728:	4869      	ldr	r0, [pc, #420]	; (80008d0 <buttonTaskEntry+0x320>)
 800072a:	f005 fd23 	bl	8006174 <HAL_TIM_PWM_Stop>
     	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800072e:	2104      	movs	r1, #4
 8000730:	4867      	ldr	r0, [pc, #412]	; (80008d0 <buttonTaskEntry+0x320>)
 8000732:	f005 fd1f 	bl	8006174 <HAL_TIM_PWM_Stop>
    	sConfigOC.Pulse = 65535;
 8000736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800073a:	617b      	str	r3, [r7, #20]
     	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4862      	ldr	r0, [pc, #392]	; (80008d0 <buttonTaskEntry+0x320>)
 8000746:	f005 ff79 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
     	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	2204      	movs	r2, #4
 8000750:	4619      	mov	r1, r3
 8000752:	485f      	ldr	r0, [pc, #380]	; (80008d0 <buttonTaskEntry+0x320>)
 8000754:	f005 ff72 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
     	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000758:	2100      	movs	r1, #0
 800075a:	485d      	ldr	r0, [pc, #372]	; (80008d0 <buttonTaskEntry+0x320>)
 800075c:	f005 fc42 	bl	8005fe4 <HAL_TIM_PWM_Start>
     	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000760:	2104      	movs	r1, #4
 8000762:	485b      	ldr	r0, [pc, #364]	; (80008d0 <buttonTaskEntry+0x320>)
 8000764:	f005 fc3e 	bl	8005fe4 <HAL_TIM_PWM_Start>
     	break;
 8000768:	e0ad      	b.n	80008c6 <buttonTaskEntry+0x316>

	  case (SS_DELAY):
	    if (delay_cnt > START_DELAY) {
 800076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000770:	d928      	bls.n	80007c4 <buttonTaskEntry+0x214>
	      state++;
 8000772:	4b58      	ldr	r3, [pc, #352]	; (80008d4 <buttonTaskEntry+0x324>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4b56      	ldr	r3, [pc, #344]	; (80008d4 <buttonTaskEntry+0x324>)
 800077c:	701a      	strb	r2, [r3, #0]
	      swOnOutputs();
 800077e:	f7ff fea3 	bl	80004c8 <swOnOutputs>
		  display_event = 0x0011;
 8000782:	2311      	movs	r3, #17
 8000784:	60fb      	str	r3, [r7, #12]
	      osMessageQueuePut(displayQueueHandle, &display_event, 10, 0);
 8000786:	4b56      	ldr	r3, [pc, #344]	; (80008e0 <buttonTaskEntry+0x330>)
 8000788:	6818      	ldr	r0, [r3, #0]
 800078a:	f107 010c 	add.w	r1, r7, #12
 800078e:	2300      	movs	r3, #0
 8000790:	220a      	movs	r2, #10
 8000792:	f006 ffcf 	bl	8007734 <osMessageQueuePut>
		  display_event = 0x0200;
 8000796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800079a:	60fb      	str	r3, [r7, #12]
	      osMessageQueuePut(displayQueueHandle, &display_event, 10, 0);
 800079c:	4b50      	ldr	r3, [pc, #320]	; (80008e0 <buttonTaskEntry+0x330>)
 800079e:	6818      	ldr	r0, [r3, #0]
 80007a0:	f107 010c 	add.w	r1, r7, #12
 80007a4:	2300      	movs	r3, #0
 80007a6:	220a      	movs	r2, #10
 80007a8:	f006 ffc4 	bl	8007734 <osMessageQueuePut>
		  display_event = 0x0300;
 80007ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b0:	60fb      	str	r3, [r7, #12]
	      osMessageQueuePut(displayQueueHandle, &display_event, 10, 0);
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <buttonTaskEntry+0x330>)
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	f107 010c 	add.w	r1, r7, #12
 80007ba:	2300      	movs	r3, #0
 80007bc:	220a      	movs	r2, #10
 80007be:	f006 ffb9 	bl	8007734 <osMessageQueuePut>
	      break;
 80007c2:	e080      	b.n	80008c6 <buttonTaskEntry+0x316>
	    }
		if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_RESET)
 80007c4:	2108      	movs	r1, #8
 80007c6:	4845      	ldr	r0, [pc, #276]	; (80008dc <buttonTaskEntry+0x32c>)
 80007c8:	f003 fd3e 	bl	8004248 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <buttonTaskEntry+0x22a>
		{
		  state = SB_REQUEST;
 80007d2:	4b40      	ldr	r3, [pc, #256]	; (80008d4 <buttonTaskEntry+0x324>)
 80007d4:	2206      	movs	r2, #6
 80007d6:	701a      	strb	r2, [r3, #0]
		  break;
 80007d8:	e075      	b.n	80008c6 <buttonTaskEntry+0x316>
		}
	    delay_cnt++;
 80007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007dc:	3301      	adds	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if ((delay_cnt % 100) == 0) {
 80007e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007e2:	4b3d      	ldr	r3, [pc, #244]	; (80008d8 <buttonTaskEntry+0x328>)
 80007e4:	fba3 1302 	umull	r1, r3, r3, r2
 80007e8:	095b      	lsrs	r3, r3, #5
 80007ea:	2164      	movs	r1, #100	; 0x64
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d164      	bne.n	80008c0 <buttonTaskEntry+0x310>
		  display_event = (0x0001 + (delay_cnt / 100));
 80007f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007f8:	4a37      	ldr	r2, [pc, #220]	; (80008d8 <buttonTaskEntry+0x328>)
 80007fa:	fba2 2303 	umull	r2, r3, r2, r3
 80007fe:	095b      	lsrs	r3, r3, #5
 8000800:	3301      	adds	r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
	      osMessageQueuePut(displayQueueHandle, &display_event, 10, 0);
 8000804:	4b36      	ldr	r3, [pc, #216]	; (80008e0 <buttonTaskEntry+0x330>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	f107 010c 	add.w	r1, r7, #12
 800080c:	2300      	movs	r3, #0
 800080e:	220a      	movs	r2, #10
 8000810:	f006 ff90 	bl	8007734 <osMessageQueuePut>
	    }
        break;
 8000814:	e054      	b.n	80008c0 <buttonTaskEntry+0x310>

	  // ON
	  case (ON):
	    // Check for off request
		if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_RESET)
 8000816:	2108      	movs	r1, #8
 8000818:	4830      	ldr	r0, [pc, #192]	; (80008dc <buttonTaskEntry+0x32c>)
 800081a:	f003 fd15 	bl	8004248 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d14f      	bne.n	80008c4 <buttonTaskEntry+0x314>
		{
		  state++;
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <buttonTaskEntry+0x324>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <buttonTaskEntry+0x324>)
 800082e:	701a      	strb	r2, [r3, #0]
		}

	    // TODO: Monitor system while is ON

		break;
 8000830:	e048      	b.n	80008c4 <buttonTaskEntry+0x314>

	  // OFF requested
	  case (SB_PERFORM):
		swOffOutputs();
 8000832:	f7ff fe83 	bl	800053c <swOffOutputs>
		// Switch off LED and backlight
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000836:	2100      	movs	r1, #0
 8000838:	4825      	ldr	r0, [pc, #148]	; (80008d0 <buttonTaskEntry+0x320>)
 800083a:	f005 fc9b 	bl	8006174 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800083e:	2104      	movs	r1, #4
 8000840:	4823      	ldr	r0, [pc, #140]	; (80008d0 <buttonTaskEntry+0x320>)
 8000842:	f005 fc97 	bl	8006174 <HAL_TIM_PWM_Stop>
		sConfigOC.Pulse = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	481f      	ldr	r0, [pc, #124]	; (80008d0 <buttonTaskEntry+0x320>)
 8000854:	f005 fef2 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8000858:	f107 0310 	add.w	r3, r7, #16
 800085c:	2204      	movs	r2, #4
 800085e:	4619      	mov	r1, r3
 8000860:	481b      	ldr	r0, [pc, #108]	; (80008d0 <buttonTaskEntry+0x320>)
 8000862:	f005 feeb 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000866:	2100      	movs	r1, #0
 8000868:	4819      	ldr	r0, [pc, #100]	; (80008d0 <buttonTaskEntry+0x320>)
 800086a:	f005 fbbb 	bl	8005fe4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800086e:	2104      	movs	r1, #4
 8000870:	4817      	ldr	r0, [pc, #92]	; (80008d0 <buttonTaskEntry+0x320>)
 8000872:	f005 fbb7 	bl	8005fe4 <HAL_TIM_PWM_Start>

		// Wait for button release
		for (i = 0 ; i < 100 ; i++)
 8000876:	2300      	movs	r3, #0
 8000878:	633b      	str	r3, [r7, #48]	; 0x30
 800087a:	e00c      	b.n	8000896 <buttonTaskEntry+0x2e6>
		{
		  osDelay(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f006 fecb 	bl	8007618 <osDelay>
		  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 8000882:	2108      	movs	r1, #8
 8000884:	4815      	ldr	r0, [pc, #84]	; (80008dc <buttonTaskEntry+0x32c>)
 8000886:	f003 fcdf 	bl	8004248 <HAL_GPIO_ReadPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d006      	beq.n	800089e <buttonTaskEntry+0x2ee>
		for (i = 0 ; i < 100 ; i++)
 8000890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000892:	3301      	adds	r3, #1
 8000894:	633b      	str	r3, [r7, #48]	; 0x30
 8000896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000898:	2b63      	cmp	r3, #99	; 0x63
 800089a:	d9ef      	bls.n	800087c <buttonTaskEntry+0x2cc>
 800089c:	e000      	b.n	80008a0 <buttonTaskEntry+0x2f0>
		  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 800089e:	bf00      	nop
		}

		display_event = 0x0000;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
		osMessageQueuePut(displayQueueHandle, &display_event, 10, 0);
 80008a4:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <buttonTaskEntry+0x330>)
 80008a6:	6818      	ldr	r0, [r3, #0]
 80008a8:	f107 010c 	add.w	r1, r7, #12
 80008ac:	2300      	movs	r3, #0
 80008ae:	220a      	movs	r2, #10
 80008b0:	f006 ff40 	bl	8007734 <osMessageQueuePut>

		state = STAND_BY;
 80008b4:	4b07      	ldr	r3, [pc, #28]	; (80008d4 <buttonTaskEntry+0x324>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
		break;
 80008ba:	e004      	b.n	80008c6 <buttonTaskEntry+0x316>
	    break;
 80008bc:	bf00      	nop
 80008be:	e002      	b.n	80008c6 <buttonTaskEntry+0x316>
        break;
 80008c0:	bf00      	nop
 80008c2:	e000      	b.n	80008c6 <buttonTaskEntry+0x316>
		break;
 80008c4:	bf00      	nop
	}
    osDelay(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f006 fea6 	bl	8007618 <osDelay>
	switch (state){
 80008cc:	e6a9      	b.n	8000622 <buttonTaskEntry+0x72>
 80008ce:	bf00      	nop
 80008d0:	20004bc8 	.word	0x20004bc8
 80008d4:	200000a0 	.word	0x200000a0
 80008d8:	51eb851f 	.word	0x51eb851f
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	20004d38 	.word	0x20004d38

080008e4 <dspTaskEntry>:
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"

void dspTaskEntry(void *argument)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f006 fe93 	bl	8007618 <osDelay>
 80008f2:	e7fb      	b.n	80008ec <dspTaskEntry+0x8>

080008f4 <fanTaskEntry>:
#include "cmsis_os.h"

extern TIM_HandleTypeDef htim1;

void fanTaskEntry(void *argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	; 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]

  TIM_OC_InitTypeDef sConfigOC = {0};
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
 800090c:	615a      	str	r2, [r3, #20]
 800090e:	619a      	str	r2, [r3, #24]

  // Set FAN Low
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000910:	2360      	movs	r3, #96	; 0x60
 8000912:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 670;
 8000914:	f240 239e 	movw	r3, #670	; 0x29e
 8000918:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	; (800096c <fanTaskEntry+0x78>)
 8000938:	f005 fe80 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800093c:	2100      	movs	r1, #0
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <fanTaskEntry+0x78>)
 8000940:	f005 fb50 	bl	8005fe4 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2204      	movs	r2, #4
 800094a:	4619      	mov	r1, r3
 800094c:	4807      	ldr	r0, [pc, #28]	; (800096c <fanTaskEntry+0x78>)
 800094e:	f005 fe75 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000952:	2104      	movs	r1, #4
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <fanTaskEntry+0x78>)
 8000956:	f005 fb45 	bl	8005fe4 <HAL_TIM_PWM_Start>
    //Read temperature A
	//Read temperature B
	//Set FAN A speed
	//Set Fan B speed

	osDelay(1000);
 800095a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095e:	f006 fe5b 	bl	8007618 <osDelay>

	// Check FAN A speed

	// Check FAN B speed

	osDelay(1000);
 8000962:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000966:	f006 fe57 	bl	8007618 <osDelay>
	osDelay(1000);
 800096a:	e7f6      	b.n	800095a <fanTaskEntry+0x66>
 800096c:	20004c90 	.word	0x20004c90

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000974:	f002 fe14 	bl	80035a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000978:	f000 f88a 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097c:	f000 fbdc 	bl	8001138 <MX_GPIO_Init>
  MX_DMA_Init();
 8000980:	f000 fbba 	bl	80010f8 <MX_DMA_Init>
  MX_I2C1_Init();
 8000984:	f000 f8f0 	bl	8000b68 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000988:	f000 f91c 	bl	8000bc4 <MX_I2C2_Init>
  MX_RTC_Init();
 800098c:	f000 f948 	bl	8000c20 <MX_RTC_Init>
  MX_SPI1_Init();
 8000990:	f000 f96c 	bl	8000c6c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000994:	f000 f9a0 	bl	8000cd8 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000998:	f000 f9d4 	bl	8000d44 <MX_TIM1_Init>
  MX_TIM3_Init();
 800099c:	f000 fa80 	bl	8000ea0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009a0:	f000 fae2 	bl	8000f68 <MX_TIM4_Init>
  MX_TIM5_Init();
 80009a4:	f000 fb5a 	bl	800105c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009a8:	f006 fd5a 	bl	8007460 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of displayQueue */
  displayQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &displayQueue_attributes);
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <main+0xc4>)
 80009ae:	2104      	movs	r1, #4
 80009b0:	2010      	movs	r0, #16
 80009b2:	f006 fe4c 	bl	800764e <osMessageQueueNew>
 80009b6:	4603      	mov	r3, r0
 80009b8:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <main+0xc8>)
 80009ba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idleTask */
  idleTaskHandle = osThreadNew(idleTaskEntry, NULL, &idleTask_attributes);
 80009bc:	4a1f      	ldr	r2, [pc, #124]	; (8000a3c <main+0xcc>)
 80009be:	2100      	movs	r1, #0
 80009c0:	481f      	ldr	r0, [pc, #124]	; (8000a40 <main+0xd0>)
 80009c2:	f006 fd97 	bl	80074f4 <osThreadNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a1e      	ldr	r2, [pc, #120]	; (8000a44 <main+0xd4>)
 80009ca:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(buttonTaskEntry, NULL, &buttonTask_attributes);
 80009cc:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <main+0xd8>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	481e      	ldr	r0, [pc, #120]	; (8000a4c <main+0xdc>)
 80009d2:	f006 fd8f 	bl	80074f4 <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a1d      	ldr	r2, [pc, #116]	; (8000a50 <main+0xe0>)
 80009da:	6013      	str	r3, [r2, #0]

  /* creation of fanTask */
  fanTaskHandle = osThreadNew(fanTaskEntry, NULL, &fanTask_attributes);
 80009dc:	4a1d      	ldr	r2, [pc, #116]	; (8000a54 <main+0xe4>)
 80009de:	2100      	movs	r1, #0
 80009e0:	481d      	ldr	r0, [pc, #116]	; (8000a58 <main+0xe8>)
 80009e2:	f006 fd87 	bl	80074f4 <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <main+0xec>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(displayTaskEntry, NULL, &displayTask_attributes);
 80009ec:	4a1c      	ldr	r2, [pc, #112]	; (8000a60 <main+0xf0>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	481c      	ldr	r0, [pc, #112]	; (8000a64 <main+0xf4>)
 80009f2:	f006 fd7f 	bl	80074f4 <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a1b      	ldr	r2, [pc, #108]	; (8000a68 <main+0xf8>)
 80009fa:	6013      	str	r3, [r2, #0]

  /* creation of touchTask */
  touchTaskHandle = osThreadNew(touchTaskEntry, NULL, &touchTask_attributes);
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <main+0xfc>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	481b      	ldr	r0, [pc, #108]	; (8000a70 <main+0x100>)
 8000a02:	f006 fd77 	bl	80074f4 <osThreadNew>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4a1a      	ldr	r2, [pc, #104]	; (8000a74 <main+0x104>)
 8000a0a:	6013      	str	r3, [r2, #0]

  /* creation of dspTask */
  dspTaskHandle = osThreadNew(dspTaskEntry, NULL, &dspTask_attributes);
 8000a0c:	4a1a      	ldr	r2, [pc, #104]	; (8000a78 <main+0x108>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	481a      	ldr	r0, [pc, #104]	; (8000a7c <main+0x10c>)
 8000a12:	f006 fd6f 	bl	80074f4 <osThreadNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <main+0x110>)
 8000a1a:	6013      	str	r3, [r2, #0]

  /* creation of sensorATask */
  sensorATaskHandle = osThreadNew(sensorATaskEntry, NULL, &sensorATask_attributes);
 8000a1c:	4a19      	ldr	r2, [pc, #100]	; (8000a84 <main+0x114>)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4819      	ldr	r0, [pc, #100]	; (8000a88 <main+0x118>)
 8000a22:	f006 fd67 	bl	80074f4 <osThreadNew>
 8000a26:	4603      	mov	r3, r0
 8000a28:	4a18      	ldr	r2, [pc, #96]	; (8000a8c <main+0x11c>)
 8000a2a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a2c:	f006 fd3c 	bl	80074a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0xc0>
 8000a32:	bf00      	nop
 8000a34:	0800a8e0 	.word	0x0800a8e0
 8000a38:	20004d38 	.word	0x20004d38
 8000a3c:	0800a7e4 	.word	0x0800a7e4
 8000a40:	08001471 	.word	0x08001471
 8000a44:	20004cd8 	.word	0x20004cd8
 8000a48:	0800a808 	.word	0x0800a808
 8000a4c:	080005b1 	.word	0x080005b1
 8000a50:	20004d34 	.word	0x20004d34
 8000a54:	0800a82c 	.word	0x0800a82c
 8000a58:	080008f5 	.word	0x080008f5
 8000a5c:	20004c6c 	.word	0x20004c6c
 8000a60:	0800a850 	.word	0x0800a850
 8000a64:	08001d79 	.word	0x08001d79
 8000a68:	20004b7c 	.word	0x20004b7c
 8000a6c:	0800a874 	.word	0x0800a874
 8000a70:	08001c05 	.word	0x08001c05
 8000a74:	20004c10 	.word	0x20004c10
 8000a78:	0800a898 	.word	0x0800a898
 8000a7c:	080008e5 	.word	0x080008e5
 8000a80:	20004a88 	.word	0x20004a88
 8000a84:	0800a8bc 	.word	0x0800a8bc
 8000a88:	080029d9 	.word	0x080029d9
 8000a8c:	20004d3c 	.word	0x20004d3c

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b094      	sub	sp, #80	; 0x50
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	f107 0320 	add.w	r3, r7, #32
 8000a9a:	2230      	movs	r2, #48	; 0x30
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f009 fcfe 	bl	800a4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <SystemClock_Config+0xd0>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	4a28      	ldr	r2, [pc, #160]	; (8000b60 <SystemClock_Config+0xd0>)
 8000abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac4:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <SystemClock_Config+0xd0>)
 8000ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a22      	ldr	r2, [pc, #136]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ade:	6013      	str	r3, [r2, #0]
 8000ae0:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <SystemClock_Config+0xd4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000aec:	2309      	movs	r3, #9
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000af6:	2301      	movs	r3, #1
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000b04:	2306      	movs	r3, #6
 8000b06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b08:	23a8      	movs	r3, #168	; 0xa8
 8000b0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b10:	2307      	movs	r3, #7
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b14:	f107 0320 	add.w	r3, r7, #32
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fd23 	bl	8004564 <HAL_RCC_OscConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b24:	f000 fcce 	bl	80014c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b28:	230f      	movs	r3, #15
 8000b2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2105      	movs	r1, #5
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 ff84 	bl	8004a54 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b52:	f000 fcb7 	bl	80014c4 <Error_Handler>
  }
}
 8000b56:	bf00      	nop
 8000b58:	3750      	adds	r7, #80	; 0x50
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b6e:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <MX_I2C1_Init+0x54>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <MX_I2C1_Init+0x58>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	; (8000bb8 <MX_I2C1_Init+0x50>)
 8000ba6:	f003 fb99 	bl	80042dc <HAL_I2C_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bb0:	f000 fc88 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20004ad4 	.word	0x20004ad4
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	000186a0 	.word	0x000186a0

08000bc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000bca:	4a13      	ldr	r2, [pc, #76]	; (8000c18 <MX_I2C2_Init+0x54>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000bd0:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <MX_I2C2_Init+0x58>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000be2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_I2C2_Init+0x50>)
 8000c02:	f003 fb6b 	bl	80042dc <HAL_I2C_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c0c:	f000 fc5a 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20004b28 	.word	0x20004b28
 8000c18:	40005800 	.word	0x40005800
 8000c1c:	000186a0 	.word	0x000186a0

08000c20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_RTC_Init+0x44>)
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <MX_RTC_Init+0x48>)
 8000c28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_RTC_Init+0x44>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_RTC_Init+0x44>)
 8000c32:	227f      	movs	r2, #127	; 0x7f
 8000c34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_RTC_Init+0x44>)
 8000c38:	22ff      	movs	r2, #255	; 0xff
 8000c3a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_RTC_Init+0x44>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_RTC_Init+0x44>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_RTC_Init+0x44>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_RTC_Init+0x44>)
 8000c50:	f004 f9e4 	bl	800501c <HAL_RTC_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c5a:	f000 fc33 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20004c70 	.word	0x20004c70
 8000c68:	40002800 	.word	0x40002800

08000c6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000c72:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <MX_SPI1_Init+0x68>)
 8000c74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000c98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000ca0:	2220      	movs	r2, #32
 8000ca2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000cb8:	220a      	movs	r2, #10
 8000cba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_SPI1_Init+0x64>)
 8000cbe:	f004 fa92 	bl	80051e6 <HAL_SPI_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cc8:	f000 fbfc 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20004cdc 	.word	0x20004cdc
 8000cd4:	40013000 	.word	0x40013000

08000cd8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <MX_SPI3_Init+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000ce4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000d04:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d08:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000d0c:	2230      	movs	r2, #48	; 0x30
 8000d0e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000d24:	220a      	movs	r2, #10
 8000d26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_SPI3_Init+0x64>)
 8000d2a:	f004 fa5c 	bl	80051e6 <HAL_SPI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000d34:	f000 fbc6 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20004c14 	.word	0x20004c14
 8000d40:	40003c00 	.word	0x40003c00

08000d44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b096      	sub	sp, #88	; 0x58
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f009 fb8f 	bl	800a4a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d82:	4b45      	ldr	r3, [pc, #276]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <MX_TIM1_Init+0x158>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d88:	4b43      	ldr	r3, [pc, #268]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b42      	ldr	r3, [pc, #264]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6700;
 8000d94:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000d96:	f641 222c 	movw	r2, #6700	; 0x1a2c
 8000d9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000d9c:	4b3e      	ldr	r3, [pc, #248]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000d9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000da4:	4b3c      	ldr	r3, [pc, #240]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000daa:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000dac:	2280      	movs	r2, #128	; 0x80
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000db0:	4839      	ldr	r0, [pc, #228]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000db2:	f004 ff9f 	bl	8005cf4 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000dbc:	f000 fb82 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dc6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4832      	ldr	r0, [pc, #200]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000dce:	f005 fcf7 	bl	80067c0 <HAL_TIM_ConfigClockSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000dd8:	f000 fb74 	bl	80014c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ddc:	482e      	ldr	r0, [pc, #184]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000dde:	f005 f8b1 	bl	8005f44 <HAL_TIM_PWM_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000de8:	f000 fb6c 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4827      	ldr	r0, [pc, #156]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000dfc:	f006 fa0a 	bl	8007214 <HAL_TIMEx_MasterConfigSynchronization>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000e06:	f000 fb5d 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0a:	2360      	movs	r3, #96	; 0x60
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	481a      	ldr	r0, [pc, #104]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000e30:	f005 fc04 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000e3a:	f000 fb43 	bl	80014c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	2204      	movs	r2, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4814      	ldr	r0, [pc, #80]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000e48:	f005 fbf8 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000e52:	f000 fb37 	bl	80014c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e74:	1d3b      	adds	r3, r7, #4
 8000e76:	4619      	mov	r1, r3
 8000e78:	4807      	ldr	r0, [pc, #28]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000e7a:	f006 fa47 	bl	800730c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000e84:	f000 fb1e 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e88:	4803      	ldr	r0, [pc, #12]	; (8000e98 <MX_TIM1_Init+0x154>)
 8000e8a:	f000 fd77 	bl	800197c <HAL_TIM_MspPostInit>

}
 8000e8e:	bf00      	nop
 8000e90:	3758      	adds	r7, #88	; 0x58
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20004c90 	.word	0x20004c90
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea6:	f107 0320 	add.w	r3, r7, #32
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
 8000ebe:	615a      	str	r2, [r3, #20]
 8000ec0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec2:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000ec4:	4a27      	ldr	r2, [pc, #156]	; (8000f64 <MX_TIM3_Init+0xc4>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ec8:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b1f      	ldr	r3, [pc, #124]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ee8:	481d      	ldr	r0, [pc, #116]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000eea:	f005 f82b 	bl	8005f44 <HAL_TIM_PWM_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ef4:	f000 fae6 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4619      	mov	r1, r3
 8000f06:	4816      	ldr	r0, [pc, #88]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000f08:	f006 f984 	bl	8007214 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f12:	f000 fad7 	bl	80014c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f16:	2360      	movs	r3, #96	; 0x60
 8000f18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000f2e:	f005 fb85 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f38:	f000 fac4 	bl	80014c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000f44:	f005 fb7a 	bl	800663c <HAL_TIM_PWM_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f4e:	f000 fab9 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <MX_TIM3_Init+0xc0>)
 8000f54:	f000 fd12 	bl	800197c <HAL_TIM_MspPostInit>

}
 8000f58:	bf00      	nop
 8000f5a:	3728      	adds	r7, #40	; 0x28
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20004bc8 	.word	0x20004bc8
 8000f64:	40000400 	.word	0x40000400

08000f68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <MX_TIM4_Init+0xec>)
 8000f86:	4a34      	ldr	r2, [pc, #208]	; (8001058 <MX_TIM4_Init+0xf0>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000f8a:	4b32      	ldr	r3, [pc, #200]	; (8001054 <MX_TIM4_Init+0xec>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b30      	ldr	r3, [pc, #192]	; (8001054 <MX_TIM4_Init+0xec>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <MX_TIM4_Init+0xec>)
 8000f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9e:	4b2d      	ldr	r3, [pc, #180]	; (8001054 <MX_TIM4_Init+0xec>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <MX_TIM4_Init+0xec>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000faa:	482a      	ldr	r0, [pc, #168]	; (8001054 <MX_TIM4_Init+0xec>)
 8000fac:	f005 f952 	bl	8006254 <HAL_TIM_IC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000fb6:	f000 fa85 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fc2:	f107 0310 	add.w	r3, r7, #16
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4822      	ldr	r0, [pc, #136]	; (8001054 <MX_TIM4_Init+0xec>)
 8000fca:	f006 f923 	bl	8007214 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000fd4:	f000 fa76 	bl	80014c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4819      	ldr	r0, [pc, #100]	; (8001054 <MX_TIM4_Init+0xec>)
 8000ff0:	f005 fa87 	bl	8006502 <HAL_TIM_IC_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000ffa:	f000 fa63 	bl	80014c4 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000ffe:	2302      	movs	r3, #2
 8001000:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	2204      	movs	r2, #4
 8001006:	4619      	mov	r1, r3
 8001008:	4812      	ldr	r0, [pc, #72]	; (8001054 <MX_TIM4_Init+0xec>)
 800100a:	f005 fa7a 	bl	8006502 <HAL_TIM_IC_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001014:	f000 fa56 	bl	80014c4 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001018:	2301      	movs	r3, #1
 800101a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	2208      	movs	r2, #8
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_TIM4_Init+0xec>)
 8001024:	f005 fa6d 	bl	8006502 <HAL_TIM_IC_ConfigChannel>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800102e:	f000 fa49 	bl	80014c4 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001032:	2302      	movs	r3, #2
 8001034:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001036:	463b      	mov	r3, r7
 8001038:	220c      	movs	r2, #12
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_TIM4_Init+0xec>)
 800103e:	f005 fa60 	bl	8006502 <HAL_TIM_IC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8001048:	f000 fa3c 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20004a8c 	.word	0x20004a8c
 8001058:	40000800 	.word	0x40000800

0800105c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	463b      	mov	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_TIM5_Init+0x94>)
 800107a:	4a1e      	ldr	r2, [pc, #120]	; (80010f4 <MX_TIM5_Init+0x98>)
 800107c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800107e:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_TIM5_Init+0x94>)
 8001080:	2253      	movs	r2, #83	; 0x53
 8001082:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_TIM5_Init+0x94>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_TIM5_Init+0x94>)
 800108c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001090:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001092:	4b17      	ldr	r3, [pc, #92]	; (80010f0 <MX_TIM5_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_TIM5_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800109e:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_TIM5_Init+0x94>)
 80010a0:	f004 fe28 	bl	8005cf4 <HAL_TIM_Base_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80010aa:	f000 fa0b 	bl	80014c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM5_Init+0x94>)
 80010bc:	f005 fb80 	bl	80067c0 <HAL_TIM_ConfigClockSource>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f000 f9fd 	bl	80014c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_TIM5_Init+0x94>)
 80010d8:	f006 f89c 	bl	8007214 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80010e2:	f000 f9ef 	bl	80014c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20004b80 	.word	0x20004b80
 80010f4:	40000c00 	.word	0x40000c00

080010f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <MX_DMA_Init+0x3c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <MX_DMA_Init+0x3c>)
 8001108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <MX_DMA_Init+0x3c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2044      	movs	r0, #68	; 0x44
 8001120:	f002 fb5c 	bl	80037dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001124:	2044      	movs	r0, #68	; 0x44
 8001126:	f002 fb75 	bl	8003814 <HAL_NVIC_EnableIRQ>

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	4b95      	ldr	r3, [pc, #596]	; (80013a8 <MX_GPIO_Init+0x270>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a94      	ldr	r2, [pc, #592]	; (80013a8 <MX_GPIO_Init+0x270>)
 8001158:	f043 0310 	orr.w	r3, r3, #16
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b92      	ldr	r3, [pc, #584]	; (80013a8 <MX_GPIO_Init+0x270>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0310 	and.w	r3, r3, #16
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b8e      	ldr	r3, [pc, #568]	; (80013a8 <MX_GPIO_Init+0x270>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a8d      	ldr	r2, [pc, #564]	; (80013a8 <MX_GPIO_Init+0x270>)
 8001174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <MX_GPIO_Init+0x270>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b87      	ldr	r3, [pc, #540]	; (80013a8 <MX_GPIO_Init+0x270>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a86      	ldr	r2, [pc, #536]	; (80013a8 <MX_GPIO_Init+0x270>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b84      	ldr	r3, [pc, #528]	; (80013a8 <MX_GPIO_Init+0x270>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b80      	ldr	r3, [pc, #512]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a7f      	ldr	r2, [pc, #508]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b7d      	ldr	r3, [pc, #500]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b79      	ldr	r3, [pc, #484]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a78      	ldr	r2, [pc, #480]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b76      	ldr	r3, [pc, #472]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a71      	ldr	r2, [pc, #452]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b6f      	ldr	r3, [pc, #444]	; (80013a8 <MX_GPIO_Init+0x270>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CH5_OUT_Pin|CH6_OUT_Pin|CH4_OUT_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2162      	movs	r1, #98	; 0x62
 80011fa:	486c      	ldr	r0, [pc, #432]	; (80013ac <MX_GPIO_Init+0x274>)
 80011fc:	f003 f83c 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	2110      	movs	r1, #16
 8001204:	486a      	ldr	r0, [pc, #424]	; (80013b0 <MX_GPIO_Init+0x278>)
 8001206:	f003 f837 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	2120      	movs	r1, #32
 800120e:	4868      	ldr	r0, [pc, #416]	; (80013b0 <MX_GPIO_Init+0x278>)
 8001210:	f003 f832 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AC_RES_GPIO_Port, AC_RES_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2110      	movs	r1, #16
 8001218:	4866      	ldr	r0, [pc, #408]	; (80013b4 <MX_GPIO_Init+0x27c>)
 800121a:	f003 f82d 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|CH1_OUT_Pin|CH2_OUT_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f240 3101 	movw	r1, #769	; 0x301
 8001224:	4864      	ldr	r0, [pc, #400]	; (80013b8 <MX_GPIO_Init+0x280>)
 8001226:	f003 f827 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	21c0      	movs	r1, #192	; 0xc0
 800122e:	4863      	ldr	r0, [pc, #396]	; (80013bc <MX_GPIO_Init+0x284>)
 8001230:	f003 f822 	bl	8004278 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH5_OUT_Pin CH6_OUT_Pin CH4_OUT_Pin */
  GPIO_InitStruct.Pin = CH5_OUT_Pin|CH6_OUT_Pin|CH4_OUT_Pin;
 8001234:	2362      	movs	r3, #98	; 0x62
 8001236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001238:	2301      	movs	r3, #1
 800123a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001240:	2300      	movs	r3, #0
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4858      	ldr	r0, [pc, #352]	; (80013ac <MX_GPIO_Init+0x274>)
 800124c:	f002 fe60 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH5_Pin CH6_Pin */
  GPIO_InitStruct.Pin = CH5_Pin|CH6_Pin;
 8001250:	230c      	movs	r3, #12
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001254:	2303      	movs	r3, #3
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4854      	ldr	r0, [pc, #336]	; (80013b4 <MX_GPIO_Init+0x27c>)
 8001264:	f002 fe54 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8001268:	2310      	movs	r3, #16
 800126a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001270:	2301      	movs	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	484c      	ldr	r0, [pc, #304]	; (80013b0 <MX_GPIO_Init+0x278>)
 8001280:	f002 fe46 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_CTRL_Pin */
  GPIO_InitStruct.Pin = AC_CTRL_Pin;
 8001284:	2320      	movs	r3, #32
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128c:	2302      	movs	r3, #2
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AC_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	4845      	ldr	r0, [pc, #276]	; (80013b0 <MX_GPIO_Init+0x278>)
 800129c:	f002 fe38 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_RES_Pin */
  GPIO_InitStruct.Pin = AC_RES_Pin;
 80012a0:	2310      	movs	r3, #16
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012a8:	2302      	movs	r3, #2
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AC_RES_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	483f      	ldr	r0, [pc, #252]	; (80013b4 <MX_GPIO_Init+0x27c>)
 80012b8:	f002 fe2a 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin CH1_OUT_Pin CH2_OUT_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CH1_OUT_Pin|CH2_OUT_Pin;
 80012bc:	f240 3301 	movw	r3, #769	; 0x301
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4838      	ldr	r0, [pc, #224]	; (80013b8 <MX_GPIO_Init+0x280>)
 80012d6:	f002 fe1b 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_IN_Pin */
  GPIO_InitStruct.Pin = AC_IN_Pin;
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AC_IN_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	482f      	ldr	r0, [pc, #188]	; (80013ac <MX_GPIO_Init+0x274>)
 80012f0:	f002 fe0e 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS2_Pin TS1_Pin */
  GPIO_InitStruct.Pin = TS2_Pin|TS1_Pin;
 80012f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	482c      	ldr	r0, [pc, #176]	; (80013bc <MX_GPIO_Init+0x284>)
 800130a:	f002 fe01 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800130e:	2301      	movs	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001316:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001318:	2301      	movs	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4826      	ldr	r0, [pc, #152]	; (80013bc <MX_GPIO_Init+0x284>)
 8001324:	f002 fdf4 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PON_Pin */
  GPIO_InitStruct.Pin = PON_Pin;
 8001328:	2308      	movs	r3, #8
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PON_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4820      	ldr	r0, [pc, #128]	; (80013bc <MX_GPIO_Init+0x284>)
 800133c:	f002 fde8 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001344:	2301      	movs	r3, #1
 8001346:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001348:	2301      	movs	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8001350:	f107 031c 	add.w	r3, r7, #28
 8001354:	4619      	mov	r1, r3
 8001356:	4819      	ldr	r0, [pc, #100]	; (80013bc <MX_GPIO_Init+0x284>)
 8001358:	f002 fdda 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001364:	2301      	movs	r3, #1
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4812      	ldr	r0, [pc, #72]	; (80013bc <MX_GPIO_Init+0x284>)
 8001374:	f002 fdcc 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH3_OUT_Pin */
  GPIO_InitStruct.Pin = CH3_OUT_Pin;
 8001378:	2301      	movs	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CH3_OUT_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	4619      	mov	r1, r3
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <MX_GPIO_Init+0x274>)
 800138c:	f002 fdc0 	bl	8003f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2105      	movs	r1, #5
 8001394:	2017      	movs	r0, #23
 8001396:	f002 fa21 	bl	80037dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800139a:	2017      	movs	r0, #23
 800139c:	f002 fa3a 	bl	8003814 <HAL_NVIC_EnableIRQ>

}
 80013a0:	bf00      	nop
 80013a2:	3730      	adds	r7, #48	; 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020800 	.word	0x40020800
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40020c00 	.word	0x40020c00

080013c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
	if (TOUCH_IRQ_Pin & GPIO_Pin) {
 80013ca:	88fb      	ldrh	r3, [r7, #6]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d002      	beq.n	80013dc <HAL_GPIO_EXTI_Callback+0x1c>
	  touch_pending = 1;
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <HAL_GPIO_EXTI_Callback+0xa0>)
 80013d8:	2201      	movs	r2, #1
 80013da:	701a      	strb	r2, [r3, #0]
	}
	if (AC_IN_Pin & GPIO_Pin) {
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d036      	beq.n	8001456 <HAL_GPIO_EXTI_Callback+0x96>
	  if (state == SS_REQUEST) {
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d10a      	bne.n	8001406 <HAL_GPIO_EXTI_Callback+0x46>
		HAL_GPIO_WritePin(AC_RES_GPIO_Port, AC_RES_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2110      	movs	r1, #16
 80013f4:	481c      	ldr	r0, [pc, #112]	; (8001468 <HAL_GPIO_EXTI_Callback+0xa8>)
 80013f6:	f002 ff3f 	bl	8004278 <HAL_GPIO_WritePin>
	    state++;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	3301      	adds	r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001404:	701a      	strb	r2, [r3, #0]
	  }
	  if (state == XFR_ON) {
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b04      	cmp	r3, #4
 800140c:	d10f      	bne.n	800142e <HAL_GPIO_EXTI_Callback+0x6e>
		HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	2120      	movs	r1, #32
 8001412:	4816      	ldr	r0, [pc, #88]	; (800146c <HAL_GPIO_EXTI_Callback+0xac>)
 8001414:	f002 ff30 	bl	8004278 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AC_RES_GPIO_Port, AC_RES_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2110      	movs	r1, #16
 800141c:	4812      	ldr	r0, [pc, #72]	; (8001468 <HAL_GPIO_EXTI_Callback+0xa8>)
 800141e:	f002 ff2b 	bl	8004278 <HAL_GPIO_WritePin>
	    state++;
 8001422:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 800142c:	701a      	strb	r2, [r3, #0]
	  }
	  if (state == SB_REQUEST) {
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b06      	cmp	r3, #6
 8001434:	d10f      	bne.n	8001456 <HAL_GPIO_EXTI_Callback+0x96>
		HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	2120      	movs	r1, #32
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <HAL_GPIO_EXTI_Callback+0xac>)
 800143c:	f002 ff1c 	bl	8004278 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AC_RES_GPIO_Port, AC_RES_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2110      	movs	r1, #16
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001446:	f002 ff17 	bl	8004278 <HAL_GPIO_WritePin>
	    state++;
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	3301      	adds	r3, #1
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001454:	701a      	strb	r2, [r3, #0]
	  }
	}
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	200000a8 	.word	0x200000a8
 8001464:	200000a0 	.word	0x200000a0
 8001468:	40020800 	.word	0x40020800
 800146c:	40020000 	.word	0x40020000

08001470 <idleTaskEntry>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_idleTaskEntry */
void idleTaskEntry(void *argument)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    // Status LED blinking
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2101      	movs	r1, #1
 800147c:	4807      	ldr	r0, [pc, #28]	; (800149c <idleTaskEntry+0x2c>)
 800147e:	f002 fefb 	bl	8004278 <HAL_GPIO_WritePin>
    osDelay(100);
 8001482:	2064      	movs	r0, #100	; 0x64
 8001484:	f006 f8c8 	bl	8007618 <osDelay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2101      	movs	r1, #1
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <idleTaskEntry+0x2c>)
 800148e:	f002 fef3 	bl	8004278 <HAL_GPIO_WritePin>
	osDelay(100);
 8001492:	2064      	movs	r0, #100	; 0x64
 8001494:	f006 f8c0 	bl	8007618 <osDelay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001498:	e7ee      	b.n	8001478 <idleTaskEntry+0x8>
 800149a:	bf00      	nop
 800149c:	40020400 	.word	0x40020400

080014a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014b2:	f002 f897 	bl	80035e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40014400 	.word	0x40014400

080014c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c8:	b672      	cpsid	i
}
 80014ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014cc:	e7fe      	b.n	80014cc <Error_Handler+0x8>
	...

080014d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_MspInit+0x54>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_MspInit+0x54>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <HAL_MspInit+0x54>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_MspInit+0x54>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <HAL_MspInit+0x54>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_MspInit+0x54>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	210f      	movs	r1, #15
 8001512:	f06f 0001 	mvn.w	r0, #1
 8001516:	f002 f961 	bl	80037dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800

08001528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	; 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a32      	ldr	r2, [pc, #200]	; (8001610 <HAL_I2C_MspInit+0xe8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d12c      	bne.n	80015a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	61bb      	str	r3, [r7, #24]
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <HAL_I2C_MspInit+0xec>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a30      	ldr	r2, [pc, #192]	; (8001614 <HAL_I2C_MspInit+0xec>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <HAL_I2C_MspInit+0xec>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	61bb      	str	r3, [r7, #24]
 8001564:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DSP_SCL_Pin|DSP_SDA_Pin;
 8001566:	23c0      	movs	r3, #192	; 0xc0
 8001568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800156a:	2312      	movs	r3, #18
 800156c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001576:	2304      	movs	r3, #4
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	4825      	ldr	r0, [pc, #148]	; (8001618 <HAL_I2C_MspInit+0xf0>)
 8001582:	f002 fcc5 	bl	8003f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <HAL_I2C_MspInit+0xec>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a21      	ldr	r2, [pc, #132]	; (8001614 <HAL_I2C_MspInit+0xec>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <HAL_I2C_MspInit+0xec>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80015a2:	e031      	b.n	8001608 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_I2C_MspInit+0xf4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d12c      	bne.n	8001608 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_I2C_MspInit+0xec>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_I2C_MspInit+0xec>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_I2C_MspInit+0xec>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CODEC_SCL_Pin|CODEC_SDA_Pin;
 80015ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015dc:	2304      	movs	r3, #4
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	480c      	ldr	r0, [pc, #48]	; (8001618 <HAL_I2C_MspInit+0xf0>)
 80015e8:	f002 fc92 	bl	8003f10 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_I2C_MspInit+0xec>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_I2C_MspInit+0xec>)
 80015f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_I2C_MspInit+0xec>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	bf00      	nop
 800160a:	3730      	adds	r7, #48	; 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40005400 	.word	0x40005400
 8001614:	40023800 	.word	0x40023800
 8001618:	40020400 	.word	0x40020400
 800161c:	40005800 	.word	0x40005800

08001620 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_RTC_MspInit+0x4c>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d111      	bne.n	8001664 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001640:	2302      	movs	r3, #2
 8001642:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001648:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fc02 	bl	8004e58 <HAL_RCCEx_PeriphCLKConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800165a:	f7ff ff33 	bl	80014c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <HAL_RTC_MspInit+0x50>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40002800 	.word	0x40002800
 8001670:	42470e3c 	.word	0x42470e3c

08001674 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a5a      	ldr	r2, [pc, #360]	; (80017fc <HAL_SPI_MspInit+0x188>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d15d      	bne.n	8001752 <HAL_SPI_MspInit+0xde>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a58      	ldr	r2, [pc, #352]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 80016a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	4b52      	ldr	r3, [pc, #328]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a51      	ldr	r2, [pc, #324]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b4f      	ldr	r3, [pc, #316]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016ce:	2338      	movs	r3, #56	; 0x38
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d6:	2301      	movs	r3, #1
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016de:	2305      	movs	r3, #5
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	4846      	ldr	r0, [pc, #280]	; (8001804 <HAL_SPI_MspInit+0x190>)
 80016ea:	f002 fc11 	bl	8003f10 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80016ee:	4b46      	ldr	r3, [pc, #280]	; (8001808 <HAL_SPI_MspInit+0x194>)
 80016f0:	4a46      	ldr	r2, [pc, #280]	; (800180c <HAL_SPI_MspInit+0x198>)
 80016f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80016f4:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_SPI_MspInit+0x194>)
 80016f6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016fc:	4b42      	ldr	r3, [pc, #264]	; (8001808 <HAL_SPI_MspInit+0x194>)
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_SPI_MspInit+0x194>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001708:	4b3f      	ldr	r3, [pc, #252]	; (8001808 <HAL_SPI_MspInit+0x194>)
 800170a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001710:	4b3d      	ldr	r3, [pc, #244]	; (8001808 <HAL_SPI_MspInit+0x194>)
 8001712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001716:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001718:	4b3b      	ldr	r3, [pc, #236]	; (8001808 <HAL_SPI_MspInit+0x194>)
 800171a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_SPI_MspInit+0x194>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001726:	4b38      	ldr	r3, [pc, #224]	; (8001808 <HAL_SPI_MspInit+0x194>)
 8001728:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800172c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172e:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_SPI_MspInit+0x194>)
 8001730:	2200      	movs	r2, #0
 8001732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001734:	4834      	ldr	r0, [pc, #208]	; (8001808 <HAL_SPI_MspInit+0x194>)
 8001736:	f002 f87b 	bl	8003830 <HAL_DMA_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8001740:	f7ff fec0 	bl	80014c4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a30      	ldr	r2, [pc, #192]	; (8001808 <HAL_SPI_MspInit+0x194>)
 8001748:	649a      	str	r2, [r3, #72]	; 0x48
 800174a:	4a2f      	ldr	r2, [pc, #188]	; (8001808 <HAL_SPI_MspInit+0x194>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001750:	e050      	b.n	80017f4 <HAL_SPI_MspInit+0x180>
  else if(hspi->Instance==SPI3)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2e      	ldr	r2, [pc, #184]	; (8001810 <HAL_SPI_MspInit+0x19c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d14b      	bne.n	80017f4 <HAL_SPI_MspInit+0x180>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	4b27      	ldr	r3, [pc, #156]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a26      	ldr	r2, [pc, #152]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 8001766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b24      	ldr	r3, [pc, #144]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 800177e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6313      	str	r3, [r2, #48]	; 0x30
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	4b19      	ldr	r3, [pc, #100]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	4a18      	ldr	r2, [pc, #96]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 800179e:	f043 0304 	orr.w	r3, r3, #4
 80017a2:	6313      	str	r3, [r2, #48]	; 0x30
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <HAL_SPI_MspInit+0x18c>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TOUCH_nCS_Pin;
 80017b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c2:	2306      	movs	r3, #6
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOUCH_nCS_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	4811      	ldr	r0, [pc, #68]	; (8001814 <HAL_SPI_MspInit+0x1a0>)
 80017ce:	f002 fb9f 	bl	8003f10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOUCH_SCK_Pin|TOUCH_MISO_Pin|TOUCH_MOSI_Pin;
 80017d2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017dc:	2301      	movs	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e4:	2306      	movs	r3, #6
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	f107 031c 	add.w	r3, r7, #28
 80017ec:	4619      	mov	r1, r3
 80017ee:	480a      	ldr	r0, [pc, #40]	; (8001818 <HAL_SPI_MspInit+0x1a4>)
 80017f0:	f002 fb8e 	bl	8003f10 <HAL_GPIO_Init>
}
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	; 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40013000 	.word	0x40013000
 8001800:	40023800 	.word	0x40023800
 8001804:	40020400 	.word	0x40020400
 8001808:	20004d40 	.word	0x20004d40
 800180c:	40026488 	.word	0x40026488
 8001810:	40003c00 	.word	0x40003c00
 8001814:	40020000 	.word	0x40020000
 8001818:	40020800 	.word	0x40020800

0800181c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1c      	ldr	r2, [pc, #112]	; (800189c <HAL_TIM_Base_MspInit+0x80>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d11e      	bne.n	800186c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_TIM_Base_MspInit+0x84>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a1a      	ldr	r2, [pc, #104]	; (80018a0 <HAL_TIM_Base_MspInit+0x84>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <HAL_TIM_Base_MspInit+0x84>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2105      	movs	r1, #5
 800184e:	2018      	movs	r0, #24
 8001850:	f001 ffc4 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001854:	2018      	movs	r0, #24
 8001856:	f001 ffdd 	bl	8003814 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	2019      	movs	r0, #25
 8001860:	f001 ffbc 	bl	80037dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001864:	2019      	movs	r0, #25
 8001866:	f001 ffd5 	bl	8003814 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800186a:	e012      	b.n	8001892 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a0c      	ldr	r2, [pc, #48]	; (80018a4 <HAL_TIM_Base_MspInit+0x88>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10d      	bne.n	8001892 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_TIM_Base_MspInit+0x84>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <HAL_TIM_Base_MspInit+0x84>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_TIM_Base_MspInit+0x84>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68bb      	ldr	r3, [r7, #8]
}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40010000 	.word	0x40010000
 80018a0:	40023800 	.word	0x40023800
 80018a4:	40000c00 	.word	0x40000c00

080018a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10d      	bne.n	80018d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_TIM_PWM_MspInit+0x40>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_TIM_PWM_MspInit+0x40>)
 80018c4:	f043 0302 	orr.w	r3, r3, #2
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <HAL_TIM_PWM_MspInit+0x40>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40000400 	.word	0x40000400
 80018e8:	40023800 	.word	0x40023800

080018ec <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a19      	ldr	r2, [pc, #100]	; (8001970 <HAL_TIM_IC_MspInit+0x84>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12c      	bne.n	8001968 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <HAL_TIM_IC_MspInit+0x88>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a17      	ldr	r2, [pc, #92]	; (8001974 <HAL_TIM_IC_MspInit+0x88>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_TIM_IC_MspInit+0x88>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_TIM_IC_MspInit+0x88>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <HAL_TIM_IC_MspInit+0x88>)
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <HAL_TIM_IC_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = FAN1_IN_Pin|FAN2_IN_Pin;
 8001946:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800194a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001958:	2302      	movs	r3, #2
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	4619      	mov	r1, r3
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <HAL_TIM_IC_MspInit+0x8c>)
 8001964:	f002 fad4 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40000800 	.word	0x40000800
 8001974:	40023800 	.word	0x40023800
 8001978:	40020c00 	.word	0x40020c00

0800197c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a24      	ldr	r2, [pc, #144]	; (8001a2c <HAL_TIM_MspPostInit+0xb0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d11f      	bne.n	80019de <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_TIM_MspPostInit+0xb4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <HAL_TIM_MspPostInit+0xb4>)
 80019a8:	f043 0310 	orr.w	r3, r3, #16
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_TIM_MspPostInit+0xb4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0310 	and.w	r3, r3, #16
 80019b6:	613b      	str	r3, [r7, #16]
 80019b8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_CTRL_Pin|FAN2_CTRL_Pin;
 80019ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80019be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019cc:	2301      	movs	r3, #1
 80019ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4817      	ldr	r0, [pc, #92]	; (8001a34 <HAL_TIM_MspPostInit+0xb8>)
 80019d8:	f002 fa9a 	bl	8003f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019dc:	e022      	b.n	8001a24 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a15      	ldr	r2, [pc, #84]	; (8001a38 <HAL_TIM_MspPostInit+0xbc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d11d      	bne.n	8001a24 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4b10      	ldr	r3, [pc, #64]	; (8001a30 <HAL_TIM_MspPostInit+0xb4>)
 80019ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f0:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <HAL_TIM_MspPostInit+0xb4>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6313      	str	r3, [r2, #48]	; 0x30
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <HAL_TIM_MspPostInit+0xb4>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUT_LED_Pin|LCD_BL_Pin;
 8001a04:	23c0      	movs	r3, #192	; 0xc0
 8001a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a14:	2302      	movs	r3, #2
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	; (8001a3c <HAL_TIM_MspPostInit+0xc0>)
 8001a20:	f002 fa76 	bl	8003f10 <HAL_GPIO_Init>
}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	; 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40010000 	.word	0x40010000
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40020800 	.word	0x40020800

08001a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	; 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	2019      	movs	r0, #25
 8001a56:	f001 fec1 	bl	80037dc <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a5a:	2019      	movs	r0, #25
 8001a5c:	f001 feda 	bl	8003814 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <HAL_InitTick+0xa4>)
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_InitTick+0xa4>)
 8001a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a70:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <HAL_InitTick+0xa4>)
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a7c:	f107 0210 	add.w	r2, r7, #16
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f9b4 	bl	8004df4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a8c:	f003 f99e 	bl	8004dcc <HAL_RCC_GetPCLK2Freq>
 8001a90:	4603      	mov	r3, r0
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a98:	4a13      	ldr	r2, [pc, #76]	; (8001ae8 <HAL_InitTick+0xa8>)
 8001a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9e:	0c9b      	lsrs	r3, r3, #18
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_InitTick+0xac>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <HAL_InitTick+0xb0>)
 8001aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_InitTick+0xac>)
 8001aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001ab2:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_InitTick+0xac>)
 8001ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <HAL_InitTick+0xac>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_InitTick+0xac>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <HAL_InitTick+0xac>)
 8001ac6:	f004 f915 	bl	8005cf4 <HAL_TIM_Base_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001ad0:	4806      	ldr	r0, [pc, #24]	; (8001aec <HAL_InitTick+0xac>)
 8001ad2:	f004 f9c7 	bl	8005e64 <HAL_TIM_Base_Start_IT>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	431bde83 	.word	0x431bde83
 8001aec:	20004da0 	.word	0x20004da0
 8001af0:	40014400 	.word	0x40014400

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b24:	2080      	movs	r0, #128	; 0x80
 8001b26:	f002 fbc1 	bl	80042ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b36:	f004 fbdc 	bl	80062f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20004c90 	.word	0x20004c90

08001b44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b48:	4803      	ldr	r0, [pc, #12]	; (8001b58 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b4a:	f004 fbd2 	bl	80062f2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b4e:	4803      	ldr	r0, [pc, #12]	; (8001b5c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b50:	f004 fbcf 	bl	80062f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b54:	bf00      	nop
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20004c90 	.word	0x20004c90
 8001b5c:	20004da0 	.word	0x20004da0

08001b60 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <DMA2_Stream5_IRQHandler+0x10>)
 8001b66:	f001 ff69 	bl	8003a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20004d40 	.word	0x20004d40

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f008 fc32 	bl	800a40c <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	; (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20020000 	.word	0x20020000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	200000a4 	.word	0x200000a4
 8001bdc:	20004e78 	.word	0x20004e78

08001be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <SystemInit+0x20>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <SystemInit+0x20>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <touchTaskEntry>:
extern osMessageQId displayQueueHandle;

uint32_t qdata;
uint8_t touch_pending = 0;

void touchTaskEntry(void const * argument) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
	uint8_t pos[4];
	uint16_t x;
	uint16_t y;

	while(1) {
		touch_pending = 0;
 8001c0c:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <touchTaskEntry+0x10c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]

		while (!touch_pending) {
 8001c12:	e002      	b.n	8001c1a <touchTaskEntry+0x16>
		   osDelay(10);
 8001c14:	200a      	movs	r0, #10
 8001c16:	f005 fcff 	bl	8007618 <osDelay>
		while (!touch_pending) {
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <touchTaskEntry+0x10c>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f8      	beq.n	8001c14 <touchTaskEntry+0x10>
		 *                   ^
		 *                  0x79/0x75
		 */

		/*A1 - Y*/
		dout[0] = 0x90;
 8001c22:	2390      	movs	r3, #144	; 0x90
 8001c24:	733b      	strb	r3, [r7, #12]
		dout[1] = dout[2] = 0x00;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73bb      	strb	r3, [r7, #14]
 8001c2a:	7bbb      	ldrb	r3, [r7, #14]
 8001c2c:	737b      	strb	r3, [r7, #13]
		HAL_SPI_TransmitReceive(&hspi3, dout, din, 3, 20);
 8001c2e:	f107 0210 	add.w	r2, r7, #16
 8001c32:	f107 010c 	add.w	r1, r7, #12
 8001c36:	2314      	movs	r3, #20
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	4835      	ldr	r0, [pc, #212]	; (8001d14 <touchTaskEntry+0x110>)
 8001c3e:	f003 fc97 	bl	8005570 <HAL_SPI_TransmitReceive>
		pos[0] = din[1];
 8001c42:	7c7b      	ldrb	r3, [r7, #17]
 8001c44:	723b      	strb	r3, [r7, #8]

		/*A5 - X*/
		dout[0] = 0xD0;
 8001c46:	23d0      	movs	r3, #208	; 0xd0
 8001c48:	733b      	strb	r3, [r7, #12]
		HAL_SPI_TransmitReceive(&hspi3, dout, din, 3, 20);
 8001c4a:	f107 0210 	add.w	r2, r7, #16
 8001c4e:	f107 010c 	add.w	r1, r7, #12
 8001c52:	2314      	movs	r3, #20
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2303      	movs	r3, #3
 8001c58:	482e      	ldr	r0, [pc, #184]	; (8001d14 <touchTaskEntry+0x110>)
 8001c5a:	f003 fc89 	bl	8005570 <HAL_SPI_TransmitReceive>
		pos[1] = din[1];
 8001c5e:	7c7b      	ldrb	r3, [r7, #17]
 8001c60:	727b      	strb	r3, [r7, #9]

		/*A3 - Z1*/
		dout[0] = 0xB0;
 8001c62:	23b0      	movs	r3, #176	; 0xb0
 8001c64:	733b      	strb	r3, [r7, #12]
		HAL_SPI_TransmitReceive(&hspi3, dout, din, 3, 20);
 8001c66:	f107 0210 	add.w	r2, r7, #16
 8001c6a:	f107 010c 	add.w	r1, r7, #12
 8001c6e:	2314      	movs	r3, #20
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2303      	movs	r3, #3
 8001c74:	4827      	ldr	r0, [pc, #156]	; (8001d14 <touchTaskEntry+0x110>)
 8001c76:	f003 fc7b 	bl	8005570 <HAL_SPI_TransmitReceive>
		pos[2] = din[1];
 8001c7a:	7c7b      	ldrb	r3, [r7, #17]
 8001c7c:	72bb      	strb	r3, [r7, #10]

		/*A4 - Z2*/
		dout[0] = 0xC0;
 8001c7e:	23c0      	movs	r3, #192	; 0xc0
 8001c80:	733b      	strb	r3, [r7, #12]
		HAL_SPI_TransmitReceive(&hspi3, dout, din, 3, 20);
 8001c82:	f107 0210 	add.w	r2, r7, #16
 8001c86:	f107 010c 	add.w	r1, r7, #12
 8001c8a:	2314      	movs	r3, #20
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2303      	movs	r3, #3
 8001c90:	4820      	ldr	r0, [pc, #128]	; (8001d14 <touchTaskEntry+0x110>)
 8001c92:	f003 fc6d 	bl	8005570 <HAL_SPI_TransmitReceive>
		pos[3] = din[1];
 8001c96:	7c7b      	ldrb	r3, [r7, #17]
 8001c98:	72fb      	strb	r3, [r7, #11]

		/* Normalize */
		if (pos[0] >= 0x0b && pos[1] >= 0x06 &&
 8001c9a:	7a3b      	ldrb	r3, [r7, #8]
 8001c9c:	2b0a      	cmp	r3, #10
 8001c9e:	d9b5      	bls.n	8001c0c <touchTaskEntry+0x8>
 8001ca0:	7a7b      	ldrb	r3, [r7, #9]
 8001ca2:	2b05      	cmp	r3, #5
 8001ca4:	d9b2      	bls.n	8001c0c <touchTaskEntry+0x8>
			pos[0] <= 0x79 && pos[1] <= 0x75 &&
 8001ca6:	7a3b      	ldrb	r3, [r7, #8]
		if (pos[0] >= 0x0b && pos[1] >= 0x06 &&
 8001ca8:	2b79      	cmp	r3, #121	; 0x79
 8001caa:	d8af      	bhi.n	8001c0c <touchTaskEntry+0x8>
			pos[0] <= 0x79 && pos[1] <= 0x75 &&
 8001cac:	7a7b      	ldrb	r3, [r7, #9]
 8001cae:	2b75      	cmp	r3, #117	; 0x75
 8001cb0:	d8ac      	bhi.n	8001c0c <touchTaskEntry+0x8>
			pos[2] && pos[3]) { /* Bound check */
 8001cb2:	7abb      	ldrb	r3, [r7, #10]
			pos[0] <= 0x79 && pos[1] <= 0x75 &&
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0a9      	beq.n	8001c0c <touchTaskEntry+0x8>
			pos[2] && pos[3]) { /* Bound check */
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0a6      	beq.n	8001c0c <touchTaskEntry+0x8>
			y = (((uint32_t)pos[1] - 0x06) * 240) / (0x75 - 0x06);
 8001cbe:	7a7b      	ldrb	r3, [r7, #9]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	011b      	lsls	r3, r3, #4
 8001cc6:	1a9b      	subs	r3, r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <touchTaskEntry+0x114>)
 8001cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd4:	1ad2      	subs	r2, r2, r3
 8001cd6:	0852      	lsrs	r2, r2, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	82fb      	strh	r3, [r7, #22]
			x = (((uint32_t)pos[0] - 0x0B) * 320) / (0x79 - 0x0B);
 8001cde:	7a3b      	ldrb	r3, [r7, #8]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	4413      	add	r3, r2
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	f5a3 635c 	sub.w	r3, r3, #3520	; 0xdc0
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <touchTaskEntry+0x118>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	82bb      	strh	r3, [r7, #20]
			qdata = x + (y << 16);
 8001cfa:	8aba      	ldrh	r2, [r7, #20]
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	041b      	lsls	r3, r3, #16
 8001d00:	4413      	add	r3, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <touchTaskEntry+0x11c>)
 8001d06:	601a      	str	r2, [r3, #0]
			//osMessagePut( displayQueueHandle, &qdata, 100);
			osDelay(50);
 8001d08:	2032      	movs	r0, #50	; 0x32
 8001d0a:	f005 fc85 	bl	8007618 <osDelay>
		touch_pending = 0;
 8001d0e:	e77d      	b.n	8001c0c <touchTaskEntry+0x8>
 8001d10:	200000a8 	.word	0x200000a8
 8001d14:	20004c14 	.word	0x20004c14
 8001d18:	27350b89 	.word	0x27350b89
 8001d1c:	094f2095 	.word	0x094f2095
 8001d20:	20004de8 	.word	0x20004de8

08001d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d2a:	490e      	ldr	r1, [pc, #56]	; (8001d64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d2c:	4a0e      	ldr	r2, [pc, #56]	; (8001d68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0b      	ldr	r2, [pc, #44]	; (8001d6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d40:	4c0b      	ldr	r4, [pc, #44]	; (8001d70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4e:	f7ff ff47 	bl	8001be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d52:	f008 fb61 	bl	800a418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d56:	f7fe fe0b 	bl	8000970 <main>
  bx  lr    
 8001d5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d64:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001d68:	08028650 	.word	0x08028650
  ldr r2, =_sbss
 8001d6c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001d70:	20004e78 	.word	0x20004e78

08001d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d74:	e7fe      	b.n	8001d74 <ADC_IRQHandler>
	...

08001d78 <displayTaskEntry>:
	 */
	return voltage / 18;
}

void displayTaskEntry(void const * argument)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	6078      	str	r0, [r7, #4]
	TM_ILI9341_Init();
 8001d80:	f000 f908 	bl	8001f94 <TM_ILI9341_Init>

	for(;;)	{
	   uint32_t data;

	   if (osMessageQueueGet (displayQueueHandle, &data, NULL, 0) == osOK) {
 8001d84:	4b7b      	ldr	r3, [pc, #492]	; (8001f74 <displayTaskEntry+0x1fc>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	f107 010c 	add.w	r1, r7, #12
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f005 fd30 	bl	80077f4 <osMessageQueueGet>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f4      	bne.n	8001d84 <displayTaskEntry+0xc>
           if (data == 0) {  // Power-down
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <displayTaskEntry+0x2e>
		        TM_ILI9341_Init();
 8001da0:	f000 f8f8 	bl	8001f94 <TM_ILI9341_Init>
 8001da4:	e7ee      	b.n	8001d84 <displayTaskEntry+0xc>
		   } else if (data == 0x0001) { // Welcome screen
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d10e      	bne.n	8001dca <displayTaskEntry+0x52>
			    TM_ILI9341_Fill(ILI9341_COLOR_BLACK);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f000 fb03 	bl	80023b8 <TM_ILI9341_Fill>
				TM_ILI9341_Puts((X_PIX/2) - (16 * 11 / 2), (Y_PIX/2) - (26 /2),"www.ioko.eu", &TM_Font_16x26, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001db2:	2300      	movs	r3, #0
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	4b6e      	ldr	r3, [pc, #440]	; (8001f78 <displayTaskEntry+0x200>)
 8001dbe:	4a6f      	ldr	r2, [pc, #444]	; (8001f7c <displayTaskEntry+0x204>)
 8001dc0:	216b      	movs	r1, #107	; 0x6b
 8001dc2:	2048      	movs	r0, #72	; 0x48
 8001dc4:	f000 fc06 	bl	80025d4 <TM_ILI9341_Puts>
 8001dc8:	e7dc      	b.n	8001d84 <displayTaskEntry+0xc>
		   } else if (data < 0x0010) { // power-up progress dots
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d830      	bhi.n	8001e32 <displayTaskEntry+0xba>
			   TM_ILI9341_DrawCircle(75 + (20 * (data - 1)), 150, 5, ILI9341_COLOR_WHITE);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	3337      	adds	r3, #55	; 0x37
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b218      	sxth	r0, r3
 8001de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de8:	2205      	movs	r2, #5
 8001dea:	2196      	movs	r1, #150	; 0x96
 8001dec:	f000 fcdc 	bl	80027a8 <TM_ILI9341_DrawCircle>
			   TM_ILI9341_DrawCircle(75 + (20 * (data - 1)), 150, 4, ILI9341_COLOR_WHITE);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	0092      	lsls	r2, r2, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	3337      	adds	r3, #55	; 0x37
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	b218      	sxth	r0, r3
 8001e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e08:	2204      	movs	r2, #4
 8001e0a:	2196      	movs	r1, #150	; 0x96
 8001e0c:	f000 fccc 	bl	80027a8 <TM_ILI9341_DrawCircle>
			   TM_ILI9341_DrawCircle(75 + (20 * (data - 1)), 150, 3, ILI9341_COLOR_WHITE);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	461a      	mov	r2, r3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3337      	adds	r3, #55	; 0x37
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	b218      	sxth	r0, r3
 8001e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e28:	2203      	movs	r2, #3
 8001e2a:	2196      	movs	r1, #150	; 0x96
 8001e2c:	f000 fcbc 	bl	80027a8 <TM_ILI9341_DrawCircle>
 8001e30:	e7a8      	b.n	8001d84 <displayTaskEntry+0xc>
		   } else if (data == 0x0011) { // power-up ok
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b11      	cmp	r3, #17
 8001e36:	d171      	bne.n	8001f1c <displayTaskEntry+0x1a4>
			   TM_ILI9341_DrawImage(40, 0, 280, 240, 0);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	23f0      	movs	r3, #240	; 0xf0
 8001e3e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001e42:	2100      	movs	r1, #0
 8001e44:	2028      	movs	r0, #40	; 0x28
 8001e46:	f000 fd7f 	bl	8002948 <TM_ILI9341_DrawImage>

			   TM_ILI9341_Puts((X_PIX/2) - 40, (Y_PIX/2) - 15, "Temp:  26.3 C", &TM_Font_7x10, ILI9341_COLOR_WHITE, ILI9341_COLOR_YELLOW3);
 8001e4a:	f24f 53c0 	movw	r3, #62912	; 0xf5c0
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4b4a      	ldr	r3, [pc, #296]	; (8001f80 <displayTaskEntry+0x208>)
 8001e58:	4a4a      	ldr	r2, [pc, #296]	; (8001f84 <displayTaskEntry+0x20c>)
 8001e5a:	2169      	movs	r1, #105	; 0x69
 8001e5c:	2078      	movs	r0, #120	; 0x78
 8001e5e:	f000 fbb9 	bl	80025d4 <TM_ILI9341_Puts>
			   TM_ILI9341_Puts((X_PIX/2) - 40, (Y_PIX/2) - 5,  "Fan:   365  RPM", &TM_Font_7x10, ILI9341_COLOR_WHITE, ILI9341_COLOR_YELLOW3);
 8001e62:	f24f 53c0 	movw	r3, #62912	; 0xf5c0
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4b44      	ldr	r3, [pc, #272]	; (8001f80 <displayTaskEntry+0x208>)
 8001e70:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <displayTaskEntry+0x210>)
 8001e72:	2173      	movs	r1, #115	; 0x73
 8001e74:	2078      	movs	r0, #120	; 0x78
 8001e76:	f000 fbad 	bl	80025d4 <TM_ILI9341_Puts>
			   TM_ILI9341_Puts((X_PIX/2) - 40, (Y_PIX/2) + 5,  "Out:         ", &TM_Font_7x10, ILI9341_COLOR_WHITE, ILI9341_COLOR_YELLOW3);
 8001e7a:	f24f 53c0 	movw	r3, #62912	; 0xf5c0
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	4b3e      	ldr	r3, [pc, #248]	; (8001f80 <displayTaskEntry+0x208>)
 8001e88:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <displayTaskEntry+0x214>)
 8001e8a:	217d      	movs	r1, #125	; 0x7d
 8001e8c:	2078      	movs	r0, #120	; 0x78
 8001e8e:	f000 fba1 	bl	80025d4 <TM_ILI9341_Puts>
			   TM_ILI9341_Puts((X_PIX/2) - 10,  (Y_PIX/2) + 7,  "* * * * * *", &TM_Font_7x10, ILI9341_COLOR_GREEN2, ILI9341_COLOR_YELLOW3);
 8001e92:	f24f 53c0 	movw	r3, #62912	; 0xf5c0
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	f24b 7323 	movw	r3, #46883	; 0xb723
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4b38      	ldr	r3, [pc, #224]	; (8001f80 <displayTaskEntry+0x208>)
 8001ea0:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <displayTaskEntry+0x218>)
 8001ea2:	217f      	movs	r1, #127	; 0x7f
 8001ea4:	2096      	movs	r0, #150	; 0x96
 8001ea6:	f000 fb95 	bl	80025d4 <TM_ILI9341_Puts>

			   TM_ILI9341_DrawCircle((X_PIX/2) - 80, (Y_PIX/2) - 30, 5, ILI9341_COLOR_GREEN);
 8001eaa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001eae:	2205      	movs	r2, #5
 8001eb0:	215a      	movs	r1, #90	; 0x5a
 8001eb2:	2050      	movs	r0, #80	; 0x50
 8001eb4:	f000 fc78 	bl	80027a8 <TM_ILI9341_DrawCircle>
			   TM_ILI9341_DrawCircle((X_PIX/2) - 80, (Y_PIX/2) - 30, 4, ILI9341_COLOR_GREEN);
 8001eb8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	215a      	movs	r1, #90	; 0x5a
 8001ec0:	2050      	movs	r0, #80	; 0x50
 8001ec2:	f000 fc71 	bl	80027a8 <TM_ILI9341_DrawCircle>
			   TM_ILI9341_DrawCircle((X_PIX/2) - 80, (Y_PIX/2) - 30, 3, ILI9341_COLOR_GREEN);
 8001ec6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001eca:	2203      	movs	r2, #3
 8001ecc:	215a      	movs	r1, #90	; 0x5a
 8001ece:	2050      	movs	r0, #80	; 0x50
 8001ed0:	f000 fc6a 	bl	80027a8 <TM_ILI9341_DrawCircle>
			   TM_ILI9341_DrawCircle((X_PIX/2) - 80, (Y_PIX/2) - 30, 2, ILI9341_COLOR_GREEN);
 8001ed4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ed8:	2202      	movs	r2, #2
 8001eda:	215a      	movs	r1, #90	; 0x5a
 8001edc:	2050      	movs	r0, #80	; 0x50
 8001ede:	f000 fc63 	bl	80027a8 <TM_ILI9341_DrawCircle>

			   TM_ILI9341_DrawCircle((X_PIX/2) - 80, (Y_PIX/2) + 30, 5, ILI9341_COLOR_GREEN);
 8001ee2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	2196      	movs	r1, #150	; 0x96
 8001eea:	2050      	movs	r0, #80	; 0x50
 8001eec:	f000 fc5c 	bl	80027a8 <TM_ILI9341_DrawCircle>
			   TM_ILI9341_DrawCircle((X_PIX/2) - 80, (Y_PIX/2) + 30, 4, ILI9341_COLOR_GREEN);
 8001ef0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	2196      	movs	r1, #150	; 0x96
 8001ef8:	2050      	movs	r0, #80	; 0x50
 8001efa:	f000 fc55 	bl	80027a8 <TM_ILI9341_DrawCircle>
			   TM_ILI9341_DrawCircle((X_PIX/2) - 80, (Y_PIX/2) + 30, 3, ILI9341_COLOR_GREEN);
 8001efe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f02:	2203      	movs	r2, #3
 8001f04:	2196      	movs	r1, #150	; 0x96
 8001f06:	2050      	movs	r0, #80	; 0x50
 8001f08:	f000 fc4e 	bl	80027a8 <TM_ILI9341_DrawCircle>
			   TM_ILI9341_DrawCircle((X_PIX/2) - 80, (Y_PIX/2) + 30, 2, ILI9341_COLOR_GREEN);
 8001f0c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f10:	2202      	movs	r2, #2
 8001f12:	2196      	movs	r1, #150	; 0x96
 8001f14:	2050      	movs	r0, #80	; 0x50
 8001f16:	f000 fc47 	bl	80027a8 <TM_ILI9341_DrawCircle>
 8001f1a:	e733      	b.n	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0x0100) { // Reserved
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2bff      	cmp	r3, #255	; 0xff
 8001f20:	f67f af30 	bls.w	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0x0200) { // Left VU
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f2a:	f4ff af2b 	bcc.w	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0x0300) { // Right VU
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f34:	f4ff af26 	bcc.w	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0x2000) { // Reserved
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f3e:	f4ff af21 	bcc.w	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0x4000) { // Temp L
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f48:	f4ff af1c 	bcc.w	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0x6000) { // Temp R
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001f52:	f4ff af17 	bcc.w	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0x8000) { // RPM L
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f5c:	f4ff af12 	bcc.w	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0xA000) { // RPM R
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001f66:	f4ff af0d 	bcc.w	8001d84 <displayTaskEntry+0xc>

		   } else if (data < 0xC000) { // Reserved
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
	for(;;)	{
 8001f70:	e708      	b.n	8001d84 <displayTaskEntry+0xc>
 8001f72:	bf00      	nop
 8001f74:	20004d38 	.word	0x20004d38
 8001f78:	2000000c 	.word	0x2000000c
 8001f7c:	0800a784 	.word	0x0800a784
 8001f80:	20000004 	.word	0x20000004
 8001f84:	0800a790 	.word	0x0800a790
 8001f88:	0800a7a0 	.word	0x0800a7a0
 8001f8c:	0800a7b0 	.word	0x0800a7b0
 8001f90:	0800a7c0 	.word	0x0800a7c0

08001f94 <TM_ILI9341_Init>:
void TM_ILI9341_SendCommand(uint8_t data);
void TM_ILI9341_Delay(volatile unsigned int delay);
void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);

void TM_ILI9341_Init() {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	
	/* Init LCD */
//	ILI9341_BL_RESET;

	TM_ILI9341_InitLCD();	
 8001f98:	f000 f820 	bl	8001fdc <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <TM_ILI9341_Init+0x3c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <TM_ILI9341_Init+0x3c>)
 8001fa4:	881a      	ldrh	r2, [r3, #0]
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <TM_ILI9341_Init+0x40>)
 8001fa8:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <TM_ILI9341_Init+0x44>)
 8001fac:	22f0      	movs	r2, #240	; 0xf0
 8001fae:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <TM_ILI9341_Init+0x44>)
 8001fb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fb6:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <TM_ILI9341_Init+0x44>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	711a      	strb	r2, [r3, #4]

	TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_2);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f000 fac2 	bl	8002548 <TM_ILI9341_Rotate>
	
	/* Fill with white color */
	TM_ILI9341_Fill(ILI9341_COLOR_BLACK);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f000 f9f7 	bl	80023b8 <TM_ILI9341_Fill>

//	ILI9341_BL_SET;
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20004df6 	.word	0x20004df6
 8001fd4:	20004dec 	.word	0x20004dec
 8001fd8:	20004df0 	.word	0x20004df0

08001fdc <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2140      	movs	r1, #64	; 0x40
 8001fe4:	4899      	ldr	r0, [pc, #612]	; (800224c <TM_ILI9341_InitLCD+0x270>)
 8001fe6:	f002 f947 	bl	8004278 <HAL_GPIO_WritePin>
	TM_ILI9341_Delay(20000);
 8001fea:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001fee:	f000 fa99 	bl	8002524 <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	2140      	movs	r1, #64	; 0x40
 8001ff6:	4895      	ldr	r0, [pc, #596]	; (800224c <TM_ILI9341_InitLCD+0x270>)
 8001ff8:	f002 f93e 	bl	8004278 <HAL_GPIO_WritePin>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 8001ffc:	f644 6020 	movw	r0, #20000	; 0x4e20
 8002000:	f000 fa90 	bl	8002524 <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 8002004:	2001      	movs	r0, #1
 8002006:	f000 f925 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 800200a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800200e:	f000 fa89 	bl	8002524 <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 8002012:	20cb      	movs	r0, #203	; 0xcb
 8002014:	f000 f91e 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 8002018:	2039      	movs	r0, #57	; 0x39
 800201a:	f000 f93f 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 800201e:	202c      	movs	r0, #44	; 0x2c
 8002020:	f000 f93c 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002024:	2000      	movs	r0, #0
 8002026:	f000 f939 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 800202a:	2034      	movs	r0, #52	; 0x34
 800202c:	f000 f936 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 8002030:	2002      	movs	r0, #2
 8002032:	f000 f933 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 8002036:	20cf      	movs	r0, #207	; 0xcf
 8002038:	f000 f90c 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800203c:	2000      	movs	r0, #0
 800203e:	f000 f92d 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 8002042:	20c1      	movs	r0, #193	; 0xc1
 8002044:	f000 f92a 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 8002048:	2030      	movs	r0, #48	; 0x30
 800204a:	f000 f927 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 800204e:	20e8      	movs	r0, #232	; 0xe8
 8002050:	f000 f900 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 8002054:	2085      	movs	r0, #133	; 0x85
 8002056:	f000 f921 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f91e 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8002060:	2078      	movs	r0, #120	; 0x78
 8002062:	f000 f91b 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 8002066:	20ea      	movs	r0, #234	; 0xea
 8002068:	f000 f8f4 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800206c:	2000      	movs	r0, #0
 800206e:	f000 f915 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f000 f912 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 8002078:	20ed      	movs	r0, #237	; 0xed
 800207a:	f000 f8eb 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 800207e:	2064      	movs	r0, #100	; 0x64
 8002080:	f000 f90c 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8002084:	2003      	movs	r0, #3
 8002086:	f000 f909 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 800208a:	2012      	movs	r0, #18
 800208c:	f000 f906 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 8002090:	2081      	movs	r0, #129	; 0x81
 8002092:	f000 f903 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 8002096:	20f7      	movs	r0, #247	; 0xf7
 8002098:	f000 f8dc 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 800209c:	2020      	movs	r0, #32
 800209e:	f000 f8fd 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 80020a2:	20c0      	movs	r0, #192	; 0xc0
 80020a4:	f000 f8d6 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 80020a8:	2023      	movs	r0, #35	; 0x23
 80020aa:	f000 f8f7 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 80020ae:	20c1      	movs	r0, #193	; 0xc1
 80020b0:	f000 f8d0 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 80020b4:	2010      	movs	r0, #16
 80020b6:	f000 f8f1 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 80020ba:	20c5      	movs	r0, #197	; 0xc5
 80020bc:	f000 f8ca 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 80020c0:	203e      	movs	r0, #62	; 0x3e
 80020c2:	f000 f8eb 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 80020c6:	2028      	movs	r0, #40	; 0x28
 80020c8:	f000 f8e8 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 80020cc:	20c7      	movs	r0, #199	; 0xc7
 80020ce:	f000 f8c1 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 80020d2:	2086      	movs	r0, #134	; 0x86
 80020d4:	f000 f8e2 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 80020d8:	2036      	movs	r0, #54	; 0x36
 80020da:	f000 f8bb 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 80020de:	2048      	movs	r0, #72	; 0x48
 80020e0:	f000 f8dc 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 80020e4:	203a      	movs	r0, #58	; 0x3a
 80020e6:	f000 f8b5 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 80020ea:	2055      	movs	r0, #85	; 0x55
 80020ec:	f000 f8d6 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 80020f0:	20b1      	movs	r0, #177	; 0xb1
 80020f2:	f000 f8af 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 f8d0 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 80020fc:	2018      	movs	r0, #24
 80020fe:	f000 f8cd 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 8002102:	20b6      	movs	r0, #182	; 0xb6
 8002104:	f000 f8a6 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 8002108:	2008      	movs	r0, #8
 800210a:	f000 f8c7 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 800210e:	2082      	movs	r0, #130	; 0x82
 8002110:	f000 f8c4 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 8002114:	2027      	movs	r0, #39	; 0x27
 8002116:	f000 f8c1 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 800211a:	20f2      	movs	r0, #242	; 0xf2
 800211c:	f000 f89a 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8002120:	2000      	movs	r0, #0
 8002122:	f000 f8bb 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8002126:	202a      	movs	r0, #42	; 0x2a
 8002128:	f000 f894 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800212c:	2000      	movs	r0, #0
 800212e:	f000 f8b5 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002132:	2000      	movs	r0, #0
 8002134:	f000 f8b2 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002138:	2000      	movs	r0, #0
 800213a:	f000 f8af 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 800213e:	20ef      	movs	r0, #239	; 0xef
 8002140:	f000 f8ac 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8002144:	202b      	movs	r0, #43	; 0x2b
 8002146:	f000 f885 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f8a6 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8002150:	2000      	movs	r0, #0
 8002152:	f000 f8a3 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 8002156:	2001      	movs	r0, #1
 8002158:	f000 f8a0 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 800215c:	203f      	movs	r0, #63	; 0x3f
 800215e:	f000 f89d 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8002162:	2026      	movs	r0, #38	; 0x26
 8002164:	f000 f876 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8002168:	2001      	movs	r0, #1
 800216a:	f000 f897 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 800216e:	20e0      	movs	r0, #224	; 0xe0
 8002170:	f000 f870 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8002174:	200f      	movs	r0, #15
 8002176:	f000 f891 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800217a:	2031      	movs	r0, #49	; 0x31
 800217c:	f000 f88e 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 8002180:	202b      	movs	r0, #43	; 0x2b
 8002182:	f000 f88b 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8002186:	200c      	movs	r0, #12
 8002188:	f000 f888 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800218c:	200e      	movs	r0, #14
 800218e:	f000 f885 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8002192:	2008      	movs	r0, #8
 8002194:	f000 f882 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8002198:	204e      	movs	r0, #78	; 0x4e
 800219a:	f000 f87f 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 800219e:	20f1      	movs	r0, #241	; 0xf1
 80021a0:	f000 f87c 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 80021a4:	2037      	movs	r0, #55	; 0x37
 80021a6:	f000 f879 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 80021aa:	2007      	movs	r0, #7
 80021ac:	f000 f876 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 80021b0:	2010      	movs	r0, #16
 80021b2:	f000 f873 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 80021b6:	2003      	movs	r0, #3
 80021b8:	f000 f870 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 80021bc:	200e      	movs	r0, #14
 80021be:	f000 f86d 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 80021c2:	2009      	movs	r0, #9
 80021c4:	f000 f86a 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f000 f867 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 80021ce:	20e1      	movs	r0, #225	; 0xe1
 80021d0:	f000 f840 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f000 f861 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 80021da:	200e      	movs	r0, #14
 80021dc:	f000 f85e 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 80021e0:	2014      	movs	r0, #20
 80021e2:	f000 f85b 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 80021e6:	2003      	movs	r0, #3
 80021e8:	f000 f858 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 80021ec:	2011      	movs	r0, #17
 80021ee:	f000 f855 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 80021f2:	2007      	movs	r0, #7
 80021f4:	f000 f852 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 80021f8:	2031      	movs	r0, #49	; 0x31
 80021fa:	f000 f84f 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 80021fe:	20c1      	movs	r0, #193	; 0xc1
 8002200:	f000 f84c 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 8002204:	2048      	movs	r0, #72	; 0x48
 8002206:	f000 f849 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 800220a:	2008      	movs	r0, #8
 800220c:	f000 f846 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8002210:	200f      	movs	r0, #15
 8002212:	f000 f843 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8002216:	200c      	movs	r0, #12
 8002218:	f000 f840 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800221c:	2031      	movs	r0, #49	; 0x31
 800221e:	f000 f83d 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 8002222:	2036      	movs	r0, #54	; 0x36
 8002224:	f000 f83a 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8002228:	200f      	movs	r0, #15
 800222a:	f000 f837 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 800222e:	2011      	movs	r0, #17
 8002230:	f000 f810 	bl	8002254 <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 8002234:	4806      	ldr	r0, [pc, #24]	; (8002250 <TM_ILI9341_InitLCD+0x274>)
 8002236:	f000 f975 	bl	8002524 <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 800223a:	2029      	movs	r0, #41	; 0x29
 800223c:	f000 f80a 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8002240:	202c      	movs	r0, #44	; 0x2c
 8002242:	f000 f807 	bl	8002254 <TM_ILI9341_SendCommand>
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40020c00 	.word	0x40020c00
 8002250:	000f4240 	.word	0x000f4240

08002254 <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 800225e:	2200      	movs	r2, #0
 8002260:	2180      	movs	r1, #128	; 0x80
 8002262:	480b      	ldr	r0, [pc, #44]	; (8002290 <TM_ILI9341_SendCommand+0x3c>)
 8002264:	f002 f808 	bl	8004278 <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 8002268:	2200      	movs	r2, #0
 800226a:	2110      	movs	r1, #16
 800226c:	4809      	ldr	r0, [pc, #36]	; (8002294 <TM_ILI9341_SendCommand+0x40>)
 800226e:	f002 f803 	bl	8004278 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 5);
 8002272:	1df9      	adds	r1, r7, #7
 8002274:	2305      	movs	r3, #5
 8002276:	2201      	movs	r2, #1
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <TM_ILI9341_SendCommand+0x44>)
 800227a:	f003 f83d 	bl	80052f8 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
	ILI9341_CS_SET;
 800227e:	2201      	movs	r2, #1
 8002280:	2110      	movs	r1, #16
 8002282:	4804      	ldr	r0, [pc, #16]	; (8002294 <TM_ILI9341_SendCommand+0x40>)
 8002284:	f001 fff8 	bl	8004278 <HAL_GPIO_WritePin>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40020c00 	.word	0x40020c00
 8002294:	40020000 	.word	0x40020000
 8002298:	20004cdc 	.word	0x20004cdc

0800229c <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 80022a6:	2201      	movs	r2, #1
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	480b      	ldr	r0, [pc, #44]	; (80022d8 <TM_ILI9341_SendData+0x3c>)
 80022ac:	f001 ffe4 	bl	8004278 <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 80022b0:	2200      	movs	r2, #0
 80022b2:	2110      	movs	r1, #16
 80022b4:	4809      	ldr	r0, [pc, #36]	; (80022dc <TM_ILI9341_SendData+0x40>)
 80022b6:	f001 ffdf 	bl	8004278 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &data, 1, 5);
 80022ba:	1df9      	adds	r1, r7, #7
 80022bc:	2305      	movs	r3, #5
 80022be:	2201      	movs	r2, #1
 80022c0:	4807      	ldr	r0, [pc, #28]	; (80022e0 <TM_ILI9341_SendData+0x44>)
 80022c2:	f003 f819 	bl	80052f8 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
	ILI9341_CS_SET;
 80022c6:	2201      	movs	r2, #1
 80022c8:	2110      	movs	r1, #16
 80022ca:	4804      	ldr	r0, [pc, #16]	; (80022dc <TM_ILI9341_SendData+0x40>)
 80022cc:	f001 ffd4 	bl	8004278 <HAL_GPIO_WritePin>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40020000 	.word	0x40020000
 80022e0:	20004cdc 	.word	0x20004cdc

080022e4 <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	603a      	str	r2, [r7, #0]
 80022ee:	80fb      	strh	r3, [r7, #6]
 80022f0:	460b      	mov	r3, r1
 80022f2:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	88b9      	ldrh	r1, [r7, #4]
 80022fa:	88f8      	ldrh	r0, [r7, #6]
 80022fc:	f000 f812 	bl	8002324 <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8002300:	202c      	movs	r0, #44	; 0x2c
 8002302:	f7ff ffa7 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	b2db      	uxtb	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ffc5 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ffc0 	bl	800229c <TM_ILI9341_SendData>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4604      	mov	r4, r0
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4623      	mov	r3, r4
 8002334:	80fb      	strh	r3, [r7, #6]
 8002336:	4603      	mov	r3, r0
 8002338:	80bb      	strh	r3, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	807b      	strh	r3, [r7, #2]
 800233e:	4613      	mov	r3, r2
 8002340:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8002342:	202a      	movs	r0, #42	; 0x2a
 8002344:	f7ff ff86 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	b29b      	uxth	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ffa3 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff ff9e 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b29b      	uxth	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff ff97 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 800236e:	887b      	ldrh	r3, [r7, #2]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff ff92 	bl	800229c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8002378:	202b      	movs	r0, #43	; 0x2b
 800237a:	f7ff ff6b 	bl	8002254 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 800237e:	88bb      	ldrh	r3, [r7, #4]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	b29b      	uxth	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff88 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 800238c:	88bb      	ldrh	r3, [r7, #4]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff ff83 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 8002396:	883b      	ldrh	r3, [r7, #0]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	b29b      	uxth	r3, r3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff7c 	bl	800229c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 80023a4:	883b      	ldrh	r3, [r7, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff77 	bl	800229c <TM_ILI9341_SendData>
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}
	...

080023b8 <TM_ILI9341_Fill>:

void TM_ILI9341_Fill(uint32_t color) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af02      	add	r7, sp, #8
 80023be:	6078      	str	r0, [r7, #4]
	/* Fill entire screen */
	TM_ILI9341_INT_Fill(0, 0, ILI9341_Opts.width, ILI9341_Opts.height, color);
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <TM_ILI9341_Fill+0x28>)
 80023c2:	881a      	ldrh	r2, [r3, #0]
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <TM_ILI9341_Fill+0x28>)
 80023c6:	8859      	ldrh	r1, [r3, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	460b      	mov	r3, r1
 80023d0:	2100      	movs	r1, #0
 80023d2:	2000      	movs	r0, #0
 80023d4:	f000 f806 	bl	80023e4 <TM_ILI9341_INT_Fill>
}
 80023d8:	bf00      	nop
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20004df0 	.word	0x20004df0

080023e4 <TM_ILI9341_INT_Fill>:

void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4604      	mov	r4, r0
 80023ec:	4608      	mov	r0, r1
 80023ee:	4611      	mov	r1, r2
 80023f0:	461a      	mov	r2, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	80fb      	strh	r3, [r7, #6]
 80023f6:	4603      	mov	r3, r0
 80023f8:	80bb      	strh	r3, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	807b      	strh	r3, [r7, #2]
 80023fe:	4613      	mov	r3, r2
 8002400:	803b      	strh	r3, [r7, #0]
	uint32_t pixels_count;
	uint16_t *temp;
	uint32_t i;

	/* Calculate pixels count */
	pixels_count = (x1 - x0) * (y1 - y0);
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	8839      	ldrh	r1, [r7, #0]
 800240a:	88ba      	ldrh	r2, [r7, #4]
 800240c:	1a8a      	subs	r2, r1, r2
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]

	if (pixels_count > 512) {
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800241a:	d910      	bls.n	800243e <TM_ILI9341_INT_Fill+0x5a>
		temp = (uint16_t *)malloc((size_t)(512 * sizeof(uint16_t)));
 800241c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002420:	f008 f820 	bl	800a464 <malloc>
 8002424:	4603      	mov	r3, r0
 8002426:	613b      	str	r3, [r7, #16]
		if (!temp) return;
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d06e      	beq.n	800250c <TM_ILI9341_INT_Fill+0x128>
		memset(temp, color, 512);
 800242e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002434:	4619      	mov	r1, r3
 8002436:	6938      	ldr	r0, [r7, #16]
 8002438:	f008 f832 	bl	800a4a0 <memset>
 800243c:	e017      	b.n	800246e <TM_ILI9341_INT_Fill+0x8a>
	}
	else{
		temp = (uint16_t *)malloc((size_t)pixels_count);
 800243e:	6978      	ldr	r0, [r7, #20]
 8002440:	f008 f810 	bl	800a464 <malloc>
 8002444:	4603      	mov	r3, r0
 8002446:	613b      	str	r3, [r7, #16]
		if (!temp) return;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d060      	beq.n	8002510 <TM_ILI9341_INT_Fill+0x12c>
		for (i=0 ; i < pixels_count ; i++) {
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e008      	b.n	8002466 <TM_ILI9341_INT_Fill+0x82>
	        temp[i] = color;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800245e:	801a      	strh	r2, [r3, #0]
		for (i=0 ; i < pixels_count ; i++) {
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3301      	adds	r3, #1
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	429a      	cmp	r2, r3
 800246c:	d3f2      	bcc.n	8002454 <TM_ILI9341_INT_Fill+0x70>
		}
	}

	/* Set cursor position */
	TM_ILI9341_SetCursorPosition(x0, y0, x1, y1);
 800246e:	883b      	ldrh	r3, [r7, #0]
 8002470:	887a      	ldrh	r2, [r7, #2]
 8002472:	88b9      	ldrh	r1, [r7, #4]
 8002474:	88f8      	ldrh	r0, [r7, #6]
 8002476:	f7ff ff55 	bl	8002324 <TM_ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800247a:	202c      	movs	r0, #44	; 0x2c
 800247c:	f7ff feea 	bl	8002254 <TM_ILI9341_SendCommand>
	
	/* Send everything */
	ILI9341_WRX_SET;
 8002480:	2201      	movs	r2, #1
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	4824      	ldr	r0, [pc, #144]	; (8002518 <TM_ILI9341_INT_Fill+0x134>)
 8002486:	f001 fef7 	bl	8004278 <HAL_GPIO_WritePin>
	
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <TM_ILI9341_INT_Fill+0x138>)
 800248c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002490:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 8002492:	4822      	ldr	r0, [pc, #136]	; (800251c <TM_ILI9341_INT_Fill+0x138>)
 8002494:	f002 fea7 	bl	80051e6 <HAL_SPI_Init>

	while (pixels_count) {
 8002498:	e02b      	b.n	80024f2 <TM_ILI9341_INT_Fill+0x10e>
		if (pixels_count > 512) {
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a0:	d914      	bls.n	80024cc <TM_ILI9341_INT_Fill+0xe8>
			ILI9341_CS_RESET;
 80024a2:	2200      	movs	r2, #0
 80024a4:	2110      	movs	r1, #16
 80024a6:	481e      	ldr	r0, [pc, #120]	; (8002520 <TM_ILI9341_INT_Fill+0x13c>)
 80024a8:	f001 fee6 	bl	8004278 <HAL_GPIO_WritePin>
			//HAL_SPI_Transmit(&hspi1, (uint8_t *)temp, 128, 5);
			HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)temp, 512);
 80024ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b0:	6939      	ldr	r1, [r7, #16]
 80024b2:	481a      	ldr	r0, [pc, #104]	; (800251c <TM_ILI9341_INT_Fill+0x138>)
 80024b4:	f003 f9fe 	bl	80058b4 <HAL_SPI_Transmit_DMA>
			//pixels_count -= 1024;
			pixels_count -= 512;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80024be:	617b      	str	r3, [r7, #20]
			ILI9341_CS_SET;
 80024c0:	2201      	movs	r2, #1
 80024c2:	2110      	movs	r1, #16
 80024c4:	4816      	ldr	r0, [pc, #88]	; (8002520 <TM_ILI9341_INT_Fill+0x13c>)
 80024c6:	f001 fed7 	bl	8004278 <HAL_GPIO_WritePin>
 80024ca:	e012      	b.n	80024f2 <TM_ILI9341_INT_Fill+0x10e>
		}
		else {
			ILI9341_CS_RESET;
 80024cc:	2200      	movs	r2, #0
 80024ce:	2110      	movs	r1, #16
 80024d0:	4813      	ldr	r0, [pc, #76]	; (8002520 <TM_ILI9341_INT_Fill+0x13c>)
 80024d2:	f001 fed1 	bl	8004278 <HAL_GPIO_WritePin>
			//HAL_SPI_Transmit(&hspi1, (uint8_t *)temp, pixels_count, 5);
			HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)temp, pixels_count);
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	480f      	ldr	r0, [pc, #60]	; (800251c <TM_ILI9341_INT_Fill+0x138>)
 80024e0:	f003 f9e8 	bl	80058b4 <HAL_SPI_Transmit_DMA>
			pixels_count = 0;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
			ILI9341_CS_SET;
 80024e8:	2201      	movs	r2, #1
 80024ea:	2110      	movs	r1, #16
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <TM_ILI9341_INT_Fill+0x13c>)
 80024ee:	f001 fec3 	bl	8004278 <HAL_GPIO_WritePin>
	while (pixels_count) {
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1d0      	bne.n	800249a <TM_ILI9341_INT_Fill+0xb6>
		}
	}

	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <TM_ILI9341_INT_Fill+0x138>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 80024fe:	4807      	ldr	r0, [pc, #28]	; (800251c <TM_ILI9341_INT_Fill+0x138>)
 8002500:	f002 fe71 	bl	80051e6 <HAL_SPI_Init>

	free(temp);
 8002504:	6938      	ldr	r0, [r7, #16]
 8002506:	f007 ffb5 	bl	800a474 <free>
 800250a:	e002      	b.n	8002512 <TM_ILI9341_INT_Fill+0x12e>
		if (!temp) return;
 800250c:	bf00      	nop
 800250e:	e000      	b.n	8002512 <TM_ILI9341_INT_Fill+0x12e>
		if (!temp) return;
 8002510:	bf00      	nop
}
 8002512:	371c      	adds	r7, #28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	40020c00 	.word	0x40020c00
 800251c:	20004cdc 	.word	0x20004cdc
 8002520:	40020000 	.word	0x40020000

08002524 <TM_ILI9341_Delay>:

void TM_ILI9341_Delay(volatile unsigned int delay) {
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 800252c:	e002      	b.n	8002534 <TM_ILI9341_Delay+0x10>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3b01      	subs	r3, #1
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f9      	bne.n	800252e <TM_ILI9341_Delay+0xa>
}
 800253a:	bf00      	nop
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <TM_ILI9341_Rotate>:

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8002552:	2036      	movs	r0, #54	; 0x36
 8002554:	f7ff fe7e 	bl	8002254 <TM_ILI9341_SendCommand>
	if (orientation == TM_ILI9341_Orientation_Portrait_1) {
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <TM_ILI9341_Rotate+0x1e>
		TM_ILI9341_SendData(0x58);
 800255e:	2058      	movs	r0, #88	; 0x58
 8002560:	f7ff fe9c 	bl	800229c <TM_ILI9341_SendData>
 8002564:	e013      	b.n	800258e <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Portrait_2) {
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d103      	bne.n	8002574 <TM_ILI9341_Rotate+0x2c>
		TM_ILI9341_SendData(0x88);
 800256c:	2088      	movs	r0, #136	; 0x88
 800256e:	f7ff fe95 	bl	800229c <TM_ILI9341_SendData>
 8002572:	e00c      	b.n	800258e <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_1) {
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	2b02      	cmp	r3, #2
 8002578:	d103      	bne.n	8002582 <TM_ILI9341_Rotate+0x3a>
		TM_ILI9341_SendData(0x28);
 800257a:	2028      	movs	r0, #40	; 0x28
 800257c:	f7ff fe8e 	bl	800229c <TM_ILI9341_SendData>
 8002580:	e005      	b.n	800258e <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_2) {
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d102      	bne.n	800258e <TM_ILI9341_Rotate+0x46>
		TM_ILI9341_SendData(0xE8);
 8002588:	20e8      	movs	r0, #232	; 0xe8
 800258a:	f7ff fe87 	bl	800229c <TM_ILI9341_SendData>
	}
	
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <TM_ILI9341_Rotate+0x52>
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d10a      	bne.n	80025b0 <TM_ILI9341_Rotate+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <TM_ILI9341_Rotate+0x88>)
 800259c:	22f0      	movs	r2, #240	; 0xf0
 800259e:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <TM_ILI9341_Rotate+0x88>)
 80025a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025a6:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <TM_ILI9341_Rotate+0x88>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	711a      	strb	r2, [r3, #4]
 80025ae:	e00a      	b.n	80025c6 <TM_ILI9341_Rotate+0x7e>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <TM_ILI9341_Rotate+0x88>)
 80025b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025b6:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <TM_ILI9341_Rotate+0x88>)
 80025ba:	22f0      	movs	r2, #240	; 0xf0
 80025bc:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Landscape;
 80025be:	4b04      	ldr	r3, [pc, #16]	; (80025d0 <TM_ILI9341_Rotate+0x88>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	711a      	strb	r2, [r3, #4]
	}
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20004df0 	.word	0x20004df0

080025d4 <TM_ILI9341_Puts>:

void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af02      	add	r7, sp, #8
 80025da:	60ba      	str	r2, [r7, #8]
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4603      	mov	r3, r0
 80025e0:	81fb      	strh	r3, [r7, #14]
 80025e2:	460b      	mov	r3, r1
 80025e4:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	82fb      	strh	r3, [r7, #22]
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 80025ea:	4a24      	ldr	r2, [pc, #144]	; (800267c <TM_ILI9341_Puts+0xa8>)
 80025ec:	89fb      	ldrh	r3, [r7, #14]
 80025ee:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 80025f0:	4a23      	ldr	r2, [pc, #140]	; (8002680 <TM_ILI9341_Puts+0xac>)
 80025f2:	89bb      	ldrh	r3, [r7, #12]
 80025f4:	8013      	strh	r3, [r2, #0]
	
	while (*str) {
 80025f6:	e038      	b.n	800266a <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b0a      	cmp	r3, #10
 80025fe:	d11d      	bne.n	800263c <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	785b      	ldrb	r3, [r3, #1]
 8002604:	b29a      	uxth	r2, r3
 8002606:	4b1e      	ldr	r3, [pc, #120]	; (8002680 <TM_ILI9341_Puts+0xac>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	4413      	add	r3, r2
 800260c:	b29b      	uxth	r3, r3
 800260e:	3301      	adds	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <TM_ILI9341_Puts+0xac>)
 8002614:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b0d      	cmp	r3, #13
 800261e:	d106      	bne.n	800262e <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 8002620:	4b16      	ldr	r3, [pc, #88]	; (800267c <TM_ILI9341_Puts+0xa8>)
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]
				str++;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3301      	adds	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	e002      	b.n	8002634 <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <TM_ILI9341_Puts+0xa8>)
 8002630:	8afb      	ldrh	r3, [r7, #22]
 8002632:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	3301      	adds	r3, #1
 8002638:	60bb      	str	r3, [r7, #8]
			continue;
 800263a:	e016      	b.n	800266a <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b0d      	cmp	r3, #13
 8002642:	d103      	bne.n	800264c <TM_ILI9341_Puts+0x78>
			str++;
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	3301      	adds	r3, #1
 8002648:	60bb      	str	r3, [r7, #8]
			continue;
 800264a:	e00e      	b.n	800266a <TM_ILI9341_Puts+0x96>
		}
		
		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <TM_ILI9341_Puts+0xa8>)
 800264e:	8818      	ldrh	r0, [r3, #0]
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <TM_ILI9341_Puts+0xac>)
 8002652:	8819      	ldrh	r1, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	1c5a      	adds	r2, r3, #1
 8002658:	60ba      	str	r2, [r7, #8]
 800265a:	781a      	ldrb	r2, [r3, #0]
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f000 f80d 	bl	8002684 <TM_ILI9341_Putc>
	while (*str) {
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1c2      	bne.n	80025f8 <TM_ILI9341_Puts+0x24>
	}
}
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20004dec 	.word	0x20004dec
 8002680:	20004df6 	.word	0x20004df6

08002684 <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b08b      	sub	sp, #44	; 0x2c
 8002688:	af02      	add	r7, sp, #8
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	4603      	mov	r3, r0
 800268e:	81fb      	strh	r3, [r7, #14]
 8002690:	460b      	mov	r3, r1
 8002692:	81bb      	strh	r3, [r7, #12]
 8002694:	4613      	mov	r3, r2
 8002696:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 8002698:	4a40      	ldr	r2, [pc, #256]	; (800279c <TM_ILI9341_Putc+0x118>)
 800269a:	89fb      	ldrh	r3, [r7, #14]
 800269c:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 800269e:	4a40      	ldr	r2, [pc, #256]	; (80027a0 <TM_ILI9341_Putc+0x11c>)
 80026a0:	89bb      	ldrh	r3, [r7, #12]
 80026a2:	8013      	strh	r3, [r2, #0]
	
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 80026a4:	4b3d      	ldr	r3, [pc, #244]	; (800279c <TM_ILI9341_Putc+0x118>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a3c      	ldr	r2, [pc, #240]	; (80027a4 <TM_ILI9341_Putc+0x120>)
 80026b2:	8812      	ldrh	r2, [r2, #0]
 80026b4:	4293      	cmp	r3, r2
 80026b6:	dd0b      	ble.n	80026d0 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	785b      	ldrb	r3, [r3, #1]
 80026bc:	b29a      	uxth	r2, r3
 80026be:	4b38      	ldr	r3, [pc, #224]	; (80027a0 <TM_ILI9341_Putc+0x11c>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	4b36      	ldr	r3, [pc, #216]	; (80027a0 <TM_ILI9341_Putc+0x11c>)
 80026c8:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 80026ca:	4b34      	ldr	r3, [pc, #208]	; (800279c <TM_ILI9341_Putc+0x118>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <TM_ILI9341_Putc+0x118>)
 80026d2:	8818      	ldrh	r0, [r3, #0]
 80026d4:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <TM_ILI9341_Putc+0x11c>)
 80026d6:	8819      	ldrh	r1, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b29a      	uxth	r2, r3
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <TM_ILI9341_Putc+0x118>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	b29c      	uxth	r4, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	4b2c      	ldr	r3, [pc, #176]	; (80027a0 <TM_ILI9341_Putc+0x11c>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	4613      	mov	r3, r2
 80026fc:	4622      	mov	r2, r4
 80026fe:	f7ff fe71 	bl	80023e4 <TM_ILI9341_INT_Fill>
	
	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e035      	b.n	8002774 <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	3b20      	subs	r3, #32
 8002710:	6879      	ldr	r1, [r7, #4]
 8002712:	7849      	ldrb	r1, [r1, #1]
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4619      	mov	r1, r3
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	440b      	add	r3, r1
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	881b      	ldrh	r3, [r3, #0]
 8002724:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e01a      	b.n	8002762 <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00f      	beq.n	800275c <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	b29a      	uxth	r2, r3
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <TM_ILI9341_Putc+0x118>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	4413      	add	r3, r2
 8002746:	b298      	uxth	r0, r3
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	b29a      	uxth	r2, r3
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <TM_ILI9341_Putc+0x11c>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	4413      	add	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002756:	4619      	mov	r1, r3
 8002758:	f7ff fdc4 	bl	80022e4 <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	3301      	adds	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	4293      	cmp	r3, r2
 800276c:	d3de      	bcc.n	800272c <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	3301      	adds	r3, #1
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	461a      	mov	r2, r3
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4293      	cmp	r3, r2
 800277e:	d3c3      	bcc.n	8002708 <TM_ILI9341_Putc+0x84>
			}
		}
	}
	
	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <TM_ILI9341_Putc+0x118>)
 8002788:	881b      	ldrh	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	b29a      	uxth	r2, r3
 800278e:	4b03      	ldr	r3, [pc, #12]	; (800279c <TM_ILI9341_Putc+0x118>)
 8002790:	801a      	strh	r2, [r3, #0]
}
 8002792:	bf00      	nop
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd90      	pop	{r4, r7, pc}
 800279a:	bf00      	nop
 800279c:	20004dec 	.word	0x20004dec
 80027a0:	20004df6 	.word	0x20004df6
 80027a4:	20004df0 	.word	0x20004df0

080027a8 <TM_ILI9341_DrawCircle>:
	
	/* CS HIGH back */
	ILI9341_CS_SET;
}

void TM_ILI9341_DrawCircle(int16_t x0, int16_t y0, int16_t r, uint32_t color) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	607b      	str	r3, [r7, #4]
 80027b0:	4603      	mov	r3, r0
 80027b2:	81fb      	strh	r3, [r7, #14]
 80027b4:	460b      	mov	r3, r1
 80027b6:	81bb      	strh	r3, [r7, #12]
 80027b8:	4613      	mov	r3, r2
 80027ba:	817b      	strh	r3, [r7, #10]
	int16_t f = 1 - r;
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	f1c3 0301 	rsb	r3, r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	83fb      	strh	r3, [r7, #30]
	int16_t ddF_x = 1;
 80027c6:	2301      	movs	r3, #1
 80027c8:	83bb      	strh	r3, [r7, #28]
	int16_t ddF_y = -2 * r;
 80027ca:	897b      	ldrh	r3, [r7, #10]
 80027cc:	461a      	mov	r2, r3
 80027ce:	03d2      	lsls	r2, r2, #15
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	837b      	strh	r3, [r7, #26]
	int16_t x = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	833b      	strh	r3, [r7, #24]
	int16_t y = r;
 80027dc:	897b      	ldrh	r3, [r7, #10]
 80027de:	82fb      	strh	r3, [r7, #22]

    TM_ILI9341_DrawPixel(x0, y0 + r, color);
 80027e0:	89f8      	ldrh	r0, [r7, #14]
 80027e2:	89ba      	ldrh	r2, [r7, #12]
 80027e4:	897b      	ldrh	r3, [r7, #10]
 80027e6:	4413      	add	r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7ff fd79 	bl	80022e4 <TM_ILI9341_DrawPixel>
    TM_ILI9341_DrawPixel(x0, y0 - r, color);
 80027f2:	89f8      	ldrh	r0, [r7, #14]
 80027f4:	89ba      	ldrh	r2, [r7, #12]
 80027f6:	897b      	ldrh	r3, [r7, #10]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4619      	mov	r1, r3
 8002800:	f7ff fd70 	bl	80022e4 <TM_ILI9341_DrawPixel>
    TM_ILI9341_DrawPixel(x0 + r, y0, color);
 8002804:	89fa      	ldrh	r2, [r7, #14]
 8002806:	897b      	ldrh	r3, [r7, #10]
 8002808:	4413      	add	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	89b9      	ldrh	r1, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fd67 	bl	80022e4 <TM_ILI9341_DrawPixel>
    TM_ILI9341_DrawPixel(x0 - r, y0, color);
 8002816:	89fa      	ldrh	r2, [r7, #14]
 8002818:	897b      	ldrh	r3, [r7, #10]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	b29b      	uxth	r3, r3
 800281e:	89b9      	ldrh	r1, [r7, #12]
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4618      	mov	r0, r3
 8002824:	f7ff fd5e 	bl	80022e4 <TM_ILI9341_DrawPixel>

    while (x < y) {
 8002828:	e081      	b.n	800292e <TM_ILI9341_DrawCircle+0x186>
        if (f >= 0) {
 800282a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800282e:	2b00      	cmp	r3, #0
 8002830:	db0e      	blt.n	8002850 <TM_ILI9341_DrawCircle+0xa8>
            y--;
 8002832:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002836:	b29b      	uxth	r3, r3
 8002838:	3b01      	subs	r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	82fb      	strh	r3, [r7, #22]
            ddF_y += 2;
 800283e:	8b7b      	ldrh	r3, [r7, #26]
 8002840:	3302      	adds	r3, #2
 8002842:	b29b      	uxth	r3, r3
 8002844:	837b      	strh	r3, [r7, #26]
            f += ddF_y;
 8002846:	8bfa      	ldrh	r2, [r7, #30]
 8002848:	8b7b      	ldrh	r3, [r7, #26]
 800284a:	4413      	add	r3, r2
 800284c:	b29b      	uxth	r3, r3
 800284e:	83fb      	strh	r3, [r7, #30]
        }
        x++;
 8002850:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002854:	b29b      	uxth	r3, r3
 8002856:	3301      	adds	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	833b      	strh	r3, [r7, #24]
        ddF_x += 2;
 800285c:	8bbb      	ldrh	r3, [r7, #28]
 800285e:	3302      	adds	r3, #2
 8002860:	b29b      	uxth	r3, r3
 8002862:	83bb      	strh	r3, [r7, #28]
        f += ddF_x;
 8002864:	8bfa      	ldrh	r2, [r7, #30]
 8002866:	8bbb      	ldrh	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	83fb      	strh	r3, [r7, #30]

        TM_ILI9341_DrawPixel(x0 + x, y0 + y, color);
 800286e:	89fa      	ldrh	r2, [r7, #14]
 8002870:	8b3b      	ldrh	r3, [r7, #24]
 8002872:	4413      	add	r3, r2
 8002874:	b298      	uxth	r0, r3
 8002876:	89ba      	ldrh	r2, [r7, #12]
 8002878:	8afb      	ldrh	r3, [r7, #22]
 800287a:	4413      	add	r3, r2
 800287c:	b29b      	uxth	r3, r3
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4619      	mov	r1, r3
 8002882:	f7ff fd2f 	bl	80022e4 <TM_ILI9341_DrawPixel>
        TM_ILI9341_DrawPixel(x0 - x, y0 + y, color);
 8002886:	89fa      	ldrh	r2, [r7, #14]
 8002888:	8b3b      	ldrh	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	b298      	uxth	r0, r3
 800288e:	89ba      	ldrh	r2, [r7, #12]
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	4413      	add	r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4619      	mov	r1, r3
 800289a:	f7ff fd23 	bl	80022e4 <TM_ILI9341_DrawPixel>
        TM_ILI9341_DrawPixel(x0 + x, y0 - y, color);
 800289e:	89fa      	ldrh	r2, [r7, #14]
 80028a0:	8b3b      	ldrh	r3, [r7, #24]
 80028a2:	4413      	add	r3, r2
 80028a4:	b298      	uxth	r0, r3
 80028a6:	89ba      	ldrh	r2, [r7, #12]
 80028a8:	8afb      	ldrh	r3, [r7, #22]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f7ff fd17 	bl	80022e4 <TM_ILI9341_DrawPixel>
        TM_ILI9341_DrawPixel(x0 - x, y0 - y, color);
 80028b6:	89fa      	ldrh	r2, [r7, #14]
 80028b8:	8b3b      	ldrh	r3, [r7, #24]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	b298      	uxth	r0, r3
 80028be:	89ba      	ldrh	r2, [r7, #12]
 80028c0:	8afb      	ldrh	r3, [r7, #22]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7ff fd0b 	bl	80022e4 <TM_ILI9341_DrawPixel>

        TM_ILI9341_DrawPixel(x0 + y, y0 + x, color);
 80028ce:	89fa      	ldrh	r2, [r7, #14]
 80028d0:	8afb      	ldrh	r3, [r7, #22]
 80028d2:	4413      	add	r3, r2
 80028d4:	b298      	uxth	r0, r3
 80028d6:	89ba      	ldrh	r2, [r7, #12]
 80028d8:	8b3b      	ldrh	r3, [r7, #24]
 80028da:	4413      	add	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7ff fcff 	bl	80022e4 <TM_ILI9341_DrawPixel>
        TM_ILI9341_DrawPixel(x0 - y, y0 + x, color);
 80028e6:	89fa      	ldrh	r2, [r7, #14]
 80028e8:	8afb      	ldrh	r3, [r7, #22]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	b298      	uxth	r0, r3
 80028ee:	89ba      	ldrh	r2, [r7, #12]
 80028f0:	8b3b      	ldrh	r3, [r7, #24]
 80028f2:	4413      	add	r3, r2
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7ff fcf3 	bl	80022e4 <TM_ILI9341_DrawPixel>
        TM_ILI9341_DrawPixel(x0 + y, y0 - x, color);
 80028fe:	89fa      	ldrh	r2, [r7, #14]
 8002900:	8afb      	ldrh	r3, [r7, #22]
 8002902:	4413      	add	r3, r2
 8002904:	b298      	uxth	r0, r3
 8002906:	89ba      	ldrh	r2, [r7, #12]
 8002908:	8b3b      	ldrh	r3, [r7, #24]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	b29b      	uxth	r3, r3
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4619      	mov	r1, r3
 8002912:	f7ff fce7 	bl	80022e4 <TM_ILI9341_DrawPixel>
        TM_ILI9341_DrawPixel(x0 - y, y0 - x, color);
 8002916:	89fa      	ldrh	r2, [r7, #14]
 8002918:	8afb      	ldrh	r3, [r7, #22]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	b298      	uxth	r0, r3
 800291e:	89ba      	ldrh	r2, [r7, #12]
 8002920:	8b3b      	ldrh	r3, [r7, #24]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b29b      	uxth	r3, r3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4619      	mov	r1, r3
 800292a:	f7ff fcdb 	bl	80022e4 <TM_ILI9341_DrawPixel>
    while (x < y) {
 800292e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002932:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002936:	429a      	cmp	r2, r3
 8002938:	f6ff af77 	blt.w	800282a <TM_ILI9341_DrawCircle+0x82>
    }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
	...

08002948 <TM_ILI9341_DrawImage>:
        TM_ILI9341_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
        TM_ILI9341_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
    }
}

void TM_ILI9341_DrawImage(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t imgId) {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	4604      	mov	r4, r0
 8002950:	4608      	mov	r0, r1
 8002952:	4611      	mov	r1, r2
 8002954:	461a      	mov	r2, r3
 8002956:	4623      	mov	r3, r4
 8002958:	80fb      	strh	r3, [r7, #6]
 800295a:	4603      	mov	r3, r0
 800295c:	80bb      	strh	r3, [r7, #4]
 800295e:	460b      	mov	r3, r1
 8002960:	807b      	strh	r3, [r7, #2]
 8002962:	4613      	mov	r3, r2
 8002964:	803b      	strh	r3, [r7, #0]
    uint32_t i = 0;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]

	/* Set cursor position */
	TM_ILI9341_SetCursorPosition(45, 0, 285-1, 240-1);
 800296a:	23ef      	movs	r3, #239	; 0xef
 800296c:	f44f 728e 	mov.w	r2, #284	; 0x11c
 8002970:	2100      	movs	r1, #0
 8002972:	202d      	movs	r0, #45	; 0x2d
 8002974:	f7ff fcd6 	bl	8002324 <TM_ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8002978:	202c      	movs	r0, #44	; 0x2c
 800297a:	f7ff fc6b 	bl	8002254 <TM_ILI9341_SendCommand>

	switch(imgId){
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d123      	bne.n	80029cc <TM_ILI9341_DrawImage+0x84>
	  case 0:
		for (i = 0; i < vu_image.height * vu_image.width * vu_image.bytes_per_pixel; i = i + 2) {
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	e012      	b.n	80029b0 <TM_ILI9341_DrawImage+0x68>
			TM_ILI9341_SendData(vu_image.pixel_data[i+1]);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3301      	adds	r3, #1
 800298e:	4a11      	ldr	r2, [pc, #68]	; (80029d4 <TM_ILI9341_DrawImage+0x8c>)
 8002990:	4413      	add	r3, r2
 8002992:	7b1b      	ldrb	r3, [r3, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff fc81 	bl	800229c <TM_ILI9341_SendData>
			TM_ILI9341_SendData(vu_image.pixel_data[i]);
 800299a:	4a0e      	ldr	r2, [pc, #56]	; (80029d4 <TM_ILI9341_DrawImage+0x8c>)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4413      	add	r3, r2
 80029a0:	330c      	adds	r3, #12
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fc79 	bl	800229c <TM_ILI9341_SendData>
		for (i = 0; i < vu_image.height * vu_image.width * vu_image.bytes_per_pixel; i = i + 2) {
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3302      	adds	r3, #2
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <TM_ILI9341_DrawImage+0x8c>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <TM_ILI9341_DrawImage+0x8c>)
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <TM_ILI9341_DrawImage+0x8c>)
 80029be:	6892      	ldr	r2, [r2, #8]
 80029c0:	fb02 f303 	mul.w	r3, r2, r3
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d3df      	bcc.n	800298a <TM_ILI9341_DrawImage+0x42>
		}
	 	break;
 80029ca:	bf00      	nop
	}
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd90      	pop	{r4, r7, pc}
 80029d4:	0800c3c8 	.word	0x0800c3c8

080029d8 <sensorATaskEntry>:
	#endif
}
//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void sensorATaskEntry(void const * argument)
{
 80029d8:	b590      	push	{r4, r7, lr}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	uint8_t	Ds18b20TryToFind=5;
 80029e0:	2305      	movs	r3, #5
 80029e2:	73fb      	strb	r3, [r7, #15]
	uint16_t display_event;
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 80029e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e8:	4975      	ldr	r1, [pc, #468]	; (8002bc0 <sensorATaskEntry+0x1e8>)
 80029ea:	4876      	ldr	r0, [pc, #472]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 80029ec:	f000 fb7a 	bl	80030e4 <OneWire_Init>
		TempSensorCount = 0;
 80029f0:	4b75      	ldr	r3, [pc, #468]	; (8002bc8 <sensorATaskEntry+0x1f0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 80029f6:	e002      	b.n	80029fe <sensorATaskEntry+0x26>
			Ds18b20Delay(100);
 80029f8:	2064      	movs	r0, #100	; 0x64
 80029fa:	f004 fe0d 	bl	8007618 <osDelay>
		while(HAL_GetTick() < 3000)
 80029fe:	f000 fe05 	bl	800360c <HAL_GetTick>
 8002a02:	4603      	mov	r3, r0
 8002a04:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d9f5      	bls.n	80029f8 <sensorATaskEntry+0x20>
		OneWireDevices = OneWire_First(&OneWire);
 8002a0c:	486d      	ldr	r0, [pc, #436]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 8002a0e:	f000 fc5c 	bl	80032ca <OneWire_First>
 8002a12:	4603      	mov	r3, r0
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b6d      	ldr	r3, [pc, #436]	; (8002bcc <sensorATaskEntry+0x1f4>)
 8002a18:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002a1a:	e019      	b.n	8002a50 <sensorATaskEntry+0x78>
		{
			Ds18b20Delay(100);
 8002a1c:	2064      	movs	r0, #100	; 0x64
 8002a1e:	f004 fdfb 	bl	8007618 <osDelay>
			TempSensorCount++;
 8002a22:	4b69      	ldr	r3, [pc, #420]	; (8002bc8 <sensorATaskEntry+0x1f0>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <sensorATaskEntry+0x1f0>)
 8002a2c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8002a2e:	4b66      	ldr	r3, [pc, #408]	; (8002bc8 <sensorATaskEntry+0x1f0>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	4a66      	ldr	r2, [pc, #408]	; (8002bd0 <sensorATaskEntry+0x1f8>)
 8002a38:	4413      	add	r3, r2
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4861      	ldr	r0, [pc, #388]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 8002a3e:	f000 fd59 	bl	80034f4 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8002a42:	4860      	ldr	r0, [pc, #384]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 8002a44:	f000 fc51 	bl	80032ea <OneWire_Next>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <sensorATaskEntry+0x1f4>)
 8002a4e:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002a50:	4b5e      	ldr	r3, [pc, #376]	; (8002bcc <sensorATaskEntry+0x1f4>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e1      	bne.n	8002a1c <sensorATaskEntry+0x44>
		}
		if(TempSensorCount>0)
 8002a58:	4b5b      	ldr	r3, [pc, #364]	; (8002bc8 <sensorATaskEntry+0x1f0>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <sensorATaskEntry+0x96>
			break;
		Ds18b20TryToFind--;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	73fb      	strb	r3, [r7, #15]
	}while(Ds18b20TryToFind>0);
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1bb      	bne.n	80029e4 <sensorATaskEntry+0xc>
 8002a6c:	e000      	b.n	8002a70 <sensorATaskEntry+0x98>
			break;
 8002a6e:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <sensorATaskEntry+0xa8>
		vTaskDelete(Ds18b20Handle);
 8002a76:	4b57      	ldr	r3, [pc, #348]	; (8002bd4 <sensorATaskEntry+0x1fc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f005 ff5e 	bl	800893c <vTaskDelete>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002a80:	2300      	movs	r3, #0
 8002a82:	73bb      	strb	r3, [r7, #14]
 8002a84:	e019      	b.n	8002aba <sensorATaskEntry+0xe2>
	{
		Ds18b20Delay(50);
 8002a86:	2032      	movs	r0, #50	; 0x32
 8002a88:	f004 fdc6 	bl	8007618 <osDelay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8002a8c:	7bbb      	ldrb	r3, [r7, #14]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	4a4f      	ldr	r2, [pc, #316]	; (8002bd0 <sensorATaskEntry+0x1f8>)
 8002a92:	4413      	add	r3, r2
 8002a94:	220c      	movs	r2, #12
 8002a96:	4619      	mov	r1, r3
 8002a98:	484a      	ldr	r0, [pc, #296]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 8002a9a:	f000 f9b7 	bl	8002e0c <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8002a9e:	2032      	movs	r0, #50	; 0x32
 8002aa0:	f004 fdba 	bl	8007618 <osDelay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8002aa4:	7bbb      	ldrb	r3, [r7, #14]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	4a49      	ldr	r2, [pc, #292]	; (8002bd0 <sensorATaskEntry+0x1f8>)
 8002aaa:	4413      	add	r3, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	4845      	ldr	r0, [pc, #276]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 8002ab0:	f000 fa45 	bl	8002f3e <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002ab4:	7bbb      	ldrb	r3, [r7, #14]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	73bb      	strb	r3, [r7, #14]
 8002aba:	4b43      	ldr	r3, [pc, #268]	; (8002bc8 <sensorATaskEntry+0x1f0>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	7bba      	ldrb	r2, [r7, #14]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3e0      	bcc.n	8002a86 <sensorATaskEntry+0xae>
  }
	for(;;)
	{
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 8002ac4:	bf00      	nop
		{
			if(Ds18b20StartConvert==1)
				break;
			Ds18b20Delay(10);
		}
		Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8002ac6:	4b44      	ldr	r3, [pc, #272]	; (8002bd8 <sensorATaskEntry+0x200>)
 8002ac8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002acc:	801a      	strh	r2, [r3, #0]
		DS18B20_StartAll(&OneWire);
 8002ace:	483d      	ldr	r0, [pc, #244]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 8002ad0:	f000 f888 	bl	8002be4 <DS18B20_StartAll>
		osDelay(100);
 8002ad4:	2064      	movs	r0, #100	; 0x64
 8002ad6:	f004 fd9f 	bl	8007618 <osDelay>
    while (!DS18B20_AllDone(&OneWire))
 8002ada:	e00c      	b.n	8002af6 <sensorATaskEntry+0x11e>
		{
			osDelay(10);
 8002adc:	200a      	movs	r0, #10
 8002ade:	f004 fd9b 	bl	8007618 <osDelay>
			Ds18b20Timeout-=1;
 8002ae2:	4b3d      	ldr	r3, [pc, #244]	; (8002bd8 <sensorATaskEntry+0x200>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b3b      	ldr	r3, [pc, #236]	; (8002bd8 <sensorATaskEntry+0x200>)
 8002aec:	801a      	strh	r2, [r3, #0]
			if(Ds18b20Timeout==0)
 8002aee:	4b3a      	ldr	r3, [pc, #232]	; (8002bd8 <sensorATaskEntry+0x200>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d006      	beq.n	8002b04 <sensorATaskEntry+0x12c>
    while (!DS18B20_AllDone(&OneWire))
 8002af6:	4833      	ldr	r0, [pc, #204]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 8002af8:	f000 fa7c 	bl	8002ff4 <DS18B20_AllDone>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0ec      	beq.n	8002adc <sensorATaskEntry+0x104>
 8002b02:	e000      	b.n	8002b06 <sensorATaskEntry+0x12e>
				break;
 8002b04:	bf00      	nop
		}
		if(Ds18b20Timeout>0)
 8002b06:	4b34      	ldr	r3, [pc, #208]	; (8002bd8 <sensorATaskEntry+0x200>)
 8002b08:	881b      	ldrh	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d03e      	beq.n	8002b8c <sensorATaskEntry+0x1b4>
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	737b      	strb	r3, [r7, #13]
 8002b12:	e01c      	b.n	8002b4e <sensorATaskEntry+0x176>
			{
				Ds18b20Delay(1000);
 8002b14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b18:	f004 fd7e 	bl	8007618 <osDelay>
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8002b1c:	7b7b      	ldrb	r3, [r7, #13]
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <sensorATaskEntry+0x1f8>)
 8002b22:	1899      	adds	r1, r3, r2
 8002b24:	7b7b      	ldrb	r3, [r7, #13]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	3308      	adds	r3, #8
 8002b2a:	4a29      	ldr	r2, [pc, #164]	; (8002bd0 <sensorATaskEntry+0x1f8>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	7b7c      	ldrb	r4, [r7, #13]
 8002b30:	461a      	mov	r2, r3
 8002b32:	4824      	ldr	r0, [pc, #144]	; (8002bc4 <sensorATaskEntry+0x1ec>)
 8002b34:	f000 f86a 	bl	8002c0c <DS18B20_Read>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <sensorATaskEntry+0x1f8>)
 8002b3e:	0123      	lsls	r3, r4, #4
 8002b40:	4413      	add	r3, r2
 8002b42:	330c      	adds	r3, #12
 8002b44:	460a      	mov	r2, r1
 8002b46:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b48:	7b7b      	ldrb	r3, [r7, #13]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	737b      	strb	r3, [r7, #13]
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <sensorATaskEntry+0x1f0>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	7b7a      	ldrb	r2, [r7, #13]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d3dd      	bcc.n	8002b14 <sensorATaskEntry+0x13c>
			}
            display_event = 0x4000 + (int16_t)(ds18b20[0].Temperature * 10);
 8002b58:	4b1d      	ldr	r3, [pc, #116]	; (8002bd0 <sensorATaskEntry+0x1f8>)
 8002b5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b5e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b6a:	ee17 3a90 	vmov	r3, s15
 8002b6e:	b21b      	sxth	r3, r3
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	817b      	strh	r3, [r7, #10]
		    osMessageQueuePut(displayQueueHandle, &display_event, 10, 0);
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <sensorATaskEntry+0x204>)
 8002b7c:	6818      	ldr	r0, [r3, #0]
 8002b7e:	f107 010a 	add.w	r1, r7, #10
 8002b82:	2300      	movs	r3, #0
 8002b84:	220a      	movs	r2, #10
 8002b86:	f004 fdd5 	bl	8007734 <osMessageQueuePut>
 8002b8a:	e011      	b.n	8002bb0 <sensorATaskEntry+0x1d8>
		}
		else
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	733b      	strb	r3, [r7, #12]
 8002b90:	e009      	b.n	8002ba6 <sensorATaskEntry+0x1ce>
				ds18b20[i].DataIsValid = false;
 8002b92:	7b3b      	ldrb	r3, [r7, #12]
 8002b94:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <sensorATaskEntry+0x1f8>)
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	330c      	adds	r3, #12
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8002ba0:	7b3b      	ldrb	r3, [r7, #12]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	733b      	strb	r3, [r7, #12]
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <sensorATaskEntry+0x1f0>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	7b3a      	ldrb	r2, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3f0      	bcc.n	8002b92 <sensorATaskEntry+0x1ba>
		}
		Ds18b20StartConvert=0;
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <sensorATaskEntry+0x208>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
    osDelay(_DS18B20_UPDATE_INTERVAL_MS);
 8002bb6:	f241 3088 	movw	r0, #5000	; 0x1388
 8002bba:	f004 fd2d 	bl	8007618 <osDelay>
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 8002bbe:	e781      	b.n	8002ac4 <sensorATaskEntry+0xec>
 8002bc0:	40020c00 	.word	0x40020c00
 8002bc4:	20004e10 	.word	0x20004e10
 8002bc8:	200000a9 	.word	0x200000a9
 8002bcc:	20004df8 	.word	0x20004df8
 8002bd0:	20004dfc 	.word	0x20004dfc
 8002bd4:	20004e0c 	.word	0x20004e0c
 8002bd8:	200000ac 	.word	0x200000ac
 8002bdc:	20004d38 	.word	0x20004d38
 8002be0:	200000aa 	.word	0x200000aa

08002be4 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 faa7 	bl	8003140 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002bf2:	21cc      	movs	r1, #204	; 0xcc
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 fb29 	bl	800324c <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8002bfa:	2144      	movs	r1, #68	; 0x44
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fb25 	bl	800324c <OneWire_WriteByte>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b08b      	sub	sp, #44	; 0x2c
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 8002c22:	68b8      	ldr	r0, [r7, #8]
 8002c24:	f000 f97a 	bl	8002f1c <DS18B20_Is>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <DS18B20_Read+0x26>
		return false;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e0e1      	b.n	8002df6 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fae0 	bl	80031f8 <OneWire_ReadBit>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	e0d9      	b.n	8002df6 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fa7c 	bl	8003140 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fc33 	bl	80034b6 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c50:	21be      	movs	r1, #190	; 0xbe
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fafa 	bl	800324c <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e00d      	b.n	8002c7a <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8002c5e:	7ffc      	ldrb	r4, [r7, #31]
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fb11 	bl	8003288 <OneWire_ReadByte>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c6e:	4423      	add	r3, r4
 8002c70:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8002c74:	7ffb      	ldrb	r3, [r7, #31]
 8002c76:	3301      	adds	r3, #1
 8002c78:	77fb      	strb	r3, [r7, #31]
 8002c7a:	7ffb      	ldrb	r3, [r7, #31]
 8002c7c:	2b08      	cmp	r3, #8
 8002c7e:	d9ee      	bls.n	8002c5e <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2108      	movs	r1, #8
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fc51 	bl	800352e <OneWire_CRC8>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8002c90:	7f3b      	ldrb	r3, [r7, #28]
 8002c92:	7fba      	ldrb	r2, [r7, #30]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e0ac      	b.n	8002df6 <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002c9c:	7d3b      	ldrb	r3, [r7, #20]
 8002c9e:	b21a      	sxth	r2, r3
 8002ca0:	7d7b      	ldrb	r3, [r7, #21]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	b21b      	sxth	r3, r3
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fa47 	bl	8003140 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002cb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da05      	bge.n	8002cc6 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 8002cba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cbc:	425b      	negs	r3, r3
 8002cbe:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002cc6:	7e3b      	ldrb	r3, [r7, #24]
 8002cc8:	115b      	asrs	r3, r3, #5
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3309      	adds	r3, #9
 8002cd4:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002cd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002ce0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cee:	b25a      	sxtb	r2, r3
 8002cf0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 8002cfa:	7f7b      	ldrb	r3, [r7, #29]
 8002cfc:	3b09      	subs	r3, #9
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d858      	bhi.n	8002db4 <DS18B20_Read+0x1a8>
 8002d02:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <DS18B20_Read+0xfc>)
 8002d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d41 	.word	0x08002d41
 8002d10:	08002d69 	.word	0x08002d69
 8002d14:	08002d91 	.word	0x08002d91
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8002d18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d1a:	08db      	lsrs	r3, r3, #3
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	ee07 3a90 	vmov	s15, r3
 8002d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d2a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8002d2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d3a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002d3e:	e03e      	b.n	8002dbe <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8002d40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	ee07 3a90 	vmov	s15, r3
 8002d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d52:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8002d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d5a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d62:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002d66:	e02a      	b.n	8002dbe <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8002d68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d6a:	085b      	lsrs	r3, r3, #1
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d7a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002d7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d82:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002d86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d8a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002d8e:	e016      	b.n	8002dbe <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d9e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002da6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002e00 <DS18B20_Read+0x1f4>
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002db2:	e004      	b.n	8002dbe <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <DS18B20_Read+0x1f8>)
 8002db6:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002dbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dca:	ed97 7a08 	vldr	s14, [r7, #32]
 8002dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd2:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8002dd6:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d007      	beq.n	8002dee <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002dde:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002e08 <DS18B20_Read+0x1fc>
 8002de2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dea:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a3a      	ldr	r2, [r7, #32]
 8002df2:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002df4:	2301      	movs	r3, #1
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	372c      	adds	r7, #44	; 0x2c
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	3d800000 	.word	0x3d800000
 8002e04:	437f0000 	.word	0x437f0000
 8002e08:	00000000 	.word	0x00000000

08002e0c <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8002e1a:	68b8      	ldr	r0, [r7, #8]
 8002e1c:	f000 f87e 	bl	8002f1c <DS18B20_Is>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <DS18B20_SetResolution+0x1e>
		return 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e074      	b.n	8002f14 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 f988 	bl	8003140 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fb3f 	bl	80034b6 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002e38:	21be      	movs	r1, #190	; 0xbe
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa06 	bl	800324c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 fa21 	bl	8003288 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 fa1e 	bl	8003288 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fa1b 	bl	8003288 <OneWire_ReadByte>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fa16 	bl	8003288 <OneWire_ReadByte>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fa11 	bl	8003288 <OneWire_ReadByte>
 8002e66:	4603      	mov	r3, r0
 8002e68:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d108      	bne.n	8002e82 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e76:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	f023 0320 	bic.w	r3, r3, #32
 8002e7e:	75fb      	strb	r3, [r7, #23]
 8002e80:	e022      	b.n	8002ec8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002e82:	79fb      	ldrb	r3, [r7, #7]
 8002e84:	2b0a      	cmp	r3, #10
 8002e86:	d108      	bne.n	8002e9a <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	f043 0320 	orr.w	r3, r3, #32
 8002e96:	75fb      	strb	r3, [r7, #23]
 8002e98:	e016      	b.n	8002ec8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	2b0b      	cmp	r3, #11
 8002e9e:	d108      	bne.n	8002eb2 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ea6:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	f023 0320 	bic.w	r3, r3, #32
 8002eae:	75fb      	strb	r3, [r7, #23]
 8002eb0:	e00a      	b.n	8002ec8 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d107      	bne.n	8002ec8 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ebe:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	f043 0320 	orr.w	r3, r3, #32
 8002ec6:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f939 	bl	8003140 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 faf0 	bl	80034b6 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002ed6:	214e      	movs	r1, #78	; 0x4e
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 f9b7 	bl	800324c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002ede:	7dbb      	ldrb	r3, [r7, #22]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f9b2 	bl	800324c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002ee8:	7d7b      	ldrb	r3, [r7, #21]
 8002eea:	4619      	mov	r1, r3
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f9ad 	bl	800324c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f9a8 	bl	800324c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f91f 	bl	8003140 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f02:	68b9      	ldr	r1, [r7, #8]
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 fad6 	bl	80034b6 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002f0a:	2148      	movs	r1, #72	; 0x48
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 f99d 	bl	800324c <OneWire_WriteByte>

	return 1;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b28      	cmp	r3, #40	; 0x28
 8002f2a:	d101      	bne.n	8002f30 <DS18B20_Is+0x14>
		return 1;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e000      	b.n	8002f32 <DS18B20_Is+0x16>

	return 0;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b084      	sub	sp, #16
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002f48:	6838      	ldr	r0, [r7, #0]
 8002f4a:	f7ff ffe7 	bl	8002f1c <DS18B20_Is>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e049      	b.n	8002fec <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f8f1 	bl	8003140 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002f5e:	6839      	ldr	r1, [r7, #0]
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 faa8 	bl	80034b6 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002f66:	21be      	movs	r1, #190	; 0xbe
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f96f 	bl	800324c <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f98a 	bl	8003288 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f987 	bl	8003288 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f984 	bl	8003288 <OneWire_ReadByte>
 8002f80:	4603      	mov	r3, r0
 8002f82:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f97f 	bl	8003288 <OneWire_ReadByte>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f97a 	bl	8003288 <OneWire_ReadByte>
 8002f94:	4603      	mov	r3, r0
 8002f96:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002f98:	237d      	movs	r3, #125	; 0x7d
 8002f9a:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002f9c:	23c9      	movs	r3, #201	; 0xc9
 8002f9e:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f8cd 	bl	8003140 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002fa6:	6839      	ldr	r1, [r7, #0]
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fa84 	bl	80034b6 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002fae:	214e      	movs	r1, #78	; 0x4e
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f94b 	bl	800324c <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f946 	bl	800324c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002fc0:	7bbb      	ldrb	r3, [r7, #14]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f941 	bl	800324c <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002fca:	7b7b      	ldrb	r3, [r7, #13]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f93c 	bl	800324c <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f8b3 	bl	8003140 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fa6a 	bl	80034b6 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002fe2:	2148      	movs	r1, #72	; 0x48
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f931 	bl	800324c <OneWire_WriteByte>

	return 1;
 8002fea:	2301      	movs	r3, #1
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f8fb 	bl	80031f8 <OneWire_ReadBit>
 8003002:	4603      	mov	r3, r0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <ONEWIRE_DELAY>:
#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef htim5;

void ONEWIRE_DELAY(uint16_t time_us)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	80fb      	strh	r3, [r7, #6]
	htim5.Instance->CNT = 0;
 8003016:	4b09      	ldr	r3, [pc, #36]	; (800303c <ONEWIRE_DELAY+0x30>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim5.Instance->CNT <= time_us);
 800301e:	bf00      	nop
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <ONEWIRE_DELAY+0x30>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	88fb      	ldrh	r3, [r7, #6]
 8003028:	429a      	cmp	r2, r3
 800302a:	d9f9      	bls.n	8003020 <ONEWIRE_DELAY+0x14>
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20004b80 	.word	0x20004b80

08003040 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	889b      	ldrh	r3, [r3, #4]
 800304c:	041a      	lsls	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	619a      	str	r2, [r3, #24]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	889a      	ldrh	r2, [r3, #4]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	619a      	str	r2, [r3, #24]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b088      	sub	sp, #32
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 800308e:	2302      	movs	r3, #2
 8003090:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	889b      	ldrh	r3, [r3, #4]
 8003096:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f107 020c 	add.w	r2, r7, #12
 80030a0:	4611      	mov	r1, r2
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 ff34 	bl	8003f10 <HAL_GPIO_Init>
}
 80030a8:	bf00      	nop
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80030b8:	2311      	movs	r3, #17
 80030ba:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80030c0:	2302      	movs	r3, #2
 80030c2:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	889b      	ldrh	r3, [r3, #4]
 80030c8:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f107 020c 	add.w	r2, r7, #12
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 ff1b 	bl	8003f10 <HAL_GPIO_Init>

}
 80030da:	bf00      	nop
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&htim5);
 80030f2:	4812      	ldr	r0, [pc, #72]	; (800313c <OneWire_Init+0x58>)
 80030f4:	f002 fe4e 	bl	8005d94 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	88fa      	ldrh	r2, [r7, #6]
 8003102:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff ffd3 	bl	80030b0 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f7ff ffa8 	bl	8003060 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8003110:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003114:	f000 fa86 	bl	8003624 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff ff91 	bl	8003040 <ONEWIRE_LOW>
	OneWireDelay(1000);
 800311e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003122:	f000 fa7f 	bl	8003624 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7ff ff9a 	bl	8003060 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 800312c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003130:	f000 fa78 	bl	8003624 <HAL_Delay>
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20004b80 	.word	0x20004b80

08003140 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff79 	bl	8003040 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ffae 	bl	80030b0 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8003154:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8003158:	f7ff ff58 	bl	800300c <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 800315c:	2014      	movs	r0, #20
 800315e:	f7ff ff55 	bl	800300c <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff8b 	bl	800307e <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8003168:	2046      	movs	r0, #70	; 0x46
 800316a:	f7ff ff4f 	bl	800300c <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	889b      	ldrh	r3, [r3, #4]
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f001 f865 	bl	8004248 <HAL_GPIO_ReadPin>
 800317e:	4603      	mov	r3, r0
 8003180:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8003182:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8003186:	f7ff ff41 	bl	800300c <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
	if (bit)
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d012      	beq.n	80031cc <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ff4a 	bl	8003040 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff ff7f 	bl	80030b0 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 80031b2:	200a      	movs	r0, #10
 80031b4:	f7ff ff2a 	bl	800300c <ONEWIRE_DELAY>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff60 	bl	800307e <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 80031be:	2037      	movs	r0, #55	; 0x37
 80031c0:	f7ff ff24 	bl	800300c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff5a 	bl	800307e <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 80031ca:	e011      	b.n	80031f0 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff37 	bl	8003040 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ff6c 	bl	80030b0 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 80031d8:	2041      	movs	r0, #65	; 0x41
 80031da:	f7ff ff17 	bl	800300c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7ff ff4d 	bl	800307e <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 80031e4:	2005      	movs	r0, #5
 80031e6:	f7ff ff11 	bl	800300c <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff47 	bl	800307e <ONEWIRE_INPUT>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff ff1b 	bl	8003040 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff ff50 	bl	80030b0 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8003210:	2002      	movs	r0, #2
 8003212:	f7ff fefb 	bl	800300c <ONEWIRE_DELAY>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff31 	bl	800307e <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 800321c:	200a      	movs	r0, #10
 800321e:	f7ff fef5 	bl	800300c <ONEWIRE_DELAY>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	889b      	ldrh	r3, [r3, #4]
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f001 f80b 	bl	8004248 <HAL_GPIO_ReadPin>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8003238:	2301      	movs	r3, #1
 800323a:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 800323c:	2032      	movs	r0, #50	; 0x32
 800323e:	f7ff fee5 	bl	800300c <ONEWIRE_DELAY>

	/* Return bit value */
	return bit;
 8003242:	7bfb      	ldrb	r3, [r7, #15]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8003258:	2308      	movs	r3, #8
 800325a:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 800325c:	e00a      	b.n	8003274 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	4619      	mov	r1, r3
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f7ff ff93 	bl	8003194 <OneWire_WriteBit>
		byte >>= 1;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	1e5a      	subs	r2, r3, #1
 8003278:	73fa      	strb	r2, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1ef      	bne.n	800325e <OneWire_WriteByte+0x12>
	}
}
 800327e:	bf00      	nop
 8003280:	bf00      	nop
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8003290:	2308      	movs	r3, #8
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	2300      	movs	r3, #0
 8003296:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8003298:	e00d      	b.n	80032b6 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 800329a:	7bbb      	ldrb	r3, [r7, #14]
 800329c:	085b      	lsrs	r3, r3, #1
 800329e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ffa9 	bl	80031f8 <OneWire_ReadBit>
 80032a6:	4603      	mov	r3, r0
 80032a8:	01db      	lsls	r3, r3, #7
 80032aa:	b25a      	sxtb	r2, r3
 80032ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b25b      	sxtb	r3, r3
 80032b4:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	73fa      	strb	r2, [r7, #15]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ec      	bne.n	800329a <OneWire_ReadByte+0x12>
	}

	return byte;
 80032c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f816 	bl	8003304 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80032d8:	21f0      	movs	r1, #240	; 0xf0
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f825 	bl	800332a <OneWire_Search>
 80032e0:	4603      	mov	r3, r0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80032f2:	21f0      	movs	r1, #240	; 0xf0
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f818 	bl	800332a <OneWire_Search>
 80032fa:	4603      	mov	r3, r0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	71da      	strb	r2, [r3, #7]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 800333a:	2300      	movs	r3, #0
 800333c:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8003342:	2301      	movs	r3, #1
 8003344:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8003346:	2300      	movs	r3, #0
 8003348:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7a1b      	ldrb	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 809a 	bne.w	8003488 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff fef3 	bl	8003140 <OneWire_Reset>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	71da      	strb	r2, [r3, #7]
			return 0;
 8003372:	2300      	movs	r3, #0
 8003374:	e09b      	b.n	80034ae <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	4619      	mov	r1, r3
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ff66 	bl	800324c <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff39 	bl	80031f8 <OneWire_ReadBit>
 8003386:	4603      	mov	r3, r0
 8003388:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff ff34 	bl	80031f8 <OneWire_ReadBit>
 8003390:	4603      	mov	r3, r0
 8003392:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8003394:	7a7b      	ldrb	r3, [r7, #9]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <OneWire_Search+0x76>
 800339a:	7a3b      	ldrb	r3, [r7, #8]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d064      	beq.n	800346a <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 80033a0:	7a7a      	ldrb	r2, [r7, #9]
 80033a2:	7a3b      	ldrb	r3, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d002      	beq.n	80033ae <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 80033a8:	7a7b      	ldrb	r3, [r7, #9]
 80033aa:	72bb      	strb	r3, [r7, #10]
 80033ac:	e026      	b.n	80033fc <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	799b      	ldrb	r3, [r3, #6]
 80033b2:	7bfa      	ldrb	r2, [r7, #15]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d20d      	bcs.n	80033d4 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80033b8:	7b7b      	ldrb	r3, [r7, #13]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	7a5a      	ldrb	r2, [r3, #9]
 80033c0:	7afb      	ldrb	r3, [r7, #11]
 80033c2:	4013      	ands	r3, r2
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	bf14      	ite	ne
 80033ca:	2301      	movne	r3, #1
 80033cc:	2300      	moveq	r3, #0
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	72bb      	strb	r3, [r7, #10]
 80033d2:	e008      	b.n	80033e6 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	799b      	ldrb	r3, [r3, #6]
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	429a      	cmp	r2, r3
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 80033e6:	7abb      	ldrb	r3, [r7, #10]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d107      	bne.n	80033fc <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 80033f0:	7bbb      	ldrb	r3, [r7, #14]
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d802      	bhi.n	80033fc <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	7bba      	ldrb	r2, [r7, #14]
 80033fa:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 80033fc:	7abb      	ldrb	r3, [r7, #10]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d10c      	bne.n	800341c <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8003402:	7b7b      	ldrb	r3, [r7, #13]
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	4413      	add	r3, r2
 8003408:	7a59      	ldrb	r1, [r3, #9]
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	7afa      	ldrb	r2, [r7, #11]
 800340e:	430a      	orrs	r2, r1
 8003410:	b2d1      	uxtb	r1, r2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	460a      	mov	r2, r1
 8003418:	725a      	strb	r2, [r3, #9]
 800341a:	e010      	b.n	800343e <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 800341c:	7b7b      	ldrb	r3, [r7, #13]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	7a5b      	ldrb	r3, [r3, #9]
 8003424:	b25a      	sxtb	r2, r3
 8003426:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800342a:	43db      	mvns	r3, r3
 800342c:	b25b      	sxtb	r3, r3
 800342e:	4013      	ands	r3, r2
 8003430:	b25a      	sxtb	r2, r3
 8003432:	7b7b      	ldrb	r3, [r7, #13]
 8003434:	b2d1      	uxtb	r1, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	460a      	mov	r2, r1
 800343c:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 800343e:	7abb      	ldrb	r3, [r7, #10]
 8003440:	4619      	mov	r1, r3
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff fea6 	bl	8003194 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	3301      	adds	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 800344e:	7afb      	ldrb	r3, [r7, #11]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8003454:	7afb      	ldrb	r3, [r7, #11]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 800345a:	7b7b      	ldrb	r3, [r7, #13]
 800345c:	3301      	adds	r3, #1
 800345e:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8003460:	2301      	movs	r3, #1
 8003462:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8003464:	7b7b      	ldrb	r3, [r7, #13]
 8003466:	2b07      	cmp	r3, #7
 8003468:	d98a      	bls.n	8003380 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d90b      	bls.n	8003488 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	7bba      	ldrb	r2, [r7, #14]
 8003474:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	799b      	ldrb	r3, [r3, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d102      	bne.n	8003484 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8003484:	2301      	movs	r3, #1
 8003486:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8003488:	7b3b      	ldrb	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <OneWire_Search+0x16c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7a5b      	ldrb	r3, [r3, #9]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 80034ac:	7b3b      	ldrb	r3, [r7, #12]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80034c0:	2155      	movs	r1, #85	; 0x55
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7ff fec2 	bl	800324c <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]
 80034cc:	e00a      	b.n	80034e4 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff feb7 	bl	800324c <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	3301      	adds	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
 80034e6:	2b07      	cmp	r3, #7
 80034e8:	d9f1      	bls.n	80034ce <OneWire_SelectWithPointer+0x18>
	}
}
 80034ea:	bf00      	nop
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e00a      	b.n	800351a <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	6839      	ldr	r1, [r7, #0]
 800350a:	440b      	add	r3, r1
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	440a      	add	r2, r1
 8003510:	7a52      	ldrb	r2, [r2, #9]
 8003512:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	3301      	adds	r3, #1
 8003518:	73fb      	strb	r3, [r7, #15]
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	2b07      	cmp	r3, #7
 800351e:	d9f1      	bls.n	8003504 <OneWire_GetFullROM+0x10>
	}
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800353a:	2300      	movs	r3, #0
 800353c:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 800353e:	e022      	b.n	8003586 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800354a:	2308      	movs	r3, #8
 800354c:	737b      	strb	r3, [r7, #13]
 800354e:	e017      	b.n	8003580 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8003550:	7bfa      	ldrb	r2, [r7, #15]
 8003552:	7bbb      	ldrb	r3, [r7, #14]
 8003554:	4053      	eors	r3, r2
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8003564:	7b3b      	ldrb	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d004      	beq.n	8003574 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800356a:	7bfb      	ldrb	r3, [r7, #15]
 800356c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003570:	43db      	mvns	r3, r3
 8003572:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8003574:	7bbb      	ldrb	r3, [r7, #14]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800357a:	7b7b      	ldrb	r3, [r7, #13]
 800357c:	3b01      	subs	r3, #1
 800357e:	737b      	strb	r3, [r7, #13]
 8003580:	7b7b      	ldrb	r3, [r7, #13]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e4      	bne.n	8003550 <OneWire_CRC8+0x22>
	while (len--) {
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	1e5a      	subs	r2, r3, #1
 800358a:	70fa      	strb	r2, [r7, #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1d7      	bne.n	8003540 <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8003590:	7bfb      	ldrb	r3, [r7, #15]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <HAL_Init+0x40>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <HAL_Init+0x40>)
 80035aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_Init+0x40>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <HAL_Init+0x40>)
 80035b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_Init+0x40>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_Init+0x40>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c8:	2003      	movs	r0, #3
 80035ca:	f000 f8fc 	bl	80037c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7fe fa36 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d4:	f7fd ff7c 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00

080035e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x20>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_IncTick+0x24>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	4a04      	ldr	r2, [pc, #16]	; (8003608 <HAL_IncTick+0x24>)
 80035f6:	6013      	str	r3, [r2, #0]
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	20000018 	.word	0x20000018
 8003608:	20004e24 	.word	0x20004e24

0800360c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return uwTick;
 8003610:	4b03      	ldr	r3, [pc, #12]	; (8003620 <HAL_GetTick+0x14>)
 8003612:	681b      	ldr	r3, [r3, #0]
}
 8003614:	4618      	mov	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20004e24 	.word	0x20004e24

08003624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800362c:	f7ff ffee 	bl	800360c <HAL_GetTick>
 8003630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800363c:	d005      	beq.n	800364a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <HAL_Delay+0x44>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800364a:	bf00      	nop
 800364c:	f7ff ffde 	bl	800360c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	429a      	cmp	r2, r3
 800365a:	d8f7      	bhi.n	800364c <HAL_Delay+0x28>
  {
  }
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20000018 	.word	0x20000018

0800366c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800367c:	4b0c      	ldr	r3, [pc, #48]	; (80036b0 <__NVIC_SetPriorityGrouping+0x44>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003688:	4013      	ands	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800369e:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <__NVIC_SetPriorityGrouping+0x44>)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	60d3      	str	r3, [r2, #12]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <__NVIC_GetPriorityGrouping+0x18>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	0a1b      	lsrs	r3, r3, #8
 80036be:	f003 0307 	and.w	r3, r3, #7
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	4603      	mov	r3, r0
 80036d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	db0b      	blt.n	80036fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	f003 021f 	and.w	r2, r3, #31
 80036e8:	4907      	ldr	r1, [pc, #28]	; (8003708 <__NVIC_EnableIRQ+0x38>)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	2001      	movs	r0, #1
 80036f2:	fa00 f202 	lsl.w	r2, r0, r2
 80036f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	e000e100 	.word	0xe000e100

0800370c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	4603      	mov	r3, r0
 8003714:	6039      	str	r1, [r7, #0]
 8003716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371c:	2b00      	cmp	r3, #0
 800371e:	db0a      	blt.n	8003736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	b2da      	uxtb	r2, r3
 8003724:	490c      	ldr	r1, [pc, #48]	; (8003758 <__NVIC_SetPriority+0x4c>)
 8003726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	440b      	add	r3, r1
 8003730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003734:	e00a      	b.n	800374c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <__NVIC_SetPriority+0x50>)
 800373c:	79fb      	ldrb	r3, [r7, #7]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	3b04      	subs	r3, #4
 8003744:	0112      	lsls	r2, r2, #4
 8003746:	b2d2      	uxtb	r2, r2
 8003748:	440b      	add	r3, r1
 800374a:	761a      	strb	r2, [r3, #24]
}
 800374c:	bf00      	nop
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	e000e100 	.word	0xe000e100
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003760:	b480      	push	{r7}
 8003762:	b089      	sub	sp, #36	; 0x24
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f1c3 0307 	rsb	r3, r3, #7
 800377a:	2b04      	cmp	r3, #4
 800377c:	bf28      	it	cs
 800377e:	2304      	movcs	r3, #4
 8003780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3304      	adds	r3, #4
 8003786:	2b06      	cmp	r3, #6
 8003788:	d902      	bls.n	8003790 <NVIC_EncodePriority+0x30>
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	3b03      	subs	r3, #3
 800378e:	e000      	b.n	8003792 <NVIC_EncodePriority+0x32>
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003794:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	fa02 f303 	lsl.w	r3, r2, r3
 800379e:	43da      	mvns	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	401a      	ands	r2, r3
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa01 f303 	lsl.w	r3, r1, r3
 80037b2:	43d9      	mvns	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	4313      	orrs	r3, r2
         );
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b082      	sub	sp, #8
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ff4c 	bl	800366c <__NVIC_SetPriorityGrouping>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037ee:	f7ff ff61 	bl	80036b4 <__NVIC_GetPriorityGrouping>
 80037f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	6978      	ldr	r0, [r7, #20]
 80037fa:	f7ff ffb1 	bl	8003760 <NVIC_EncodePriority>
 80037fe:	4602      	mov	r2, r0
 8003800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff ff80 	bl	800370c <__NVIC_SetPriority>
}
 800380c:	bf00      	nop
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ff54 	bl	80036d0 <__NVIC_EnableIRQ>
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff fee6 	bl	800360c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e099      	b.n	8003980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800386c:	e00f      	b.n	800388e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800386e:	f7ff fecd 	bl	800360c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b05      	cmp	r3, #5
 800387a:	d908      	bls.n	800388e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2203      	movs	r2, #3
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e078      	b.n	8003980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e8      	bne.n	800386e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_DMA_Init+0x158>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	4313      	orrs	r3, r2
 80038de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d107      	bne.n	80038f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	4313      	orrs	r3, r2
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f023 0307 	bic.w	r3, r3, #7
 800390e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	2b04      	cmp	r3, #4
 8003920:	d117      	bne.n	8003952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00e      	beq.n	8003952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 fa6f 	bl	8003e18 <DMA_CheckFifoParam>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2240      	movs	r2, #64	; 0x40
 8003944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800394e:	2301      	movs	r3, #1
 8003950:	e016      	b.n	8003980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa26 	bl	8003dac <DMA_CalcBaseAndBitshift>
 8003960:	4603      	mov	r3, r0
 8003962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	223f      	movs	r2, #63	; 0x3f
 800396a:	409a      	lsls	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	f010803f 	.word	0xf010803f

0800398c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_DMA_Start_IT+0x26>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e040      	b.n	8003a34 <HAL_DMA_Start_IT+0xa8>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d12f      	bne.n	8003a26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 f9b8 	bl	8003d50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	223f      	movs	r2, #63	; 0x3f
 80039e6:	409a      	lsls	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0216 	orr.w	r2, r2, #22
 80039fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d007      	beq.n	8003a14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0208 	orr.w	r2, r2, #8
 8003a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	e005      	b.n	8003a32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a48:	4b92      	ldr	r3, [pc, #584]	; (8003c94 <HAL_DMA_IRQHandler+0x258>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a92      	ldr	r2, [pc, #584]	; (8003c98 <HAL_DMA_IRQHandler+0x25c>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	0a9b      	lsrs	r3, r3, #10
 8003a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	2208      	movs	r2, #8
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d01a      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0204 	bic.w	r2, r2, #4
 8003a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2208      	movs	r2, #8
 8003a96:	409a      	lsls	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f043 0201 	orr.w	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aac:	2201      	movs	r2, #1
 8003aae:	409a      	lsls	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d012      	beq.n	8003ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00b      	beq.n	8003ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aca:	2201      	movs	r2, #1
 8003acc:	409a      	lsls	r2, r3
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f043 0202 	orr.w	r2, r3, #2
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d012      	beq.n	8003b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b00:	2204      	movs	r2, #4
 8003b02:	409a      	lsls	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	2210      	movs	r2, #16
 8003b1a:	409a      	lsls	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d043      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d03c      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b36:	2210      	movs	r2, #16
 8003b38:	409a      	lsls	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d018      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d108      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d024      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	4798      	blx	r3
 8003b6a:	e01f      	b.n	8003bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01b      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4798      	blx	r3
 8003b7c:	e016      	b.n	8003bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0208 	bic.w	r2, r2, #8
 8003b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 808e 	beq.w	8003cda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8086 	beq.w	8003cda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d136      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0216 	bic.w	r2, r2, #22
 8003bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <HAL_DMA_IRQHandler+0x1da>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0208 	bic.w	r2, r2, #8
 8003c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	223f      	movs	r2, #63	; 0x3f
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d07d      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4798      	blx	r3
        }
        return;
 8003c52:	e078      	b.n	8003d46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d01c      	beq.n	8003c9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d108      	bne.n	8003c82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d030      	beq.n	8003cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
 8003c80:	e02b      	b.n	8003cda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d027      	beq.n	8003cda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
 8003c92:	e022      	b.n	8003cda <HAL_DMA_IRQHandler+0x29e>
 8003c94:	20000000 	.word	0x20000000
 8003c98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10f      	bne.n	8003cca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 0210 	bic.w	r2, r2, #16
 8003cb8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d032      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2205      	movs	r2, #5
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d307      	bcc.n	8003d22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f2      	bne.n	8003d06 <HAL_DMA_IRQHandler+0x2ca>
 8003d20:	e000      	b.n	8003d24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d22:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
 8003d44:	e000      	b.n	8003d48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d46:	bf00      	nop
    }
  }
}
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop

08003d50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d108      	bne.n	8003d90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d8e:	e007      	b.n	8003da0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	3b10      	subs	r3, #16
 8003dbc:	4a14      	ldr	r2, [pc, #80]	; (8003e10 <DMA_CalcBaseAndBitshift+0x64>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dc6:	4a13      	ldr	r2, [pc, #76]	; (8003e14 <DMA_CalcBaseAndBitshift+0x68>)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4413      	add	r3, r2
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	461a      	mov	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d909      	bls.n	8003dee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003de2:	f023 0303 	bic.w	r3, r3, #3
 8003de6:	1d1a      	adds	r2, r3, #4
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	659a      	str	r2, [r3, #88]	; 0x58
 8003dec:	e007      	b.n	8003dfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003df6:	f023 0303 	bic.w	r3, r3, #3
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	aaaaaaab 	.word	0xaaaaaaab
 8003e14:	080285d8 	.word	0x080285d8

08003e18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d11f      	bne.n	8003e72 <DMA_CheckFifoParam+0x5a>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d856      	bhi.n	8003ee6 <DMA_CheckFifoParam+0xce>
 8003e38:	a201      	add	r2, pc, #4	; (adr r2, 8003e40 <DMA_CheckFifoParam+0x28>)
 8003e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3e:	bf00      	nop
 8003e40:	08003e51 	.word	0x08003e51
 8003e44:	08003e63 	.word	0x08003e63
 8003e48:	08003e51 	.word	0x08003e51
 8003e4c:	08003ee7 	.word	0x08003ee7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d046      	beq.n	8003eea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e60:	e043      	b.n	8003eea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e6a:	d140      	bne.n	8003eee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e70:	e03d      	b.n	8003eee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e7a:	d121      	bne.n	8003ec0 <DMA_CheckFifoParam+0xa8>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d837      	bhi.n	8003ef2 <DMA_CheckFifoParam+0xda>
 8003e82:	a201      	add	r2, pc, #4	; (adr r2, 8003e88 <DMA_CheckFifoParam+0x70>)
 8003e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e88:	08003e99 	.word	0x08003e99
 8003e8c:	08003e9f 	.word	0x08003e9f
 8003e90:	08003e99 	.word	0x08003e99
 8003e94:	08003eb1 	.word	0x08003eb1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9c:	e030      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d025      	beq.n	8003ef6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eae:	e022      	b.n	8003ef6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eb8:	d11f      	bne.n	8003efa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ebe:	e01c      	b.n	8003efa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d903      	bls.n	8003ece <DMA_CheckFifoParam+0xb6>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d003      	beq.n	8003ed4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ecc:	e018      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ed2:	e015      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00e      	beq.n	8003efe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee4:	e00b      	b.n	8003efe <DMA_CheckFifoParam+0xe6>
      break;
 8003ee6:	bf00      	nop
 8003ee8:	e00a      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003eea:	bf00      	nop
 8003eec:	e008      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003eee:	bf00      	nop
 8003ef0:	e006      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef2:	bf00      	nop
 8003ef4:	e004      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e002      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003efa:	bf00      	nop
 8003efc:	e000      	b.n	8003f00 <DMA_CheckFifoParam+0xe8>
      break;
 8003efe:	bf00      	nop
    }
  } 
  
  return status; 
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b089      	sub	sp, #36	; 0x24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	61fb      	str	r3, [r7, #28]
 8003f2a:	e16b      	b.n	8004204 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	f040 815a 	bne.w	80041fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d005      	beq.n	8003f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d130      	bne.n	8003fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f98:	2201      	movs	r2, #1
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	091b      	lsrs	r3, r3, #4
 8003fae:	f003 0201 	and.w	r2, r3, #1
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d017      	beq.n	8004000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	2203      	movs	r2, #3
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d123      	bne.n	8004054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	08da      	lsrs	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3208      	adds	r2, #8
 8004014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	220f      	movs	r2, #15
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4013      	ands	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4313      	orrs	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	08da      	lsrs	r2, r3, #3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3208      	adds	r2, #8
 800404e:	69b9      	ldr	r1, [r7, #24]
 8004050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	2203      	movs	r2, #3
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	43db      	mvns	r3, r3
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4013      	ands	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 0203 	and.w	r2, r3, #3
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80b4 	beq.w	80041fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	4b60      	ldr	r3, [pc, #384]	; (800421c <HAL_GPIO_Init+0x30c>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	4a5f      	ldr	r2, [pc, #380]	; (800421c <HAL_GPIO_Init+0x30c>)
 80040a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040a4:	6453      	str	r3, [r2, #68]	; 0x44
 80040a6:	4b5d      	ldr	r3, [pc, #372]	; (800421c <HAL_GPIO_Init+0x30c>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040b2:	4a5b      	ldr	r2, [pc, #364]	; (8004220 <HAL_GPIO_Init+0x310>)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43db      	mvns	r3, r3
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	4013      	ands	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a52      	ldr	r2, [pc, #328]	; (8004224 <HAL_GPIO_Init+0x314>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02b      	beq.n	8004136 <HAL_GPIO_Init+0x226>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a51      	ldr	r2, [pc, #324]	; (8004228 <HAL_GPIO_Init+0x318>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d025      	beq.n	8004132 <HAL_GPIO_Init+0x222>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a50      	ldr	r2, [pc, #320]	; (800422c <HAL_GPIO_Init+0x31c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01f      	beq.n	800412e <HAL_GPIO_Init+0x21e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a4f      	ldr	r2, [pc, #316]	; (8004230 <HAL_GPIO_Init+0x320>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d019      	beq.n	800412a <HAL_GPIO_Init+0x21a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a4e      	ldr	r2, [pc, #312]	; (8004234 <HAL_GPIO_Init+0x324>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_GPIO_Init+0x216>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_GPIO_Init+0x328>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00d      	beq.n	8004122 <HAL_GPIO_Init+0x212>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_GPIO_Init+0x32c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <HAL_GPIO_Init+0x20e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4b      	ldr	r2, [pc, #300]	; (8004240 <HAL_GPIO_Init+0x330>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_GPIO_Init+0x20a>
 8004116:	2307      	movs	r3, #7
 8004118:	e00e      	b.n	8004138 <HAL_GPIO_Init+0x228>
 800411a:	2308      	movs	r3, #8
 800411c:	e00c      	b.n	8004138 <HAL_GPIO_Init+0x228>
 800411e:	2306      	movs	r3, #6
 8004120:	e00a      	b.n	8004138 <HAL_GPIO_Init+0x228>
 8004122:	2305      	movs	r3, #5
 8004124:	e008      	b.n	8004138 <HAL_GPIO_Init+0x228>
 8004126:	2304      	movs	r3, #4
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x228>
 800412a:	2303      	movs	r3, #3
 800412c:	e004      	b.n	8004138 <HAL_GPIO_Init+0x228>
 800412e:	2302      	movs	r3, #2
 8004130:	e002      	b.n	8004138 <HAL_GPIO_Init+0x228>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_GPIO_Init+0x228>
 8004136:	2300      	movs	r3, #0
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f002 0203 	and.w	r2, r2, #3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4093      	lsls	r3, r2
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004148:	4935      	ldr	r1, [pc, #212]	; (8004220 <HAL_GPIO_Init+0x310>)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	3302      	adds	r3, #2
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004156:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <HAL_GPIO_Init+0x334>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800417a:	4a32      	ldr	r2, [pc, #200]	; (8004244 <HAL_GPIO_Init+0x334>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004180:	4b30      	ldr	r3, [pc, #192]	; (8004244 <HAL_GPIO_Init+0x334>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041a4:	4a27      	ldr	r2, [pc, #156]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041aa:	4b26      	ldr	r3, [pc, #152]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041d4:	4b1b      	ldr	r3, [pc, #108]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041f8:	4a12      	ldr	r2, [pc, #72]	; (8004244 <HAL_GPIO_Init+0x334>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3301      	adds	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	f67f ae90 	bls.w	8003f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40021400 	.word	0x40021400
 800423c:	40021800 	.word	0x40021800
 8004240:	40021c00 	.word	0x40021c00
 8004244:	40013c00 	.word	0x40013c00

08004248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	460b      	mov	r3, r1
 8004252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691a      	ldr	r2, [r3, #16]
 8004258:	887b      	ldrh	r3, [r7, #2]
 800425a:	4013      	ands	r3, r2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d002      	beq.n	8004266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	e001      	b.n	800426a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800426a:	7bfb      	ldrb	r3, [r7, #15]
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
 8004284:	4613      	mov	r3, r2
 8004286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004288:	787b      	ldrb	r3, [r7, #1]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800428e:	887a      	ldrh	r2, [r7, #2]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004294:	e003      	b.n	800429e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004296:	887b      	ldrh	r3, [r7, #2]
 8004298:	041a      	lsls	r2, r3, #16
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	619a      	str	r2, [r3, #24]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042b6:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	4013      	ands	r3, r2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d006      	beq.n	80042d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042c2:	4a05      	ldr	r2, [pc, #20]	; (80042d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042c4:	88fb      	ldrh	r3, [r7, #6]
 80042c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fd f878 	bl	80013c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40013c00 	.word	0x40013c00

080042dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e12b      	b.n	8004546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd f910 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0201 	bic.w	r2, r2, #1
 800431e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800432e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800433e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004340:	f000 fd30 	bl	8004da4 <HAL_RCC_GetPCLK1Freq>
 8004344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4a81      	ldr	r2, [pc, #516]	; (8004550 <HAL_I2C_Init+0x274>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d807      	bhi.n	8004360 <HAL_I2C_Init+0x84>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4a80      	ldr	r2, [pc, #512]	; (8004554 <HAL_I2C_Init+0x278>)
 8004354:	4293      	cmp	r3, r2
 8004356:	bf94      	ite	ls
 8004358:	2301      	movls	r3, #1
 800435a:	2300      	movhi	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	e006      	b.n	800436e <HAL_I2C_Init+0x92>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a7d      	ldr	r2, [pc, #500]	; (8004558 <HAL_I2C_Init+0x27c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	bf94      	ite	ls
 8004368:	2301      	movls	r3, #1
 800436a:	2300      	movhi	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e0e7      	b.n	8004546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a78      	ldr	r2, [pc, #480]	; (800455c <HAL_I2C_Init+0x280>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	0c9b      	lsrs	r3, r3, #18
 8004380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	430a      	orrs	r2, r1
 8004394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a6a      	ldr	r2, [pc, #424]	; (8004550 <HAL_I2C_Init+0x274>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d802      	bhi.n	80043b0 <HAL_I2C_Init+0xd4>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	3301      	adds	r3, #1
 80043ae:	e009      	b.n	80043c4 <HAL_I2C_Init+0xe8>
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	4a69      	ldr	r2, [pc, #420]	; (8004560 <HAL_I2C_Init+0x284>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	099b      	lsrs	r3, r3, #6
 80043c2:	3301      	adds	r3, #1
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6812      	ldr	r2, [r2, #0]
 80043c8:	430b      	orrs	r3, r1
 80043ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	495c      	ldr	r1, [pc, #368]	; (8004550 <HAL_I2C_Init+0x274>)
 80043e0:	428b      	cmp	r3, r1
 80043e2:	d819      	bhi.n	8004418 <HAL_I2C_Init+0x13c>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	1e59      	subs	r1, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f2:	1c59      	adds	r1, r3, #1
 80043f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043f8:	400b      	ands	r3, r1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00a      	beq.n	8004414 <HAL_I2C_Init+0x138>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1e59      	subs	r1, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	fbb1 f3f3 	udiv	r3, r1, r3
 800440c:	3301      	adds	r3, #1
 800440e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004412:	e051      	b.n	80044b8 <HAL_I2C_Init+0x1dc>
 8004414:	2304      	movs	r3, #4
 8004416:	e04f      	b.n	80044b8 <HAL_I2C_Init+0x1dc>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d111      	bne.n	8004444 <HAL_I2C_Init+0x168>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1e58      	subs	r0, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf0c      	ite	eq
 800443c:	2301      	moveq	r3, #1
 800443e:	2300      	movne	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e012      	b.n	800446a <HAL_I2C_Init+0x18e>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	1e58      	subs	r0, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6859      	ldr	r1, [r3, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	0099      	lsls	r1, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	fbb0 f3f3 	udiv	r3, r0, r3
 800445a:	3301      	adds	r3, #1
 800445c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004460:	2b00      	cmp	r3, #0
 8004462:	bf0c      	ite	eq
 8004464:	2301      	moveq	r3, #1
 8004466:	2300      	movne	r3, #0
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_I2C_Init+0x196>
 800446e:	2301      	movs	r3, #1
 8004470:	e022      	b.n	80044b8 <HAL_I2C_Init+0x1dc>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10e      	bne.n	8004498 <HAL_I2C_Init+0x1bc>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1e58      	subs	r0, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6859      	ldr	r1, [r3, #4]
 8004482:	460b      	mov	r3, r1
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	440b      	add	r3, r1
 8004488:	fbb0 f3f3 	udiv	r3, r0, r3
 800448c:	3301      	adds	r3, #1
 800448e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004496:	e00f      	b.n	80044b8 <HAL_I2C_Init+0x1dc>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	1e58      	subs	r0, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6859      	ldr	r1, [r3, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	0099      	lsls	r1, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80044ae:	3301      	adds	r3, #1
 80044b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	6809      	ldr	r1, [r1, #0]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69da      	ldr	r2, [r3, #28]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6911      	ldr	r1, [r2, #16]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68d2      	ldr	r2, [r2, #12]
 80044f2:	4311      	orrs	r1, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6812      	ldr	r2, [r2, #0]
 80044f8:	430b      	orrs	r3, r1
 80044fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	000186a0 	.word	0x000186a0
 8004554:	001e847f 	.word	0x001e847f
 8004558:	003d08ff 	.word	0x003d08ff
 800455c:	431bde83 	.word	0x431bde83
 8004560:	10624dd3 	.word	0x10624dd3

08004564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e264      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d075      	beq.n	800466e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004582:	4ba3      	ldr	r3, [pc, #652]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4ba0      	ldr	r3, [pc, #640]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004596:	2b08      	cmp	r3, #8
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b9d      	ldr	r3, [pc, #628]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b99      	ldr	r3, [pc, #612]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e23f      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x74>
 80045ca:	4b91      	ldr	r3, [pc, #580]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a90      	ldr	r2, [pc, #576]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x98>
 80045e2:	4b8b      	ldr	r3, [pc, #556]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a8a      	ldr	r2, [pc, #552]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b88      	ldr	r3, [pc, #544]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a87      	ldr	r2, [pc, #540]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045fc:	4b84      	ldr	r3, [pc, #528]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a83      	ldr	r2, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b81      	ldr	r3, [pc, #516]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a80      	ldr	r2, [pc, #512]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe fff6 	bl	800360c <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004624:	f7fe fff2 	bl	800360c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	; 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e204      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b76      	ldr	r3, [pc, #472]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xc0>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe ffe2 	bl	800360c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464c:	f7fe ffde 	bl	800360c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	; 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1f0      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b6c      	ldr	r3, [pc, #432]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d063      	beq.n	8004742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800467a:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b62      	ldr	r3, [pc, #392]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468e:	2b08      	cmp	r3, #8
 8004690:	d11c      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b5f      	ldr	r3, [pc, #380]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d116      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	4b5c      	ldr	r3, [pc, #368]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e1c4      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b56      	ldr	r3, [pc, #344]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4952      	ldr	r1, [pc, #328]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ca:	e03a      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d4:	4b4f      	ldr	r3, [pc, #316]	; (8004814 <HAL_RCC_OscConfig+0x2b0>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fe ff97 	bl	800360c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fe ff93 	bl	800360c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1a5      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	4b46      	ldr	r3, [pc, #280]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b43      	ldr	r3, [pc, #268]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4940      	ldr	r1, [pc, #256]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]
 8004714:	e015      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004716:	4b3f      	ldr	r3, [pc, #252]	; (8004814 <HAL_RCC_OscConfig+0x2b0>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe ff76 	bl	800360c <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004724:	f7fe ff72 	bl	800360c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e184      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	4b36      	ldr	r3, [pc, #216]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d030      	beq.n	80047b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d016      	beq.n	8004784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_RCC_OscConfig+0x2b4>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fe ff56 	bl	800360c <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004764:	f7fe ff52 	bl	800360c <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e164      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	4b26      	ldr	r3, [pc, #152]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 8004778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
 8004782:	e015      	b.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_RCC_OscConfig+0x2b4>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fe ff3f 	bl	800360c <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004792:	f7fe ff3b 	bl	800360c <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e14d      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a4:	4b1a      	ldr	r3, [pc, #104]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80047a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 80a0 	beq.w	80048fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047be:	2300      	movs	r3, #0
 80047c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80047d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047dc:	6413      	str	r3, [r2, #64]	; 0x40
 80047de:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <HAL_RCC_OscConfig+0x2ac>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ea:	2301      	movs	r3, #1
 80047ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ee:	4b0b      	ldr	r3, [pc, #44]	; (800481c <HAL_RCC_OscConfig+0x2b8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d121      	bne.n	800483e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047fa:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_RCC_OscConfig+0x2b8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a07      	ldr	r2, [pc, #28]	; (800481c <HAL_RCC_OscConfig+0x2b8>)
 8004800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004806:	f7fe ff01 	bl	800360c <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480c:	e011      	b.n	8004832 <HAL_RCC_OscConfig+0x2ce>
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800
 8004814:	42470000 	.word	0x42470000
 8004818:	42470e80 	.word	0x42470e80
 800481c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004820:	f7fe fef4 	bl	800360c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e106      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004832:	4b85      	ldr	r3, [pc, #532]	; (8004a48 <HAL_RCC_OscConfig+0x4e4>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d106      	bne.n	8004854 <HAL_RCC_OscConfig+0x2f0>
 8004846:	4b81      	ldr	r3, [pc, #516]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	4a80      	ldr	r2, [pc, #512]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	6713      	str	r3, [r2, #112]	; 0x70
 8004852:	e01c      	b.n	800488e <HAL_RCC_OscConfig+0x32a>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b05      	cmp	r3, #5
 800485a:	d10c      	bne.n	8004876 <HAL_RCC_OscConfig+0x312>
 800485c:	4b7b      	ldr	r3, [pc, #492]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	4a7a      	ldr	r2, [pc, #488]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 8004862:	f043 0304 	orr.w	r3, r3, #4
 8004866:	6713      	str	r3, [r2, #112]	; 0x70
 8004868:	4b78      	ldr	r3, [pc, #480]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	4a77      	ldr	r2, [pc, #476]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	6713      	str	r3, [r2, #112]	; 0x70
 8004874:	e00b      	b.n	800488e <HAL_RCC_OscConfig+0x32a>
 8004876:	4b75      	ldr	r3, [pc, #468]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	4a74      	ldr	r2, [pc, #464]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 800487c:	f023 0301 	bic.w	r3, r3, #1
 8004880:	6713      	str	r3, [r2, #112]	; 0x70
 8004882:	4b72      	ldr	r3, [pc, #456]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	4a71      	ldr	r2, [pc, #452]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 8004888:	f023 0304 	bic.w	r3, r3, #4
 800488c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d015      	beq.n	80048c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fe feb9 	bl	800360c <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800489e:	f7fe feb5 	bl	800360c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e0c5      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 80048b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0ee      	beq.n	800489e <HAL_RCC_OscConfig+0x33a>
 80048c0:	e014      	b.n	80048ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c2:	f7fe fea3 	bl	800360c <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c8:	e00a      	b.n	80048e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ca:	f7fe fe9f 	bl	800360c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048d8:	4293      	cmp	r3, r2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e0af      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e0:	4b5a      	ldr	r3, [pc, #360]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 80048e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ee      	bne.n	80048ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d105      	bne.n	80048fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048f2:	4b56      	ldr	r3, [pc, #344]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	4a55      	ldr	r2, [pc, #340]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 80048f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f000 809b 	beq.w	8004a3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004908:	4b50      	ldr	r3, [pc, #320]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b08      	cmp	r3, #8
 8004912:	d05c      	beq.n	80049ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d141      	bne.n	80049a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800491c:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <HAL_RCC_OscConfig+0x4ec>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fe fe73 	bl	800360c <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492a:	f7fe fe6f 	bl	800360c <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e081      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493c:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f0      	bne.n	800492a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	431a      	orrs	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	019b      	lsls	r3, r3, #6
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	085b      	lsrs	r3, r3, #1
 8004960:	3b01      	subs	r3, #1
 8004962:	041b      	lsls	r3, r3, #16
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	061b      	lsls	r3, r3, #24
 800496c:	4937      	ldr	r1, [pc, #220]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 800496e:	4313      	orrs	r3, r2
 8004970:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <HAL_RCC_OscConfig+0x4ec>)
 8004974:	2201      	movs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fe fe48 	bl	800360c <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004980:	f7fe fe44 	bl	800360c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e056      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004992:	4b2e      	ldr	r3, [pc, #184]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x41c>
 800499e:	e04e      	b.n	8004a3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a0:	4b2b      	ldr	r3, [pc, #172]	; (8004a50 <HAL_RCC_OscConfig+0x4ec>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a6:	f7fe fe31 	bl	800360c <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fe fe2d 	bl	800360c <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e03f      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c0:	4b22      	ldr	r3, [pc, #136]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x44a>
 80049cc:	e037      	b.n	8004a3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e032      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049da:	4b1c      	ldr	r3, [pc, #112]	; (8004a4c <HAL_RCC_OscConfig+0x4e8>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d028      	beq.n	8004a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d121      	bne.n	8004a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d11a      	bne.n	8004a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d111      	bne.n	8004a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	085b      	lsrs	r3, r3, #1
 8004a22:	3b01      	subs	r3, #1
 8004a24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d107      	bne.n	8004a3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	40007000 	.word	0x40007000
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	42470060 	.word	0x42470060

08004a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0cc      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d90c      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b65      	ldr	r3, [pc, #404]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b63      	ldr	r3, [pc, #396]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0b8      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa8:	4b59      	ldr	r3, [pc, #356]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a58      	ldr	r2, [pc, #352]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac0:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a52      	ldr	r2, [pc, #328]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004acc:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	494d      	ldr	r1, [pc, #308]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d044      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b47      	ldr	r3, [pc, #284]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e06f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3b      	ldr	r3, [pc, #236]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e067      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4934      	ldr	r1, [pc, #208]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fe fd62 	bl	800360c <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fe fd5e 	bl	800360c <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2b      	ldr	r3, [pc, #172]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b25      	ldr	r3, [pc, #148]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d20c      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e032      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4916      	ldr	r1, [pc, #88]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	490e      	ldr	r1, [pc, #56]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bda:	f000 f821 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b0b      	ldr	r3, [pc, #44]	; (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	490a      	ldr	r1, [pc, #40]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	5ccb      	ldrb	r3, [r1, r3]
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fc ff20 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023c00 	.word	0x40023c00
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0800a8f8 	.word	0x0800a8f8
 8004c18:	20000000 	.word	0x20000000
 8004c1c:	20000014 	.word	0x20000014

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	b5b0      	push	{r4, r5, r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c26:	2100      	movs	r1, #0
 8004c28:	6079      	str	r1, [r7, #4]
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	60f9      	str	r1, [r7, #12]
 8004c2e:	2100      	movs	r1, #0
 8004c30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004c32:	2100      	movs	r1, #0
 8004c34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c36:	4952      	ldr	r1, [pc, #328]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c38:	6889      	ldr	r1, [r1, #8]
 8004c3a:	f001 010c 	and.w	r1, r1, #12
 8004c3e:	2908      	cmp	r1, #8
 8004c40:	d00d      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x3e>
 8004c42:	2908      	cmp	r1, #8
 8004c44:	f200 8094 	bhi.w	8004d70 <HAL_RCC_GetSysClockFreq+0x150>
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_RCC_GetSysClockFreq+0x32>
 8004c4c:	2904      	cmp	r1, #4
 8004c4e:	d003      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x38>
 8004c50:	e08e      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c52:	4b4c      	ldr	r3, [pc, #304]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8004c54:	60bb      	str	r3, [r7, #8]
       break;
 8004c56:	e08e      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c58:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c5a:	60bb      	str	r3, [r7, #8]
      break;
 8004c5c:	e08b      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c5e:	4948      	ldr	r1, [pc, #288]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c60:	6849      	ldr	r1, [r1, #4]
 8004c62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004c66:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c68:	4945      	ldr	r1, [pc, #276]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c6a:	6849      	ldr	r1, [r1, #4]
 8004c6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d024      	beq.n	8004cbe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c74:	4942      	ldr	r1, [pc, #264]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c76:	6849      	ldr	r1, [r1, #4]
 8004c78:	0989      	lsrs	r1, r1, #6
 8004c7a:	4608      	mov	r0, r1
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004c84:	f04f 0500 	mov.w	r5, #0
 8004c88:	ea00 0204 	and.w	r2, r0, r4
 8004c8c:	ea01 0305 	and.w	r3, r1, r5
 8004c90:	493d      	ldr	r1, [pc, #244]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8004c92:	fb01 f003 	mul.w	r0, r1, r3
 8004c96:	2100      	movs	r1, #0
 8004c98:	fb01 f102 	mul.w	r1, r1, r2
 8004c9c:	1844      	adds	r4, r0, r1
 8004c9e:	493a      	ldr	r1, [pc, #232]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ca0:	fba2 0101 	umull	r0, r1, r2, r1
 8004ca4:	1863      	adds	r3, r4, r1
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	461a      	mov	r2, r3
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	f7fb fa8e 	bl	80001d0 <__aeabi_uldivmod>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4613      	mov	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e04a      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	099b      	lsrs	r3, r3, #6
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	ea02 0400 	and.w	r4, r2, r0
 8004cd6:	ea03 0501 	and.w	r5, r3, r1
 8004cda:	4620      	mov	r0, r4
 8004cdc:	4629      	mov	r1, r5
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	014b      	lsls	r3, r1, #5
 8004ce8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004cec:	0142      	lsls	r2, r0, #5
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	1b00      	subs	r0, r0, r4
 8004cf4:	eb61 0105 	sbc.w	r1, r1, r5
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	018b      	lsls	r3, r1, #6
 8004d02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d06:	0182      	lsls	r2, r0, #6
 8004d08:	1a12      	subs	r2, r2, r0
 8004d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d0e:	f04f 0000 	mov.w	r0, #0
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	00d9      	lsls	r1, r3, #3
 8004d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d1c:	00d0      	lsls	r0, r2, #3
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	1912      	adds	r2, r2, r4
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	f04f 0000 	mov.w	r0, #0
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	0299      	lsls	r1, r3, #10
 8004d32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d36:	0290      	lsls	r0, r2, #10
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	f7fb fa42 	bl	80001d0 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d54:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <HAL_RCC_GetSysClockFreq+0x160>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	60bb      	str	r3, [r7, #8]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x164>)
 8004d72:	60bb      	str	r3, [r7, #8]
      break;
 8004d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d76:	68bb      	ldr	r3, [r7, #8]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	00f42400 	.word	0x00f42400
 8004d88:	00b71b00 	.word	0x00b71b00

08004d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d92:	681b      	ldr	r3, [r3, #0]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	20000000 	.word	0x20000000

08004da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004da8:	f7ff fff0 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	4b05      	ldr	r3, [pc, #20]	; (8004dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	0a9b      	lsrs	r3, r3, #10
 8004db4:	f003 0307 	and.w	r3, r3, #7
 8004db8:	4903      	ldr	r1, [pc, #12]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dba:	5ccb      	ldrb	r3, [r1, r3]
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	0800a908 	.word	0x0800a908

08004dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dd0:	f7ff ffdc 	bl	8004d8c <HAL_RCC_GetHCLKFreq>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	4b05      	ldr	r3, [pc, #20]	; (8004dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	0b5b      	lsrs	r3, r3, #13
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	4903      	ldr	r1, [pc, #12]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de2:	5ccb      	ldrb	r3, [r1, r3]
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40023800 	.word	0x40023800
 8004df0:	0800a908 	.word	0x0800a908

08004df4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	220f      	movs	r2, #15
 8004e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e04:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_RCC_GetClockConfig+0x5c>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 0203 	and.w	r2, r3, #3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <HAL_RCC_GetClockConfig+0x5c>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <HAL_RCC_GetClockConfig+0x5c>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_RCC_GetClockConfig+0x5c>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	08db      	lsrs	r3, r3, #3
 8004e2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004e36:	4b07      	ldr	r3, [pc, #28]	; (8004e54 <HAL_RCC_GetClockConfig+0x60>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0207 	and.w	r2, r3, #7
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	601a      	str	r2, [r3, #0]
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40023c00 	.word	0x40023c00

08004e58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d105      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d035      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e80:	4b62      	ldr	r3, [pc, #392]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e86:	f7fe fbc1 	bl	800360c <HAL_GetTick>
 8004e8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e8e:	f7fe fbbd 	bl	800360c <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0b0      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea0:	4b5b      	ldr	r3, [pc, #364]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1f0      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	019a      	lsls	r2, r3, #6
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	071b      	lsls	r3, r3, #28
 8004eb8:	4955      	ldr	r1, [pc, #340]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ec0:	4b52      	ldr	r3, [pc, #328]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ec6:	f7fe fba1 	bl	800360c <HAL_GetTick>
 8004eca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ece:	f7fe fb9d 	bl	800360c <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e090      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ee0:	4b4b      	ldr	r3, [pc, #300]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8083 	beq.w	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004efa:	2300      	movs	r3, #0
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	4b44      	ldr	r3, [pc, #272]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	4a43      	ldr	r2, [pc, #268]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6413      	str	r3, [r2, #64]	; 0x40
 8004f0a:	4b41      	ldr	r3, [pc, #260]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f16:	4b3f      	ldr	r3, [pc, #252]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a3e      	ldr	r2, [pc, #248]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f22:	f7fe fb73 	bl	800360c <HAL_GetTick>
 8004f26:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f2a:	f7fe fb6f 	bl	800360c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e062      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f3c:	4b35      	ldr	r3, [pc, #212]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f50:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d02f      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d028      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f66:	4b2a      	ldr	r3, [pc, #168]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f70:	4b29      	ldr	r3, [pc, #164]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f76:	4b28      	ldr	r3, [pc, #160]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004f7c:	4a24      	ldr	r2, [pc, #144]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f82:	4b23      	ldr	r3, [pc, #140]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d114      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f8e:	f7fe fb3d 	bl	800360c <HAL_GetTick>
 8004f92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f94:	e00a      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f96:	f7fe fb39 	bl	800360c <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e02a      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fac:	4b18      	ldr	r3, [pc, #96]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0ee      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc4:	d10d      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fda:	490d      	ldr	r1, [pc, #52]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	608b      	str	r3, [r1, #8]
 8004fe0:	e005      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004fe2:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004fe8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fec:	6093      	str	r3, [r2, #8]
 8004fee:	4b08      	ldr	r3, [pc, #32]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ff0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ffa:	4905      	ldr	r1, [pc, #20]	; (8005010 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	42470068 	.word	0x42470068
 8005010:	40023800 	.word	0x40023800
 8005014:	40007000 	.word	0x40007000
 8005018:	42470e40 	.word	0x42470e40

0800501c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e083      	b.n	8005136 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	7f5b      	ldrb	r3, [r3, #29]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d105      	bne.n	8005044 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f7fc faee 	bl	8001620 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	22ca      	movs	r2, #202	; 0xca
 8005050:	625a      	str	r2, [r3, #36]	; 0x24
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2253      	movs	r2, #83	; 0x53
 8005058:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f897 	bl	800518e <RTC_EnterInitMode>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	22ff      	movs	r2, #255	; 0xff
 800506c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2204      	movs	r2, #4
 8005072:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e05e      	b.n	8005136 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800508a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6899      	ldr	r1, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6919      	ldr	r1, [r3, #16]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	041a      	lsls	r2, r3, #16
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0320 	and.w	r3, r3, #32
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10e      	bne.n	8005104 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f829 	bl	800513e <HAL_RTC_WaitForSynchro>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	22ff      	movs	r2, #255	; 0xff
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2204      	movs	r2, #4
 80050fe:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e018      	b.n	8005136 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005112:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	22ff      	movs	r2, #255	; 0xff
 800512c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005134:	2300      	movs	r3, #0
  }
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005158:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800515a:	f7fe fa57 	bl	800360c <HAL_GetTick>
 800515e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005160:	e009      	b.n	8005176 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005162:	f7fe fa53 	bl	800360c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005170:	d901      	bls.n	8005176 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e007      	b.n	8005186 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ee      	beq.n	8005162 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d119      	bne.n	80051dc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80051b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051b2:	f7fe fa2b 	bl	800360c <HAL_GetTick>
 80051b6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051b8:	e009      	b.n	80051ce <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051ba:	f7fe fa27 	bl	800360c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051c8:	d901      	bls.n	80051ce <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e007      	b.n	80051de <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0ee      	beq.n	80051ba <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e07b      	b.n	80052f0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005208:	d009      	beq.n	800521e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	61da      	str	r2, [r3, #28]
 8005210:	e005      	b.n	800521e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fc fa1b 	bl	8001674 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005254:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	ea42 0103 	orr.w	r1, r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	0c1b      	lsrs	r3, r3, #16
 80052bc:	f003 0104 	and.w	r1, r3, #4
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	f003 0210 	and.w	r2, r3, #16
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69da      	ldr	r2, [r3, #28]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052de:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	4613      	mov	r3, r2
 8005306:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_SPI_Transmit+0x22>
 8005316:	2302      	movs	r3, #2
 8005318:	e126      	b.n	8005568 <HAL_SPI_Transmit+0x270>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005322:	f7fe f973 	bl	800360c <HAL_GetTick>
 8005326:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b01      	cmp	r3, #1
 8005336:	d002      	beq.n	800533e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005338:	2302      	movs	r3, #2
 800533a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800533c:	e10b      	b.n	8005556 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d002      	beq.n	800534a <HAL_SPI_Transmit+0x52>
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800534e:	e102      	b.n	8005556 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2203      	movs	r2, #3
 8005354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	88fa      	ldrh	r2, [r7, #6]
 800536e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005396:	d10f      	bne.n	80053b8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80053b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d007      	beq.n	80053d6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053de:	d14b      	bne.n	8005478 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <HAL_SPI_Transmit+0xf6>
 80053e8:	8afb      	ldrh	r3, [r7, #22]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d13e      	bne.n	800546c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f2:	881a      	ldrh	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	1c9a      	adds	r2, r3, #2
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005412:	e02b      	b.n	800546c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b02      	cmp	r3, #2
 8005420:	d112      	bne.n	8005448 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	881a      	ldrh	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	86da      	strh	r2, [r3, #54]	; 0x36
 8005446:	e011      	b.n	800546c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005448:	f7fe f8e0 	bl	800360c <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d803      	bhi.n	8005460 <HAL_SPI_Transmit+0x168>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545e:	d102      	bne.n	8005466 <HAL_SPI_Transmit+0x16e>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d102      	bne.n	800546c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	77fb      	strb	r3, [r7, #31]
          goto error;
 800546a:	e074      	b.n	8005556 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1ce      	bne.n	8005414 <HAL_SPI_Transmit+0x11c>
 8005476:	e04c      	b.n	8005512 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_SPI_Transmit+0x18e>
 8005480:	8afb      	ldrh	r3, [r7, #22]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d140      	bne.n	8005508 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	330c      	adds	r3, #12
 8005490:	7812      	ldrb	r2, [r2, #0]
 8005492:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	3b01      	subs	r3, #1
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80054ac:	e02c      	b.n	8005508 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d113      	bne.n	80054e4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	330c      	adds	r3, #12
 80054c6:	7812      	ldrb	r2, [r2, #0]
 80054c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80054e2:	e011      	b.n	8005508 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e4:	f7fe f892 	bl	800360c <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d803      	bhi.n	80054fc <HAL_SPI_Transmit+0x204>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054fa:	d102      	bne.n	8005502 <HAL_SPI_Transmit+0x20a>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005506:	e026      	b.n	8005556 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1cd      	bne.n	80054ae <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 fbaa 	bl	8005c70 <SPI_EndRxTxTransaction>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2220      	movs	r2, #32
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	613b      	str	r3, [r7, #16]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e000      	b.n	8005556 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005554:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005566:	7ffb      	ldrb	r3, [r7, #31]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08c      	sub	sp, #48	; 0x30
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800557e:	2301      	movs	r3, #1
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_SPI_TransmitReceive+0x26>
 8005592:	2302      	movs	r3, #2
 8005594:	e18a      	b.n	80058ac <HAL_SPI_TransmitReceive+0x33c>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800559e:	f7fe f835 	bl	800360c <HAL_GetTick>
 80055a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055b4:	887b      	ldrh	r3, [r7, #2]
 80055b6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d00f      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x70>
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055c6:	d107      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <HAL_SPI_TransmitReceive+0x68>
 80055d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d003      	beq.n	80055e0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055d8:	2302      	movs	r3, #2
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055de:	e15b      	b.n	8005898 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x82>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_SPI_TransmitReceive+0x82>
 80055ec:	887b      	ldrh	r3, [r7, #2]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055f8:	e14e      	b.n	8005898 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b04      	cmp	r3, #4
 8005604:	d003      	beq.n	800560e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2205      	movs	r2, #5
 800560a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	887a      	ldrh	r2, [r7, #2]
 800561e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	887a      	ldrh	r2, [r7, #2]
 8005624:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	887a      	ldrh	r2, [r7, #2]
 8005636:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d007      	beq.n	8005662 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005660:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566a:	d178      	bne.n	800575e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <HAL_SPI_TransmitReceive+0x10a>
 8005674:	8b7b      	ldrh	r3, [r7, #26]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d166      	bne.n	8005748 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	881a      	ldrh	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	1c9a      	adds	r2, r3, #2
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800569e:	e053      	b.n	8005748 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d11b      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x176>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d016      	beq.n	80056e6 <HAL_SPI_TransmitReceive+0x176>
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d113      	bne.n	80056e6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c2:	881a      	ldrh	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ce:	1c9a      	adds	r2, r3, #2
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d8:	b29b      	uxth	r3, r3
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d119      	bne.n	8005728 <HAL_SPI_TransmitReceive+0x1b8>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d014      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	b292      	uxth	r2, r2
 800570a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	1c9a      	adds	r2, r3, #2
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005724:	2301      	movs	r3, #1
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005728:	f7fd ff70 	bl	800360c <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005734:	429a      	cmp	r2, r3
 8005736:	d807      	bhi.n	8005748 <HAL_SPI_TransmitReceive+0x1d8>
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800573e:	d003      	beq.n	8005748 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005746:	e0a7      	b.n	8005898 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1a6      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x130>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1a1      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x130>
 800575c:	e07c      	b.n	8005858 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_SPI_TransmitReceive+0x1fc>
 8005766:	8b7b      	ldrh	r3, [r7, #26]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d16b      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	330c      	adds	r3, #12
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005792:	e057      	b.n	8005844 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d11c      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x26c>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d017      	beq.n	80057dc <HAL_SPI_TransmitReceive+0x26c>
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d114      	bne.n	80057dc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	7812      	ldrb	r2, [r2, #0]
 80057be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b29a      	uxth	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d119      	bne.n	800581e <HAL_SPI_TransmitReceive+0x2ae>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d014      	beq.n	800581e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800581a:	2301      	movs	r3, #1
 800581c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800581e:	f7fd fef5 	bl	800360c <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800582a:	429a      	cmp	r2, r3
 800582c:	d803      	bhi.n	8005836 <HAL_SPI_TransmitReceive+0x2c6>
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005834:	d102      	bne.n	800583c <HAL_SPI_TransmitReceive+0x2cc>
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	2b00      	cmp	r3, #0
 800583a:	d103      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005842:	e029      	b.n	8005898 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005848:	b29b      	uxth	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1a2      	bne.n	8005794 <HAL_SPI_TransmitReceive+0x224>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d19d      	bne.n	8005794 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fa07 	bl	8005c70 <SPI_EndRxTxTransaction>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2220      	movs	r2, #32
 8005872:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005874:	e010      	b.n	8005898 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10b      	bne.n	8005896 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	e000      	b.n	8005898 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005896:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3730      	adds	r7, #48	; 0x30
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_SPI_Transmit_DMA+0x20>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e09b      	b.n	8005a0c <HAL_SPI_Transmit_DMA+0x158>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d002      	beq.n	80058ee <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
 80058ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058ec:	e089      	b.n	8005a02 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_SPI_Transmit_DMA+0x46>
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058fe:	e080      	b.n	8005a02 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2203      	movs	r2, #3
 8005904:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	88fa      	ldrh	r2, [r7, #6]
 800591e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005946:	d10f      	bne.n	8005968 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005956:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005966:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596c:	4a29      	ldr	r2, [pc, #164]	; (8005a14 <HAL_SPI_Transmit_DMA+0x160>)
 800596e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	4a28      	ldr	r2, [pc, #160]	; (8005a18 <HAL_SPI_Transmit_DMA+0x164>)
 8005976:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800597c:	4a27      	ldr	r2, [pc, #156]	; (8005a1c <HAL_SPI_Transmit_DMA+0x168>)
 800597e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005984:	2200      	movs	r2, #0
 8005986:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	4619      	mov	r1, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	330c      	adds	r3, #12
 8005998:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800599e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80059a0:	f7fd fff4 	bl	800398c <HAL_DMA_Start_IT>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00c      	beq.n	80059c4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ae:	f043 0210 	orr.w	r2, r3, #16
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80059c2:	e01e      	b.n	8005a02 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ce:	2b40      	cmp	r3, #64	; 0x40
 80059d0:	d007      	beq.n	80059e2 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0220 	orr.w	r2, r2, #32
 80059f0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f042 0202 	orr.w	r2, r2, #2
 8005a00:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	08005b05 	.word	0x08005b05
 8005a18:	08005a5d 	.word	0x08005a5d
 8005a1c:	08005b21 	.word	0x08005b21

08005a20 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6a:	f7fd fdcf 	bl	800360c <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a7e:	d03b      	beq.n	8005af8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0220 	bic.w	r2, r2, #32
 8005a8e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f022 0202 	bic.w	r2, r2, #2
 8005a9e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	2164      	movs	r1, #100	; 0x64
 8005aa4:	6978      	ldr	r0, [r7, #20]
 8005aa6:	f000 f8e3 	bl	8005c70 <SPI_EndRxTxTransaction>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d005      	beq.n	8005abc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab4:	f043 0220 	orr.w	r2, r3, #32
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d003      	beq.n	8005af8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005af0:	6978      	ldr	r0, [r7, #20]
 8005af2:	f7ff ffa9 	bl	8005a48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005af6:	e002      	b.n	8005afe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005af8:	6978      	ldr	r0, [r7, #20]
 8005afa:	f7ff ff91 	bl	8005a20 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f7ff ff8e 	bl	8005a34 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b18:	bf00      	nop
 8005b1a:	3710      	adds	r7, #16
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f022 0203 	bic.w	r2, r2, #3
 8005b3c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b42:	f043 0210 	orr.w	r2, r3, #16
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f7ff ff78 	bl	8005a48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b58:	bf00      	nop
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	603b      	str	r3, [r7, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b70:	f7fd fd4c 	bl	800360c <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	1a9b      	subs	r3, r3, r2
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b80:	f7fd fd44 	bl	800360c <HAL_GetTick>
 8005b84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	015b      	lsls	r3, r3, #5
 8005b8c:	0d1b      	lsrs	r3, r3, #20
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	fb02 f303 	mul.w	r3, r2, r3
 8005b94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b96:	e054      	b.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9e:	d050      	beq.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba0:	f7fd fd34 	bl	800360c <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d902      	bls.n	8005bb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d13d      	bne.n	8005c32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bce:	d111      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd8:	d004      	beq.n	8005be4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	d107      	bne.n	8005bf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfc:	d10f      	bne.n	8005c1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e017      	b.n	8005c62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d19b      	bne.n	8005b98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3720      	adds	r7, #32
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000000 	.word	0x20000000

08005c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b088      	sub	sp, #32
 8005c74:	af02      	add	r7, sp, #8
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <SPI_EndRxTxTransaction+0x7c>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1b      	ldr	r2, [pc, #108]	; (8005cf0 <SPI_EndRxTxTransaction+0x80>)
 8005c82:	fba2 2303 	umull	r2, r3, r2, r3
 8005c86:	0d5b      	lsrs	r3, r3, #21
 8005c88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c8c:	fb02 f303 	mul.w	r3, r2, r3
 8005c90:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c9a:	d112      	bne.n	8005cc2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	2180      	movs	r1, #128	; 0x80
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff ff5a 	bl	8005b60 <SPI_WaitFlagStateUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d016      	beq.n	8005ce0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	f043 0220 	orr.w	r2, r3, #32
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e00f      	b.n	8005ce2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00a      	beq.n	8005cde <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d0f2      	beq.n	8005cc2 <SPI_EndRxTxTransaction+0x52>
 8005cdc:	e000      	b.n	8005ce0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005cde:	bf00      	nop
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	20000000 	.word	0x20000000
 8005cf0:	165e9f81 	.word	0x165e9f81

08005cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e041      	b.n	8005d8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d106      	bne.n	8005d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fb fd7e 	bl	800181c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2202      	movs	r2, #2
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f000 fe34 	bl	80069a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d001      	beq.n	8005dac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e046      	b.n	8005e3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <HAL_TIM_Base_Start+0xb4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d022      	beq.n	8005e04 <HAL_TIM_Base_Start+0x70>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d01d      	beq.n	8005e04 <HAL_TIM_Base_Start+0x70>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <HAL_TIM_Base_Start+0xb8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d018      	beq.n	8005e04 <HAL_TIM_Base_Start+0x70>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <HAL_TIM_Base_Start+0xbc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <HAL_TIM_Base_Start+0x70>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_TIM_Base_Start+0xc0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00e      	beq.n	8005e04 <HAL_TIM_Base_Start+0x70>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <HAL_TIM_Base_Start+0xc4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_TIM_Base_Start+0x70>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <HAL_TIM_Base_Start+0xc8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_TIM_Base_Start+0x70>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <HAL_TIM_Base_Start+0xcc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d111      	bne.n	8005e28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b06      	cmp	r3, #6
 8005e14:	d010      	beq.n	8005e38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e26:	e007      	b.n	8005e38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40010400 	.word	0x40010400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40001800 	.word	0x40001800

08005e64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d001      	beq.n	8005e7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e04e      	b.n	8005f1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a23      	ldr	r2, [pc, #140]	; (8005f28 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d022      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x80>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea6:	d01d      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x80>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <HAL_TIM_Base_Start_IT+0xc8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d018      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x80>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a1e      	ldr	r2, [pc, #120]	; (8005f30 <HAL_TIM_Base_Start_IT+0xcc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x80>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a1c      	ldr	r2, [pc, #112]	; (8005f34 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00e      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x80>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x80>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_TIM_Base_Start_IT+0x80>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a18      	ldr	r2, [pc, #96]	; (8005f40 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d111      	bne.n	8005f08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	689b      	ldr	r3, [r3, #8]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b06      	cmp	r3, #6
 8005ef4:	d010      	beq.n	8005f18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0201 	orr.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f06:	e007      	b.n	8005f18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f042 0201 	orr.w	r2, r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40010400 	.word	0x40010400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40001800 	.word	0x40001800

08005f44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e041      	b.n	8005fda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fb fc9c 	bl	80018a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f000 fd0c 	bl	80069a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <HAL_TIM_PWM_Start+0x24>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	bf14      	ite	ne
 8006000:	2301      	movne	r3, #1
 8006002:	2300      	moveq	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e022      	b.n	800604e <HAL_TIM_PWM_Start+0x6a>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b04      	cmp	r3, #4
 800600c:	d109      	bne.n	8006022 <HAL_TIM_PWM_Start+0x3e>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b01      	cmp	r3, #1
 8006018:	bf14      	ite	ne
 800601a:	2301      	movne	r3, #1
 800601c:	2300      	moveq	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	e015      	b.n	800604e <HAL_TIM_PWM_Start+0x6a>
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b08      	cmp	r3, #8
 8006026:	d109      	bne.n	800603c <HAL_TIM_PWM_Start+0x58>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	bf14      	ite	ne
 8006034:	2301      	movne	r3, #1
 8006036:	2300      	moveq	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	e008      	b.n	800604e <HAL_TIM_PWM_Start+0x6a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b01      	cmp	r3, #1
 8006046:	bf14      	ite	ne
 8006048:	2301      	movne	r3, #1
 800604a:	2300      	moveq	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e07c      	b.n	8006150 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d104      	bne.n	8006066 <HAL_TIM_PWM_Start+0x82>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006064:	e013      	b.n	800608e <HAL_TIM_PWM_Start+0xaa>
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b04      	cmp	r3, #4
 800606a:	d104      	bne.n	8006076 <HAL_TIM_PWM_Start+0x92>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006074:	e00b      	b.n	800608e <HAL_TIM_PWM_Start+0xaa>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b08      	cmp	r3, #8
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xa2>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	e003      	b.n	800608e <HAL_TIM_PWM_Start+0xaa>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2201      	movs	r2, #1
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	4618      	mov	r0, r3
 8006098:	f001 f896 	bl	80071c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2d      	ldr	r2, [pc, #180]	; (8006158 <HAL_TIM_PWM_Start+0x174>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d004      	beq.n	80060b0 <HAL_TIM_PWM_Start+0xcc>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a2c      	ldr	r2, [pc, #176]	; (800615c <HAL_TIM_PWM_Start+0x178>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d101      	bne.n	80060b4 <HAL_TIM_PWM_Start+0xd0>
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_TIM_PWM_Start+0xd2>
 80060b4:	2300      	movs	r3, #0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a22      	ldr	r2, [pc, #136]	; (8006158 <HAL_TIM_PWM_Start+0x174>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d022      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060dc:	d01d      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1f      	ldr	r2, [pc, #124]	; (8006160 <HAL_TIM_PWM_Start+0x17c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d018      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	; (8006164 <HAL_TIM_PWM_Start+0x180>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1c      	ldr	r2, [pc, #112]	; (8006168 <HAL_TIM_PWM_Start+0x184>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d00e      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a16      	ldr	r2, [pc, #88]	; (800615c <HAL_TIM_PWM_Start+0x178>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d009      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a18      	ldr	r2, [pc, #96]	; (800616c <HAL_TIM_PWM_Start+0x188>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d004      	beq.n	800611a <HAL_TIM_PWM_Start+0x136>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a16      	ldr	r2, [pc, #88]	; (8006170 <HAL_TIM_PWM_Start+0x18c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d111      	bne.n	800613e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2b06      	cmp	r3, #6
 800612a:	d010      	beq.n	800614e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0201 	orr.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800613c:	e007      	b.n	800614e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f042 0201 	orr.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800614e:	2300      	movs	r3, #0
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40010000 	.word	0x40010000
 800615c:	40010400 	.word	0x40010400
 8006160:	40000400 	.word	0x40000400
 8006164:	40000800 	.word	0x40000800
 8006168:	40000c00 	.word	0x40000c00
 800616c:	40014000 	.word	0x40014000
 8006170:	40001800 	.word	0x40001800

08006174 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f001 f81e 	bl	80071c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a2e      	ldr	r2, [pc, #184]	; (800624c <HAL_TIM_PWM_Stop+0xd8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_TIM_PWM_Stop+0x2c>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2d      	ldr	r2, [pc, #180]	; (8006250 <HAL_TIM_PWM_Stop+0xdc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d101      	bne.n	80061a4 <HAL_TIM_PWM_Stop+0x30>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <HAL_TIM_PWM_Stop+0x32>
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d017      	beq.n	80061da <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80061b4:	4013      	ands	r3, r2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10f      	bne.n	80061da <HAL_TIM_PWM_Stop+0x66>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6a1a      	ldr	r2, [r3, #32]
 80061c0:	f240 4344 	movw	r3, #1092	; 0x444
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <HAL_TIM_PWM_Stop+0x66>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6a1a      	ldr	r2, [r3, #32]
 80061e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80061e4:	4013      	ands	r3, r2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10f      	bne.n	800620a <HAL_TIM_PWM_Stop+0x96>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6a1a      	ldr	r2, [r3, #32]
 80061f0:	f240 4344 	movw	r3, #1092	; 0x444
 80061f4:	4013      	ands	r3, r2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d107      	bne.n	800620a <HAL_TIM_PWM_Stop+0x96>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0201 	bic.w	r2, r2, #1
 8006208:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_TIM_PWM_Stop+0xa6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006218:	e013      	b.n	8006242 <HAL_TIM_PWM_Stop+0xce>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b04      	cmp	r3, #4
 800621e:	d104      	bne.n	800622a <HAL_TIM_PWM_Stop+0xb6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006228:	e00b      	b.n	8006242 <HAL_TIM_PWM_Stop+0xce>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d104      	bne.n	800623a <HAL_TIM_PWM_Stop+0xc6>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006238:	e003      	b.n	8006242 <HAL_TIM_PWM_Stop+0xce>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3708      	adds	r7, #8
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40010000 	.word	0x40010000
 8006250:	40010400 	.word	0x40010400

08006254 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e041      	b.n	80062ea <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fb fb36 	bl	80018ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	3304      	adds	r3, #4
 8006290:	4619      	mov	r1, r3
 8006292:	4610      	mov	r0, r2
 8006294:	f000 fb84 	bl	80069a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b02      	cmp	r3, #2
 8006306:	d122      	bne.n	800634e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b02      	cmp	r3, #2
 8006314:	d11b      	bne.n	800634e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f06f 0202 	mvn.w	r2, #2
 800631e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fb14 	bl	8006962 <HAL_TIM_IC_CaptureCallback>
 800633a:	e005      	b.n	8006348 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fb06 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fb17 	bl	8006976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b04      	cmp	r3, #4
 800635a:	d122      	bne.n	80063a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b04      	cmp	r3, #4
 8006368:	d11b      	bne.n	80063a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f06f 0204 	mvn.w	r2, #4
 8006372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006384:	2b00      	cmp	r3, #0
 8006386:	d003      	beq.n	8006390 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 faea 	bl	8006962 <HAL_TIM_IC_CaptureCallback>
 800638e:	e005      	b.n	800639c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fadc 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 faed 	bl	8006976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f003 0308 	and.w	r3, r3, #8
 80063ac:	2b08      	cmp	r3, #8
 80063ae:	d122      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b08      	cmp	r3, #8
 80063bc:	d11b      	bne.n	80063f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f06f 0208 	mvn.w	r2, #8
 80063c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2204      	movs	r2, #4
 80063cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fac0 	bl	8006962 <HAL_TIM_IC_CaptureCallback>
 80063e2:	e005      	b.n	80063f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fab2 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fac3 	bl	8006976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b10      	cmp	r3, #16
 8006402:	d122      	bne.n	800644a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f003 0310 	and.w	r3, r3, #16
 800640e:	2b10      	cmp	r3, #16
 8006410:	d11b      	bne.n	800644a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f06f 0210 	mvn.w	r2, #16
 800641a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2208      	movs	r2, #8
 8006420:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 fa96 	bl	8006962 <HAL_TIM_IC_CaptureCallback>
 8006436:	e005      	b.n	8006444 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fa88 	bl	800694e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa99 	bl	8006976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d10e      	bne.n	8006476 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b01      	cmp	r3, #1
 8006464:	d107      	bne.n	8006476 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f06f 0201 	mvn.w	r2, #1
 800646e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7fb f815 	bl	80014a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b80      	cmp	r3, #128	; 0x80
 8006482:	d10e      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648e:	2b80      	cmp	r3, #128	; 0x80
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800649a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 ff91 	bl	80073c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	691b      	ldr	r3, [r3, #16]
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d10e      	bne.n	80064ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d107      	bne.n	80064ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fa5e 	bl	800698a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d10e      	bne.n	80064fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d107      	bne.n	80064fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f06f 0220 	mvn.w	r2, #32
 80064f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 ff5b 	bl	80073b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064fa:	bf00      	nop
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006502:	b580      	push	{r7, lr}
 8006504:	b086      	sub	sp, #24
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006518:	2b01      	cmp	r3, #1
 800651a:	d101      	bne.n	8006520 <HAL_TIM_IC_ConfigChannel+0x1e>
 800651c:	2302      	movs	r3, #2
 800651e:	e088      	b.n	8006632 <HAL_TIM_IC_ConfigChannel+0x130>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d11b      	bne.n	8006566 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6819      	ldr	r1, [r3, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f000 fc7f 	bl	8006e40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699a      	ldr	r2, [r3, #24]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 020c 	bic.w	r2, r2, #12
 8006550:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6999      	ldr	r1, [r3, #24]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	619a      	str	r2, [r3, #24]
 8006564:	e060      	b.n	8006628 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2b04      	cmp	r3, #4
 800656a:	d11c      	bne.n	80065a6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f000 fd03 	bl	8006f86 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699a      	ldr	r2, [r3, #24]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800658e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6999      	ldr	r1, [r3, #24]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	021a      	lsls	r2, r3, #8
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	619a      	str	r2, [r3, #24]
 80065a4:	e040      	b.n	8006628 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d11b      	bne.n	80065e4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6819      	ldr	r1, [r3, #0]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	f000 fd50 	bl	8007060 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	69da      	ldr	r2, [r3, #28]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 020c 	bic.w	r2, r2, #12
 80065ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69d9      	ldr	r1, [r3, #28]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	689a      	ldr	r2, [r3, #8]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	61da      	str	r2, [r3, #28]
 80065e2:	e021      	b.n	8006628 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b0c      	cmp	r3, #12
 80065e8:	d11c      	bne.n	8006624 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6818      	ldr	r0, [r3, #0]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	6819      	ldr	r1, [r3, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f000 fd6d 	bl	80070d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69da      	ldr	r2, [r3, #28]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800660c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	69d9      	ldr	r1, [r3, #28]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	021a      	lsls	r2, r3, #8
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	61da      	str	r2, [r3, #28]
 8006622:	e001      	b.n	8006628 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006648:	2300      	movs	r3, #0
 800664a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006656:	2302      	movs	r3, #2
 8006658:	e0ae      	b.n	80067b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b0c      	cmp	r3, #12
 8006666:	f200 809f 	bhi.w	80067a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800666a:	a201      	add	r2, pc, #4	; (adr r2, 8006670 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006670:	080066a5 	.word	0x080066a5
 8006674:	080067a9 	.word	0x080067a9
 8006678:	080067a9 	.word	0x080067a9
 800667c:	080067a9 	.word	0x080067a9
 8006680:	080066e5 	.word	0x080066e5
 8006684:	080067a9 	.word	0x080067a9
 8006688:	080067a9 	.word	0x080067a9
 800668c:	080067a9 	.word	0x080067a9
 8006690:	08006727 	.word	0x08006727
 8006694:	080067a9 	.word	0x080067a9
 8006698:	080067a9 	.word	0x080067a9
 800669c:	080067a9 	.word	0x080067a9
 80066a0:	08006767 	.word	0x08006767
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fa18 	bl	8006ae0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0208 	orr.w	r2, r2, #8
 80066be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0204 	bic.w	r2, r2, #4
 80066ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6999      	ldr	r1, [r3, #24]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	619a      	str	r2, [r3, #24]
      break;
 80066e2:	e064      	b.n	80067ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fa68 	bl	8006bc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6999      	ldr	r1, [r3, #24]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	021a      	lsls	r2, r3, #8
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	619a      	str	r2, [r3, #24]
      break;
 8006724:	e043      	b.n	80067ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fabd 	bl	8006cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0208 	orr.w	r2, r2, #8
 8006740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0204 	bic.w	r2, r2, #4
 8006750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69d9      	ldr	r1, [r3, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	61da      	str	r2, [r3, #28]
      break;
 8006764:	e023      	b.n	80067ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fb11 	bl	8006d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69d9      	ldr	r1, [r3, #28]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	021a      	lsls	r2, r3, #8
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	61da      	str	r2, [r3, #28]
      break;
 80067a6:	e002      	b.n	80067ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
      break;
 80067ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d101      	bne.n	80067dc <HAL_TIM_ConfigClockSource+0x1c>
 80067d8:	2302      	movs	r3, #2
 80067da:	e0b4      	b.n	8006946 <HAL_TIM_ConfigClockSource+0x186>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006814:	d03e      	beq.n	8006894 <HAL_TIM_ConfigClockSource+0xd4>
 8006816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681a:	f200 8087 	bhi.w	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800681e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006822:	f000 8086 	beq.w	8006932 <HAL_TIM_ConfigClockSource+0x172>
 8006826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682a:	d87f      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800682c:	2b70      	cmp	r3, #112	; 0x70
 800682e:	d01a      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0xa6>
 8006830:	2b70      	cmp	r3, #112	; 0x70
 8006832:	d87b      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 8006834:	2b60      	cmp	r3, #96	; 0x60
 8006836:	d050      	beq.n	80068da <HAL_TIM_ConfigClockSource+0x11a>
 8006838:	2b60      	cmp	r3, #96	; 0x60
 800683a:	d877      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800683c:	2b50      	cmp	r3, #80	; 0x50
 800683e:	d03c      	beq.n	80068ba <HAL_TIM_ConfigClockSource+0xfa>
 8006840:	2b50      	cmp	r3, #80	; 0x50
 8006842:	d873      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	d058      	beq.n	80068fa <HAL_TIM_ConfigClockSource+0x13a>
 8006848:	2b40      	cmp	r3, #64	; 0x40
 800684a:	d86f      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800684c:	2b30      	cmp	r3, #48	; 0x30
 800684e:	d064      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x15a>
 8006850:	2b30      	cmp	r3, #48	; 0x30
 8006852:	d86b      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 8006854:	2b20      	cmp	r3, #32
 8006856:	d060      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x15a>
 8006858:	2b20      	cmp	r3, #32
 800685a:	d867      	bhi.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
 800685c:	2b00      	cmp	r3, #0
 800685e:	d05c      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x15a>
 8006860:	2b10      	cmp	r3, #16
 8006862:	d05a      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x15a>
 8006864:	e062      	b.n	800692c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6818      	ldr	r0, [r3, #0]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6899      	ldr	r1, [r3, #8]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f000 fc87 	bl	8007188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	609a      	str	r2, [r3, #8]
      break;
 8006892:	e04f      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6899      	ldr	r1, [r3, #8]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f000 fc70 	bl	8007188 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689a      	ldr	r2, [r3, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068b6:	609a      	str	r2, [r3, #8]
      break;
 80068b8:	e03c      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6859      	ldr	r1, [r3, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f000 fb2e 	bl	8006f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2150      	movs	r1, #80	; 0x50
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fc3d 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 80068d8:	e02c      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	6859      	ldr	r1, [r3, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	461a      	mov	r2, r3
 80068e8:	f000 fb8a 	bl	8007000 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2160      	movs	r1, #96	; 0x60
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fc2d 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 80068f8:	e01c      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	6859      	ldr	r1, [r3, #4]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	461a      	mov	r2, r3
 8006908:	f000 fb0e 	bl	8006f28 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2140      	movs	r1, #64	; 0x40
 8006912:	4618      	mov	r0, r3
 8006914:	f000 fc1d 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 8006918:	e00c      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4619      	mov	r1, r3
 8006924:	4610      	mov	r0, r2
 8006926:	f000 fc14 	bl	8007152 <TIM_ITRx_SetConfig>
      break;
 800692a:	e003      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	e000      	b.n	8006934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006944:	7bfb      	ldrb	r3, [r7, #15]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800696a:	bf00      	nop
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
	...

080069a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a40      	ldr	r2, [pc, #256]	; (8006ab4 <TIM_Base_SetConfig+0x114>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d013      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069be:	d00f      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3d      	ldr	r2, [pc, #244]	; (8006ab8 <TIM_Base_SetConfig+0x118>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a3c      	ldr	r2, [pc, #240]	; (8006abc <TIM_Base_SetConfig+0x11c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d007      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a3b      	ldr	r2, [pc, #236]	; (8006ac0 <TIM_Base_SetConfig+0x120>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d003      	beq.n	80069e0 <TIM_Base_SetConfig+0x40>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a3a      	ldr	r2, [pc, #232]	; (8006ac4 <TIM_Base_SetConfig+0x124>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d108      	bne.n	80069f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a2f      	ldr	r2, [pc, #188]	; (8006ab4 <TIM_Base_SetConfig+0x114>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d02b      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a00:	d027      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a2c      	ldr	r2, [pc, #176]	; (8006ab8 <TIM_Base_SetConfig+0x118>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d023      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2b      	ldr	r2, [pc, #172]	; (8006abc <TIM_Base_SetConfig+0x11c>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01f      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a2a      	ldr	r2, [pc, #168]	; (8006ac0 <TIM_Base_SetConfig+0x120>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01b      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a29      	ldr	r2, [pc, #164]	; (8006ac4 <TIM_Base_SetConfig+0x124>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d017      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a28      	ldr	r2, [pc, #160]	; (8006ac8 <TIM_Base_SetConfig+0x128>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d013      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a27      	ldr	r2, [pc, #156]	; (8006acc <TIM_Base_SetConfig+0x12c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00f      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a26      	ldr	r2, [pc, #152]	; (8006ad0 <TIM_Base_SetConfig+0x130>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00b      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a25      	ldr	r2, [pc, #148]	; (8006ad4 <TIM_Base_SetConfig+0x134>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d007      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a24      	ldr	r2, [pc, #144]	; (8006ad8 <TIM_Base_SetConfig+0x138>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d003      	beq.n	8006a52 <TIM_Base_SetConfig+0xb2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a23      	ldr	r2, [pc, #140]	; (8006adc <TIM_Base_SetConfig+0x13c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d108      	bne.n	8006a64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	; (8006ab4 <TIM_Base_SetConfig+0x114>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d003      	beq.n	8006a98 <TIM_Base_SetConfig+0xf8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a0c      	ldr	r2, [pc, #48]	; (8006ac4 <TIM_Base_SetConfig+0x124>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d103      	bne.n	8006aa0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	615a      	str	r2, [r3, #20]
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40000400 	.word	0x40000400
 8006abc:	40000800 	.word	0x40000800
 8006ac0:	40000c00 	.word	0x40000c00
 8006ac4:	40010400 	.word	0x40010400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800
 8006ad4:	40001800 	.word	0x40001800
 8006ad8:	40001c00 	.word	0x40001c00
 8006adc:	40002000 	.word	0x40002000

08006ae0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f023 0201 	bic.w	r2, r3, #1
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 0302 	bic.w	r3, r3, #2
 8006b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a20      	ldr	r2, [pc, #128]	; (8006bb8 <TIM_OC1_SetConfig+0xd8>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d003      	beq.n	8006b44 <TIM_OC1_SetConfig+0x64>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1f      	ldr	r2, [pc, #124]	; (8006bbc <TIM_OC1_SetConfig+0xdc>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d10c      	bne.n	8006b5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f023 0308 	bic.w	r3, r3, #8
 8006b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f023 0304 	bic.w	r3, r3, #4
 8006b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <TIM_OC1_SetConfig+0xd8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d003      	beq.n	8006b6e <TIM_OC1_SetConfig+0x8e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <TIM_OC1_SetConfig+0xdc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d111      	bne.n	8006b92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	621a      	str	r2, [r3, #32]
}
 8006bac:	bf00      	nop
 8006bae:	371c      	adds	r7, #28
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40010000 	.word	0x40010000
 8006bbc:	40010400 	.word	0x40010400

08006bc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a1b      	ldr	r3, [r3, #32]
 8006bce:	f023 0210 	bic.w	r2, r3, #16
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	021b      	lsls	r3, r3, #8
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f023 0320 	bic.w	r3, r3, #32
 8006c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a22      	ldr	r2, [pc, #136]	; (8006ca4 <TIM_OC2_SetConfig+0xe4>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d003      	beq.n	8006c28 <TIM_OC2_SetConfig+0x68>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a21      	ldr	r2, [pc, #132]	; (8006ca8 <TIM_OC2_SetConfig+0xe8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d10d      	bne.n	8006c44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <TIM_OC2_SetConfig+0xe4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d003      	beq.n	8006c54 <TIM_OC2_SetConfig+0x94>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a16      	ldr	r2, [pc, #88]	; (8006ca8 <TIM_OC2_SetConfig+0xe8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d113      	bne.n	8006c7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	695b      	ldr	r3, [r3, #20]
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	621a      	str	r2, [r3, #32]
}
 8006c96:	bf00      	nop
 8006c98:	371c      	adds	r7, #28
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400

08006cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f023 0303 	bic.w	r3, r3, #3
 8006ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <TIM_OC3_SetConfig+0xe0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_OC3_SetConfig+0x66>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a20      	ldr	r2, [pc, #128]	; (8006d90 <TIM_OC3_SetConfig+0xe4>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d10d      	bne.n	8006d2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a16      	ldr	r2, [pc, #88]	; (8006d8c <TIM_OC3_SetConfig+0xe0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d003      	beq.n	8006d3e <TIM_OC3_SetConfig+0x92>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a15      	ldr	r2, [pc, #84]	; (8006d90 <TIM_OC3_SetConfig+0xe4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d113      	bne.n	8006d66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	011b      	lsls	r3, r3, #4
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	621a      	str	r2, [r3, #32]
}
 8006d80:	bf00      	nop
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400

08006d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a1b      	ldr	r3, [r3, #32]
 8006da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	021b      	lsls	r3, r3, #8
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	031b      	lsls	r3, r3, #12
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a12      	ldr	r2, [pc, #72]	; (8006e38 <TIM_OC4_SetConfig+0xa4>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_OC4_SetConfig+0x68>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a11      	ldr	r2, [pc, #68]	; (8006e3c <TIM_OC4_SetConfig+0xa8>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d109      	bne.n	8006e10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	019b      	lsls	r3, r3, #6
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	697a      	ldr	r2, [r7, #20]
 8006e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	685a      	ldr	r2, [r3, #4]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	40010000 	.word	0x40010000
 8006e3c:	40010400 	.word	0x40010400

08006e40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	f023 0201 	bic.w	r2, r3, #1
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4a28      	ldr	r2, [pc, #160]	; (8006f0c <TIM_TI1_SetConfig+0xcc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01b      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x66>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e74:	d017      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x66>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4a25      	ldr	r2, [pc, #148]	; (8006f10 <TIM_TI1_SetConfig+0xd0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x66>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	4a24      	ldr	r2, [pc, #144]	; (8006f14 <TIM_TI1_SetConfig+0xd4>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00f      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x66>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	4a23      	ldr	r2, [pc, #140]	; (8006f18 <TIM_TI1_SetConfig+0xd8>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00b      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x66>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4a22      	ldr	r2, [pc, #136]	; (8006f1c <TIM_TI1_SetConfig+0xdc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x66>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	4a21      	ldr	r2, [pc, #132]	; (8006f20 <TIM_TI1_SetConfig+0xe0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d003      	beq.n	8006ea6 <TIM_TI1_SetConfig+0x66>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	4a20      	ldr	r2, [pc, #128]	; (8006f24 <TIM_TI1_SetConfig+0xe4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d101      	bne.n	8006eaa <TIM_TI1_SetConfig+0x6a>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e000      	b.n	8006eac <TIM_TI1_SetConfig+0x6c>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	e003      	b.n	8006eca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	011b      	lsls	r3, r3, #4
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f023 030a 	bic.w	r3, r3, #10
 8006ee4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	f003 030a 	and.w	r3, r3, #10
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40010000 	.word	0x40010000
 8006f10:	40000400 	.word	0x40000400
 8006f14:	40000800 	.word	0x40000800
 8006f18:	40000c00 	.word	0x40000c00
 8006f1c:	40010400 	.word	0x40010400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	40001800 	.word	0x40001800

08006f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	60f8      	str	r0, [r7, #12]
 8006f30:	60b9      	str	r1, [r7, #8]
 8006f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6a1b      	ldr	r3, [r3, #32]
 8006f3e:	f023 0201 	bic.w	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	011b      	lsls	r3, r3, #4
 8006f58:	693a      	ldr	r2, [r7, #16]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f023 030a 	bic.w	r3, r3, #10
 8006f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	621a      	str	r2, [r3, #32]
}
 8006f7a:	bf00      	nop
 8006f7c:	371c      	adds	r7, #28
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b087      	sub	sp, #28
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
 8006f92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f023 0210 	bic.w	r2, r3, #16
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	699b      	ldr	r3, [r3, #24]
 8006fa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	021b      	lsls	r3, r3, #8
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	031b      	lsls	r3, r3, #12
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006fd8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	011b      	lsls	r3, r3, #4
 8006fde:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	697a      	ldr	r2, [r7, #20]
 8006fec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	621a      	str	r2, [r3, #32]
}
 8006ff4:	bf00      	nop
 8006ff6:	371c      	adds	r7, #28
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	f023 0210 	bic.w	r2, r3, #16
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800702a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	031b      	lsls	r3, r3, #12
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800703c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	011b      	lsls	r3, r3, #4
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4313      	orrs	r3, r2
 8007046:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	621a      	str	r2, [r3, #32]
}
 8007054:	bf00      	nop
 8007056:	371c      	adds	r7, #28
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
 800706c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	f023 0303 	bic.w	r3, r3, #3
 800708c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800709c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80070b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	4313      	orrs	r3, r2
 80070be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	621a      	str	r2, [r3, #32]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]
 80070e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007104:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	697a      	ldr	r2, [r7, #20]
 800710c:	4313      	orrs	r3, r2
 800710e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007116:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	031b      	lsls	r3, r3, #12
 800711c:	b29b      	uxth	r3, r3
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	4313      	orrs	r3, r2
 8007122:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800712a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	031b      	lsls	r3, r3, #12
 8007130:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	697a      	ldr	r2, [r7, #20]
 800713e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007168:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	f043 0307 	orr.w	r3, r3, #7
 8007174:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	609a      	str	r2, [r3, #8]
}
 800717c:	bf00      	nop
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	021a      	lsls	r2, r3, #8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	609a      	str	r2, [r3, #8]
}
 80071bc:	bf00      	nop
 80071be:	371c      	adds	r7, #28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 031f 	and.w	r3, r3, #31
 80071da:	2201      	movs	r2, #1
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1a      	ldr	r2, [r3, #32]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	43db      	mvns	r3, r3
 80071ea:	401a      	ands	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007200:	431a      	orrs	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007228:	2302      	movs	r3, #2
 800722a:	e05a      	b.n	80072e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007252:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a21      	ldr	r2, [pc, #132]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d022      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007278:	d01d      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a1d      	ldr	r2, [pc, #116]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1a      	ldr	r2, [pc, #104]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a18      	ldr	r2, [pc, #96]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a17      	ldr	r2, [pc, #92]	; (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a15      	ldr	r2, [pc, #84]	; (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d10c      	bne.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40010000 	.word	0x40010000
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800
 80072fc:	40000c00 	.word	0x40000c00
 8007300:	40010400 	.word	0x40010400
 8007304:	40014000 	.word	0x40014000
 8007308:	40001800 	.word	0x40001800

0800730c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007324:	2302      	movs	r3, #2
 8007326:	e03d      	b.n	80073a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	4313      	orrs	r3, r2
 800734a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4313      	orrs	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	4313      	orrs	r3, r2
 8007382:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <__NVIC_SetPriority>:
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	4603      	mov	r3, r0
 80073e0:	6039      	str	r1, [r7, #0]
 80073e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	db0a      	blt.n	8007402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	490c      	ldr	r1, [pc, #48]	; (8007424 <__NVIC_SetPriority+0x4c>)
 80073f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073f6:	0112      	lsls	r2, r2, #4
 80073f8:	b2d2      	uxtb	r2, r2
 80073fa:	440b      	add	r3, r1
 80073fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007400:	e00a      	b.n	8007418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	b2da      	uxtb	r2, r3
 8007406:	4908      	ldr	r1, [pc, #32]	; (8007428 <__NVIC_SetPriority+0x50>)
 8007408:	79fb      	ldrb	r3, [r7, #7]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	3b04      	subs	r3, #4
 8007410:	0112      	lsls	r2, r2, #4
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	440b      	add	r3, r1
 8007416:	761a      	strb	r2, [r3, #24]
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	e000e100 	.word	0xe000e100
 8007428:	e000ed00 	.word	0xe000ed00

0800742c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <SysTick_Handler+0x1c>)
 8007432:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007434:	f001 ff84 	bl	8009340 <xTaskGetSchedulerState>
 8007438:	4603      	mov	r3, r0
 800743a:	2b01      	cmp	r3, #1
 800743c:	d001      	beq.n	8007442 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800743e:	f002 fd6b 	bl	8009f18 <xPortSysTickHandler>
  }
}
 8007442:	bf00      	nop
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	e000e010 	.word	0xe000e010

0800744c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007450:	2100      	movs	r1, #0
 8007452:	f06f 0004 	mvn.w	r0, #4
 8007456:	f7ff ffbf 	bl	80073d8 <__NVIC_SetPriority>
#endif
}
 800745a:	bf00      	nop
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007466:	f3ef 8305 	mrs	r3, IPSR
 800746a:	603b      	str	r3, [r7, #0]
  return(result);
 800746c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007472:	f06f 0305 	mvn.w	r3, #5
 8007476:	607b      	str	r3, [r7, #4]
 8007478:	e00c      	b.n	8007494 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800747a:	4b0a      	ldr	r3, [pc, #40]	; (80074a4 <osKernelInitialize+0x44>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d105      	bne.n	800748e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007482:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <osKernelInitialize+0x44>)
 8007484:	2201      	movs	r2, #1
 8007486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007488:	2300      	movs	r3, #0
 800748a:	607b      	str	r3, [r7, #4]
 800748c:	e002      	b.n	8007494 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800748e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007494:	687b      	ldr	r3, [r7, #4]
}
 8007496:	4618      	mov	r0, r3
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	200000b0 	.word	0x200000b0

080074a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074ae:	f3ef 8305 	mrs	r3, IPSR
 80074b2:	603b      	str	r3, [r7, #0]
  return(result);
 80074b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80074ba:	f06f 0305 	mvn.w	r3, #5
 80074be:	607b      	str	r3, [r7, #4]
 80074c0:	e010      	b.n	80074e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80074c2:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <osKernelStart+0x48>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d109      	bne.n	80074de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80074ca:	f7ff ffbf 	bl	800744c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80074ce:	4b08      	ldr	r3, [pc, #32]	; (80074f0 <osKernelStart+0x48>)
 80074d0:	2202      	movs	r2, #2
 80074d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80074d4:	f001 fad8 	bl	8008a88 <vTaskStartScheduler>
      stat = osOK;
 80074d8:	2300      	movs	r3, #0
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	e002      	b.n	80074e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80074de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80074e4:	687b      	ldr	r3, [r7, #4]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200000b0 	.word	0x200000b0

080074f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b08e      	sub	sp, #56	; 0x38
 80074f8:	af04      	add	r7, sp, #16
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	60b9      	str	r1, [r7, #8]
 80074fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007500:	2300      	movs	r3, #0
 8007502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007504:	f3ef 8305 	mrs	r3, IPSR
 8007508:	617b      	str	r3, [r7, #20]
  return(result);
 800750a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800750c:	2b00      	cmp	r3, #0
 800750e:	d17e      	bne.n	800760e <osThreadNew+0x11a>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d07b      	beq.n	800760e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007516:	2380      	movs	r3, #128	; 0x80
 8007518:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800751a:	2318      	movs	r3, #24
 800751c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800751e:	2300      	movs	r3, #0
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007526:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d045      	beq.n	80075ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <osThreadNew+0x48>
        name = attr->name;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d008      	beq.n	8007562 <osThreadNew+0x6e>
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	2b38      	cmp	r3, #56	; 0x38
 8007554:	d805      	bhi.n	8007562 <osThreadNew+0x6e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <osThreadNew+0x72>
        return (NULL);
 8007562:	2300      	movs	r3, #0
 8007564:	e054      	b.n	8007610 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	089b      	lsrs	r3, r3, #2
 8007574:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00e      	beq.n	800759c <osThreadNew+0xa8>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	2bbb      	cmp	r3, #187	; 0xbb
 8007584:	d90a      	bls.n	800759c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800758a:	2b00      	cmp	r3, #0
 800758c:	d006      	beq.n	800759c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d002      	beq.n	800759c <osThreadNew+0xa8>
        mem = 1;
 8007596:	2301      	movs	r3, #1
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	e010      	b.n	80075be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10c      	bne.n	80075be <osThreadNew+0xca>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d108      	bne.n	80075be <osThreadNew+0xca>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <osThreadNew+0xca>
          mem = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	e001      	b.n	80075be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d110      	bne.n	80075e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80075cc:	9202      	str	r2, [sp, #8]
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	6a3a      	ldr	r2, [r7, #32]
 80075d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 fff6 	bl	80085cc <xTaskCreateStatic>
 80075e0:	4603      	mov	r3, r0
 80075e2:	613b      	str	r3, [r7, #16]
 80075e4:	e013      	b.n	800760e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80075e6:	69bb      	ldr	r3, [r7, #24]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d110      	bne.n	800760e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	f107 0310 	add.w	r3, r7, #16
 80075f4:	9301      	str	r3, [sp, #4]
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f001 f841 	bl	8008686 <xTaskCreate>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d001      	beq.n	800760e <osThreadNew+0x11a>
            hTask = NULL;
 800760a:	2300      	movs	r3, #0
 800760c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800760e:	693b      	ldr	r3, [r7, #16]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3728      	adds	r7, #40	; 0x28
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007620:	f3ef 8305 	mrs	r3, IPSR
 8007624:	60bb      	str	r3, [r7, #8]
  return(result);
 8007626:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007628:	2b00      	cmp	r3, #0
 800762a:	d003      	beq.n	8007634 <osDelay+0x1c>
    stat = osErrorISR;
 800762c:	f06f 0305 	mvn.w	r3, #5
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	e007      	b.n	8007644 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <osDelay+0x2c>
      vTaskDelay(ticks);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f001 f9ee 	bl	8008a20 <vTaskDelay>
    }
  }

  return (stat);
 8007644:	68fb      	ldr	r3, [r7, #12]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800764e:	b580      	push	{r7, lr}
 8007650:	b08a      	sub	sp, #40	; 0x28
 8007652:	af02      	add	r7, sp, #8
 8007654:	60f8      	str	r0, [r7, #12]
 8007656:	60b9      	str	r1, [r7, #8]
 8007658:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800765a:	2300      	movs	r3, #0
 800765c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800765e:	f3ef 8305 	mrs	r3, IPSR
 8007662:	613b      	str	r3, [r7, #16]
  return(result);
 8007664:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007666:	2b00      	cmp	r3, #0
 8007668:	d15f      	bne.n	800772a <osMessageQueueNew+0xdc>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d05c      	beq.n	800772a <osMessageQueueNew+0xdc>
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d059      	beq.n	800772a <osMessageQueueNew+0xdc>
    mem = -1;
 8007676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800767a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d029      	beq.n	80076d6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d012      	beq.n	80076b0 <osMessageQueueNew+0x62>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	2b4f      	cmp	r3, #79	; 0x4f
 8007690:	d90e      	bls.n	80076b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	68b9      	ldr	r1, [r7, #8]
 80076a2:	fb01 f303 	mul.w	r3, r1, r3
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d302      	bcc.n	80076b0 <osMessageQueueNew+0x62>
        mem = 1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	e014      	b.n	80076da <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d110      	bne.n	80076da <osMessageQueueNew+0x8c>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10c      	bne.n	80076da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d108      	bne.n	80076da <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d104      	bne.n	80076da <osMessageQueueNew+0x8c>
          mem = 0;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	e001      	b.n	80076da <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d10b      	bne.n	80076f8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	691a      	ldr	r2, [r3, #16]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	2100      	movs	r1, #0
 80076ea:	9100      	str	r1, [sp, #0]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f000 fa2e 	bl	8007b50 <xQueueGenericCreateStatic>
 80076f4:	61f8      	str	r0, [r7, #28]
 80076f6:	e008      	b.n	800770a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d105      	bne.n	800770a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80076fe:	2200      	movs	r2, #0
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f000 fa9c 	bl	8007c40 <xQueueGenericCreate>
 8007708:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00c      	beq.n	800772a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <osMessageQueueNew+0xd0>
        name = attr->name;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e001      	b.n	8007722 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007722:	6979      	ldr	r1, [r7, #20]
 8007724:	69f8      	ldr	r0, [r7, #28]
 8007726:	f000 fef3 	bl	8008510 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800772a:	69fb      	ldr	r3, [r7, #28]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3720      	adds	r7, #32
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007748:	2300      	movs	r3, #0
 800774a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800774c:	f3ef 8305 	mrs	r3, IPSR
 8007750:	617b      	str	r3, [r7, #20]
  return(result);
 8007752:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007754:	2b00      	cmp	r3, #0
 8007756:	d028      	beq.n	80077aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <osMessageQueuePut+0x36>
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <osMessageQueuePut+0x36>
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800776a:	f06f 0303 	mvn.w	r3, #3
 800776e:	61fb      	str	r3, [r7, #28]
 8007770:	e038      	b.n	80077e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8007772:	2300      	movs	r3, #0
 8007774:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007776:	f107 0210 	add.w	r2, r7, #16
 800777a:	2300      	movs	r3, #0
 800777c:	68b9      	ldr	r1, [r7, #8]
 800777e:	69b8      	ldr	r0, [r7, #24]
 8007780:	f000 fbba 	bl	8007ef8 <xQueueGenericSendFromISR>
 8007784:	4603      	mov	r3, r0
 8007786:	2b01      	cmp	r3, #1
 8007788:	d003      	beq.n	8007792 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800778a:	f06f 0302 	mvn.w	r3, #2
 800778e:	61fb      	str	r3, [r7, #28]
 8007790:	e028      	b.n	80077e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d025      	beq.n	80077e4 <osMessageQueuePut+0xb0>
 8007798:	4b15      	ldr	r3, [pc, #84]	; (80077f0 <osMessageQueuePut+0xbc>)
 800779a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800779e:	601a      	str	r2, [r3, #0]
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	e01c      	b.n	80077e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <osMessageQueuePut+0x82>
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d103      	bne.n	80077be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80077b6:	f06f 0303 	mvn.w	r3, #3
 80077ba:	61fb      	str	r3, [r7, #28]
 80077bc:	e012      	b.n	80077e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80077be:	2300      	movs	r3, #0
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	69b8      	ldr	r0, [r7, #24]
 80077c6:	f000 fa99 	bl	8007cfc <xQueueGenericSend>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d009      	beq.n	80077e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80077d6:	f06f 0301 	mvn.w	r3, #1
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	e002      	b.n	80077e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80077de:	f06f 0302 	mvn.w	r3, #2
 80077e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80077e4:	69fb      	ldr	r3, [r7, #28]
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3720      	adds	r7, #32
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	607a      	str	r2, [r7, #4]
 8007800:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800780a:	f3ef 8305 	mrs	r3, IPSR
 800780e:	617b      	str	r3, [r7, #20]
  return(result);
 8007810:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8007812:	2b00      	cmp	r3, #0
 8007814:	d028      	beq.n	8007868 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d005      	beq.n	8007828 <osMessageQueueGet+0x34>
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d002      	beq.n	8007828 <osMessageQueueGet+0x34>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007828:	f06f 0303 	mvn.w	r3, #3
 800782c:	61fb      	str	r3, [r7, #28]
 800782e:	e037      	b.n	80078a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007830:	2300      	movs	r3, #0
 8007832:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007834:	f107 0310 	add.w	r3, r7, #16
 8007838:	461a      	mov	r2, r3
 800783a:	68b9      	ldr	r1, [r7, #8]
 800783c:	69b8      	ldr	r0, [r7, #24]
 800783e:	f000 fcd7 	bl	80081f0 <xQueueReceiveFromISR>
 8007842:	4603      	mov	r3, r0
 8007844:	2b01      	cmp	r3, #1
 8007846:	d003      	beq.n	8007850 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007848:	f06f 0302 	mvn.w	r3, #2
 800784c:	61fb      	str	r3, [r7, #28]
 800784e:	e027      	b.n	80078a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d024      	beq.n	80078a0 <osMessageQueueGet+0xac>
 8007856:	4b15      	ldr	r3, [pc, #84]	; (80078ac <osMessageQueueGet+0xb8>)
 8007858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	f3bf 8f6f 	isb	sy
 8007866:	e01b      	b.n	80078a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <osMessageQueueGet+0x80>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007874:	f06f 0303 	mvn.w	r3, #3
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	e011      	b.n	80078a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	69b8      	ldr	r0, [r7, #24]
 8007882:	f000 fbd5 	bl	8008030 <xQueueReceive>
 8007886:	4603      	mov	r3, r0
 8007888:	2b01      	cmp	r3, #1
 800788a:	d009      	beq.n	80078a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007892:	f06f 0301 	mvn.w	r3, #1
 8007896:	61fb      	str	r3, [r7, #28]
 8007898:	e002      	b.n	80078a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800789a:	f06f 0302 	mvn.w	r3, #2
 800789e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80078a0:	69fb      	ldr	r3, [r7, #28]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4a07      	ldr	r2, [pc, #28]	; (80078dc <vApplicationGetIdleTaskMemory+0x2c>)
 80078c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	4a06      	ldr	r2, [pc, #24]	; (80078e0 <vApplicationGetIdleTaskMemory+0x30>)
 80078c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2280      	movs	r2, #128	; 0x80
 80078cc:	601a      	str	r2, [r3, #0]
}
 80078ce:	bf00      	nop
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop
 80078dc:	200000b4 	.word	0x200000b4
 80078e0:	20000170 	.word	0x20000170

080078e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	4a07      	ldr	r2, [pc, #28]	; (8007910 <vApplicationGetTimerTaskMemory+0x2c>)
 80078f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	4a06      	ldr	r2, [pc, #24]	; (8007914 <vApplicationGetTimerTaskMemory+0x30>)
 80078fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007902:	601a      	str	r2, [r3, #0]
}
 8007904:	bf00      	nop
 8007906:	3714      	adds	r7, #20
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr
 8007910:	20000370 	.word	0x20000370
 8007914:	2000042c 	.word	0x2000042c

08007918 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f103 0208 	add.w	r2, r3, #8
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007930:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f103 0208 	add.w	r2, r3, #8
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f103 0208 	add.w	r2, r3, #8
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007972:	b480      	push	{r7}
 8007974:	b085      	sub	sp, #20
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	689a      	ldr	r2, [r3, #8]
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	601a      	str	r2, [r3, #0]
}
 80079ae:	bf00      	nop
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079ba:	b480      	push	{r7}
 80079bc:	b085      	sub	sp, #20
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079d0:	d103      	bne.n	80079da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	60fb      	str	r3, [r7, #12]
 80079d8:	e00c      	b.n	80079f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3308      	adds	r3, #8
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e002      	b.n	80079e8 <vListInsert+0x2e>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d2f6      	bcs.n	80079e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	1c5a      	adds	r2, r3, #1
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	601a      	str	r2, [r3, #0]
}
 8007a20:	bf00      	nop
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6892      	ldr	r2, [r2, #8]
 8007a42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6852      	ldr	r2, [r2, #4]
 8007a4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d103      	bne.n	8007a60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	1e5a      	subs	r2, r3, #1
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007aaa:	f002 f9a3 	bl	8009df4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab6:	68f9      	ldr	r1, [r7, #12]
 8007ab8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aba:	fb01 f303 	mul.w	r3, r1, r3
 8007abe:	441a      	add	r2, r3
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ada:	3b01      	subs	r3, #1
 8007adc:	68f9      	ldr	r1, [r7, #12]
 8007ade:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ae0:	fb01 f303 	mul.w	r3, r1, r3
 8007ae4:	441a      	add	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	22ff      	movs	r2, #255	; 0xff
 8007aee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	22ff      	movs	r2, #255	; 0xff
 8007af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d114      	bne.n	8007b2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d01a      	beq.n	8007b3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3310      	adds	r3, #16
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 fa55 	bl	8008fbc <xTaskRemoveFromEventList>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d012      	beq.n	8007b3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b18:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <xQueueGenericReset+0xcc>)
 8007b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	e009      	b.n	8007b3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3310      	adds	r3, #16
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fef2 	bl	8007918 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3324      	adds	r3, #36	; 0x24
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff feed 	bl	8007918 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b3e:	f002 f989 	bl	8009e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b42:	2301      	movs	r3, #1
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	e000ed04 	.word	0xe000ed04

08007b50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08e      	sub	sp, #56	; 0x38
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10a      	bne.n	8007b96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b84:	f383 8811 	msr	BASEPRI, r3
 8007b88:	f3bf 8f6f 	isb	sy
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b92:	bf00      	nop
 8007b94:	e7fe      	b.n	8007b94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <xQueueGenericCreateStatic+0x52>
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <xQueueGenericCreateStatic+0x56>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <xQueueGenericCreateStatic+0x58>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	623b      	str	r3, [r7, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d102      	bne.n	8007bce <xQueueGenericCreateStatic+0x7e>
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <xQueueGenericCreateStatic+0x82>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e000      	b.n	8007bd4 <xQueueGenericCreateStatic+0x84>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10a      	bne.n	8007bee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	61fb      	str	r3, [r7, #28]
}
 8007bea:	bf00      	nop
 8007bec:	e7fe      	b.n	8007bec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bee:	2350      	movs	r3, #80	; 0x50
 8007bf0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2b50      	cmp	r3, #80	; 0x50
 8007bf6:	d00a      	beq.n	8007c0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfc:	f383 8811 	msr	BASEPRI, r3
 8007c00:	f3bf 8f6f 	isb	sy
 8007c04:	f3bf 8f4f 	dsb	sy
 8007c08:	61bb      	str	r3, [r7, #24]
}
 8007c0a:	bf00      	nop
 8007c0c:	e7fe      	b.n	8007c0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007c0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00d      	beq.n	8007c36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f000 f83f 	bl	8007cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3730      	adds	r7, #48	; 0x30
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08a      	sub	sp, #40	; 0x28
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10a      	bne.n	8007c6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	613b      	str	r3, [r7, #16]
}
 8007c66:	bf00      	nop
 8007c68:	e7fe      	b.n	8007c68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	3350      	adds	r3, #80	; 0x50
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f002 f9dd 	bl	800a038 <pvPortMalloc>
 8007c7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d011      	beq.n	8007caa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	3350      	adds	r3, #80	; 0x50
 8007c8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c98:	79fa      	ldrb	r2, [r7, #7]
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f805 	bl	8007cb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007caa:	69bb      	ldr	r3, [r7, #24]
	}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3720      	adds	r7, #32
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d103      	bne.n	8007cd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	601a      	str	r2, [r3, #0]
 8007cce:	e002      	b.n	8007cd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	69b8      	ldr	r0, [r7, #24]
 8007ce6:	f7ff fecb 	bl	8007a80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	78fa      	ldrb	r2, [r7, #3]
 8007cee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08e      	sub	sp, #56	; 0x38
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]
 8007d08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <xQueueGenericSend+0x32>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d103      	bne.n	8007d3c <xQueueGenericSend+0x40>
 8007d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <xQueueGenericSend+0x44>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e000      	b.n	8007d42 <xQueueGenericSend+0x46>
 8007d40:	2300      	movs	r3, #0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10a      	bne.n	8007d5c <xQueueGenericSend+0x60>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d58:	bf00      	nop
 8007d5a:	e7fe      	b.n	8007d5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d103      	bne.n	8007d6a <xQueueGenericSend+0x6e>
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <xQueueGenericSend+0x72>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e000      	b.n	8007d70 <xQueueGenericSend+0x74>
 8007d6e:	2300      	movs	r3, #0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <xQueueGenericSend+0x8e>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	623b      	str	r3, [r7, #32]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d8a:	f001 fad9 	bl	8009340 <xTaskGetSchedulerState>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <xQueueGenericSend+0x9e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <xQueueGenericSend+0xa2>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <xQueueGenericSend+0xa4>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xQueueGenericSend+0xbe>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	61fb      	str	r3, [r7, #28]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dba:	f002 f81b 	bl	8009df4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d302      	bcc.n	8007dd0 <xQueueGenericSend+0xd4>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d129      	bne.n	8007e24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	68b9      	ldr	r1, [r7, #8]
 8007dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd6:	f000 fa8b 	bl	80082f0 <prvCopyDataToQueue>
 8007dda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d010      	beq.n	8007e06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	3324      	adds	r3, #36	; 0x24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f001 f8e7 	bl	8008fbc <xTaskRemoveFromEventList>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d013      	beq.n	8007e1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007df4:	4b3f      	ldr	r3, [pc, #252]	; (8007ef4 <xQueueGenericSend+0x1f8>)
 8007df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	e00a      	b.n	8007e1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d007      	beq.n	8007e1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e0c:	4b39      	ldr	r3, [pc, #228]	; (8007ef4 <xQueueGenericSend+0x1f8>)
 8007e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e1c:	f002 f81a 	bl	8009e54 <vPortExitCritical>
				return pdPASS;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e063      	b.n	8007eec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d103      	bne.n	8007e32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e2a:	f002 f813 	bl	8009e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e05c      	b.n	8007eec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e38:	f107 0314 	add.w	r3, r7, #20
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f001 f921 	bl	8009084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e42:	2301      	movs	r3, #1
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e46:	f002 f805 	bl	8009e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e4a:	f000 fe8d 	bl	8008b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e4e:	f001 ffd1 	bl	8009df4 <vPortEnterCritical>
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e58:	b25b      	sxtb	r3, r3
 8007e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e5e:	d103      	bne.n	8007e68 <xQueueGenericSend+0x16c>
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e6e:	b25b      	sxtb	r3, r3
 8007e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e74:	d103      	bne.n	8007e7e <xQueueGenericSend+0x182>
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e7e:	f001 ffe9 	bl	8009e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e82:	1d3a      	adds	r2, r7, #4
 8007e84:	f107 0314 	add.w	r3, r7, #20
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f001 f910 	bl	80090b0 <xTaskCheckForTimeOut>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d124      	bne.n	8007ee0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e98:	f000 fb22 	bl	80084e0 <prvIsQueueFull>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d018      	beq.n	8007ed4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea4:	3310      	adds	r3, #16
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f001 f836 	bl	8008f1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007eb2:	f000 faad 	bl	8008410 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007eb6:	f000 fe65 	bl	8008b84 <xTaskResumeAll>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f47f af7c 	bne.w	8007dba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ec2:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <xQueueGenericSend+0x1f8>)
 8007ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	e772      	b.n	8007dba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ed6:	f000 fa9b 	bl	8008410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007eda:	f000 fe53 	bl	8008b84 <xTaskResumeAll>
 8007ede:	e76c      	b.n	8007dba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ee2:	f000 fa95 	bl	8008410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ee6:	f000 fe4d 	bl	8008b84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007eea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3738      	adds	r7, #56	; 0x38
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	e000ed04 	.word	0xe000ed04

08007ef8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b090      	sub	sp, #64	; 0x40
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10a      	bne.n	8007f26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d103      	bne.n	8007f34 <xQueueGenericSendFromISR+0x3c>
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <xQueueGenericSendFromISR+0x40>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <xQueueGenericSendFromISR+0x42>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d103      	bne.n	8007f62 <xQueueGenericSendFromISR+0x6a>
 8007f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d101      	bne.n	8007f66 <xQueueGenericSendFromISR+0x6e>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <xQueueGenericSendFromISR+0x70>
 8007f66:	2300      	movs	r3, #0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10a      	bne.n	8007f82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	623b      	str	r3, [r7, #32]
}
 8007f7e:	bf00      	nop
 8007f80:	e7fe      	b.n	8007f80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f82:	f002 f819 	bl	8009fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f86:	f3ef 8211 	mrs	r2, BASEPRI
 8007f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	61fa      	str	r2, [r7, #28]
 8007f9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fa0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d302      	bcc.n	8007fb4 <xQueueGenericSendFromISR+0xbc>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d12f      	bne.n	8008014 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fc4:	683a      	ldr	r2, [r7, #0]
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fca:	f000 f991 	bl	80082f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fd6:	d112      	bne.n	8007ffe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d016      	beq.n	800800e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	3324      	adds	r3, #36	; 0x24
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 ffe9 	bl	8008fbc <xTaskRemoveFromEventList>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00e      	beq.n	800800e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e007      	b.n	800800e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ffe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008002:	3301      	adds	r3, #1
 8008004:	b2db      	uxtb	r3, r3
 8008006:	b25a      	sxtb	r2, r3
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800800e:	2301      	movs	r3, #1
 8008010:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008012:	e001      	b.n	8008018 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008014:	2300      	movs	r3, #0
 8008016:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800801a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008022:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008026:	4618      	mov	r0, r3
 8008028:	3740      	adds	r7, #64	; 0x40
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08c      	sub	sp, #48	; 0x30
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800803c:	2300      	movs	r3, #0
 800803e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10a      	bne.n	8008060 <xQueueReceive+0x30>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	623b      	str	r3, [r7, #32]
}
 800805c:	bf00      	nop
 800805e:	e7fe      	b.n	800805e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d103      	bne.n	800806e <xQueueReceive+0x3e>
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <xQueueReceive+0x42>
 800806e:	2301      	movs	r3, #1
 8008070:	e000      	b.n	8008074 <xQueueReceive+0x44>
 8008072:	2300      	movs	r3, #0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10a      	bne.n	800808e <xQueueReceive+0x5e>
	__asm volatile
 8008078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807c:	f383 8811 	msr	BASEPRI, r3
 8008080:	f3bf 8f6f 	isb	sy
 8008084:	f3bf 8f4f 	dsb	sy
 8008088:	61fb      	str	r3, [r7, #28]
}
 800808a:	bf00      	nop
 800808c:	e7fe      	b.n	800808c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800808e:	f001 f957 	bl	8009340 <xTaskGetSchedulerState>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <xQueueReceive+0x6e>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <xQueueReceive+0x72>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <xQueueReceive+0x74>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <xQueueReceive+0x8e>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	61bb      	str	r3, [r7, #24]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080be:	f001 fe99 	bl	8009df4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d01f      	beq.n	800810e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d2:	f000 f977 	bl	80083c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	1e5a      	subs	r2, r3, #1
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00f      	beq.n	8008106 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	3310      	adds	r3, #16
 80080ea:	4618      	mov	r0, r3
 80080ec:	f000 ff66 	bl	8008fbc <xTaskRemoveFromEventList>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d007      	beq.n	8008106 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080f6:	4b3d      	ldr	r3, [pc, #244]	; (80081ec <xQueueReceive+0x1bc>)
 80080f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008106:	f001 fea5 	bl	8009e54 <vPortExitCritical>
				return pdPASS;
 800810a:	2301      	movs	r3, #1
 800810c:	e069      	b.n	80081e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d103      	bne.n	800811c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008114:	f001 fe9e 	bl	8009e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008118:	2300      	movs	r3, #0
 800811a:	e062      	b.n	80081e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800811c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008122:	f107 0310 	add.w	r3, r7, #16
 8008126:	4618      	mov	r0, r3
 8008128:	f000 ffac 	bl	8009084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800812c:	2301      	movs	r3, #1
 800812e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008130:	f001 fe90 	bl	8009e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008134:	f000 fd18 	bl	8008b68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008138:	f001 fe5c 	bl	8009df4 <vPortEnterCritical>
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008142:	b25b      	sxtb	r3, r3
 8008144:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008148:	d103      	bne.n	8008152 <xQueueReceive+0x122>
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008158:	b25b      	sxtb	r3, r3
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815e:	d103      	bne.n	8008168 <xQueueReceive+0x138>
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	2200      	movs	r2, #0
 8008164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008168:	f001 fe74 	bl	8009e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800816c:	1d3a      	adds	r2, r7, #4
 800816e:	f107 0310 	add.w	r3, r7, #16
 8008172:	4611      	mov	r1, r2
 8008174:	4618      	mov	r0, r3
 8008176:	f000 ff9b 	bl	80090b0 <xTaskCheckForTimeOut>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	d123      	bne.n	80081c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008182:	f000 f997 	bl	80084b4 <prvIsQueueEmpty>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d017      	beq.n	80081bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818e:	3324      	adds	r3, #36	; 0x24
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fec1 	bl	8008f1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800819a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800819c:	f000 f938 	bl	8008410 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081a0:	f000 fcf0 	bl	8008b84 <xTaskResumeAll>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d189      	bne.n	80080be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081aa:	4b10      	ldr	r3, [pc, #64]	; (80081ec <xQueueReceive+0x1bc>)
 80081ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	e780      	b.n	80080be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081be:	f000 f927 	bl	8008410 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081c2:	f000 fcdf 	bl	8008b84 <xTaskResumeAll>
 80081c6:	e77a      	b.n	80080be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ca:	f000 f921 	bl	8008410 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081ce:	f000 fcd9 	bl	8008b84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081d4:	f000 f96e 	bl	80084b4 <prvIsQueueEmpty>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f43f af6f 	beq.w	80080be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3730      	adds	r7, #48	; 0x30
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	e000ed04 	.word	0xe000ed04

080081f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08e      	sub	sp, #56	; 0x38
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10a      	bne.n	800821c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820a:	f383 8811 	msr	BASEPRI, r3
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f3bf 8f4f 	dsb	sy
 8008216:	623b      	str	r3, [r7, #32]
}
 8008218:	bf00      	nop
 800821a:	e7fe      	b.n	800821a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d103      	bne.n	800822a <xQueueReceiveFromISR+0x3a>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <xQueueReceiveFromISR+0x3e>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <xQueueReceiveFromISR+0x40>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	61fb      	str	r3, [r7, #28]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800824a:	f001 feb5 	bl	8009fb8 <vPortValidateInterruptPriority>
	__asm volatile
 800824e:	f3ef 8211 	mrs	r2, BASEPRI
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	61ba      	str	r2, [r7, #24]
 8008264:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008266:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008268:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d02f      	beq.n	80082d6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800827c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008280:	68b9      	ldr	r1, [r7, #8]
 8008282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008284:	f000 f89e 	bl	80083c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	1e5a      	subs	r2, r3, #1
 800828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008290:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008294:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008298:	d112      	bne.n	80082c0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d016      	beq.n	80082d0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a4:	3310      	adds	r3, #16
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fe88 	bl	8008fbc <xTaskRemoveFromEventList>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00e      	beq.n	80082d0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00b      	beq.n	80082d0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	601a      	str	r2, [r3, #0]
 80082be:	e007      	b.n	80082d0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80082c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80082c4:	3301      	adds	r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	b25a      	sxtb	r2, r3
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80082d0:	2301      	movs	r3, #1
 80082d2:	637b      	str	r3, [r7, #52]	; 0x34
 80082d4:	e001      	b.n	80082da <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	637b      	str	r3, [r7, #52]	; 0x34
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	f383 8811 	msr	BASEPRI, r3
}
 80082e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3738      	adds	r7, #56	; 0x38
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80082fc:	2300      	movs	r3, #0
 80082fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10d      	bne.n	800832a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d14d      	bne.n	80083b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	4618      	mov	r0, r3
 800831c:	f001 f82e 	bl	800937c <xTaskPriorityDisinherit>
 8008320:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	609a      	str	r2, [r3, #8]
 8008328:	e043      	b.n	80083b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d119      	bne.n	8008364 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6858      	ldr	r0, [r3, #4]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008338:	461a      	mov	r2, r3
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	f002 f8a2 	bl	800a484 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008348:	441a      	add	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	429a      	cmp	r2, r3
 8008358:	d32b      	bcc.n	80083b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	605a      	str	r2, [r3, #4]
 8008362:	e026      	b.n	80083b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68d8      	ldr	r0, [r3, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836c:	461a      	mov	r2, r3
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	f002 f888 	bl	800a484 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837c:	425b      	negs	r3, r3
 800837e:	441a      	add	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	429a      	cmp	r2, r3
 800838e:	d207      	bcs.n	80083a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008398:	425b      	negs	r3, r3
 800839a:	441a      	add	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d105      	bne.n	80083b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	3b01      	subs	r3, #1
 80083b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	1c5a      	adds	r2, r3, #1
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083ba:	697b      	ldr	r3, [r7, #20]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3718      	adds	r7, #24
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d018      	beq.n	8008408 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68da      	ldr	r2, [r3, #12]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	441a      	add	r2, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68da      	ldr	r2, [r3, #12]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d303      	bcc.n	80083f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68d9      	ldr	r1, [r3, #12]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	461a      	mov	r2, r3
 8008402:	6838      	ldr	r0, [r7, #0]
 8008404:	f002 f83e 	bl	800a484 <memcpy>
	}
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008418:	f001 fcec 	bl	8009df4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008422:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008424:	e011      	b.n	800844a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842a:	2b00      	cmp	r3, #0
 800842c:	d012      	beq.n	8008454 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3324      	adds	r3, #36	; 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fdc2 	bl	8008fbc <xTaskRemoveFromEventList>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800843e:	f000 fe99 	bl	8009174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	3b01      	subs	r3, #1
 8008446:	b2db      	uxtb	r3, r3
 8008448:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800844a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dce9      	bgt.n	8008426 <prvUnlockQueue+0x16>
 8008452:	e000      	b.n	8008456 <prvUnlockQueue+0x46>
					break;
 8008454:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	22ff      	movs	r2, #255	; 0xff
 800845a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800845e:	f001 fcf9 	bl	8009e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008462:	f001 fcc7 	bl	8009df4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800846e:	e011      	b.n	8008494 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d012      	beq.n	800849e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	3310      	adds	r3, #16
 800847c:	4618      	mov	r0, r3
 800847e:	f000 fd9d 	bl	8008fbc <xTaskRemoveFromEventList>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008488:	f000 fe74 	bl	8009174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800848c:	7bbb      	ldrb	r3, [r7, #14]
 800848e:	3b01      	subs	r3, #1
 8008490:	b2db      	uxtb	r3, r3
 8008492:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	dce9      	bgt.n	8008470 <prvUnlockQueue+0x60>
 800849c:	e000      	b.n	80084a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800849e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	22ff      	movs	r2, #255	; 0xff
 80084a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80084a8:	f001 fcd4 	bl	8009e54 <vPortExitCritical>
}
 80084ac:	bf00      	nop
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084bc:	f001 fc9a 	bl	8009df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084c8:	2301      	movs	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	e001      	b.n	80084d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084d2:	f001 fcbf 	bl	8009e54 <vPortExitCritical>

	return xReturn;
 80084d6:	68fb      	ldr	r3, [r7, #12]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084e8:	f001 fc84 	bl	8009df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d102      	bne.n	80084fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
 80084fc:	e001      	b.n	8008502 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008502:	f001 fca7 	bl	8009e54 <vPortExitCritical>

	return xReturn;
 8008506:	68fb      	ldr	r3, [r7, #12]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800851a:	2300      	movs	r3, #0
 800851c:	60fb      	str	r3, [r7, #12]
 800851e:	e014      	b.n	800854a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008520:	4a0f      	ldr	r2, [pc, #60]	; (8008560 <vQueueAddToRegistry+0x50>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10b      	bne.n	8008544 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800852c:	490c      	ldr	r1, [pc, #48]	; (8008560 <vQueueAddToRegistry+0x50>)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008536:	4a0a      	ldr	r2, [pc, #40]	; (8008560 <vQueueAddToRegistry+0x50>)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	00db      	lsls	r3, r3, #3
 800853c:	4413      	add	r3, r2
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008542:	e006      	b.n	8008552 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3301      	adds	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2b07      	cmp	r3, #7
 800854e:	d9e7      	bls.n	8008520 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	20004e28 	.word	0x20004e28

08008564 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008574:	f001 fc3e 	bl	8009df4 <vPortEnterCritical>
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800857e:	b25b      	sxtb	r3, r3
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008584:	d103      	bne.n	800858e <vQueueWaitForMessageRestricted+0x2a>
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008594:	b25b      	sxtb	r3, r3
 8008596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800859a:	d103      	bne.n	80085a4 <vQueueWaitForMessageRestricted+0x40>
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085a4:	f001 fc56 	bl	8009e54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d106      	bne.n	80085be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	3324      	adds	r3, #36	; 0x24
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	68b9      	ldr	r1, [r7, #8]
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 fcd3 	bl	8008f64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085be:	6978      	ldr	r0, [r7, #20]
 80085c0:	f7ff ff26 	bl	8008410 <prvUnlockQueue>
	}
 80085c4:	bf00      	nop
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b08e      	sub	sp, #56	; 0x38
 80085d0:	af04      	add	r7, sp, #16
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
 80085d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	623b      	str	r3, [r7, #32]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80085f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xTaskCreateStatic+0x46>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	61fb      	str	r3, [r7, #28]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008612:	23bc      	movs	r3, #188	; 0xbc
 8008614:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2bbc      	cmp	r3, #188	; 0xbc
 800861a:	d00a      	beq.n	8008632 <xTaskCreateStatic+0x66>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61bb      	str	r3, [r7, #24]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008632:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	2b00      	cmp	r3, #0
 8008638:	d01e      	beq.n	8008678 <xTaskCreateStatic+0xac>
 800863a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863c:	2b00      	cmp	r3, #0
 800863e:	d01b      	beq.n	8008678 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008648:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	2202      	movs	r2, #2
 800864e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008652:	2300      	movs	r3, #0
 8008654:	9303      	str	r3, [sp, #12]
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	9302      	str	r3, [sp, #8]
 800865a:	f107 0314 	add.w	r3, r7, #20
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	68b9      	ldr	r1, [r7, #8]
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f850 	bl	8008710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008670:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008672:	f000 f8f3 	bl	800885c <prvAddNewTaskToReadyList>
 8008676:	e001      	b.n	800867c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008678:	2300      	movs	r3, #0
 800867a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800867c:	697b      	ldr	r3, [r7, #20]
	}
 800867e:	4618      	mov	r0, r3
 8008680:	3728      	adds	r7, #40	; 0x28
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008686:	b580      	push	{r7, lr}
 8008688:	b08c      	sub	sp, #48	; 0x30
 800868a:	af04      	add	r7, sp, #16
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	603b      	str	r3, [r7, #0]
 8008692:	4613      	mov	r3, r2
 8008694:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008696:	88fb      	ldrh	r3, [r7, #6]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4618      	mov	r0, r3
 800869c:	f001 fccc 	bl	800a038 <pvPortMalloc>
 80086a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00e      	beq.n	80086c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086a8:	20bc      	movs	r0, #188	; 0xbc
 80086aa:	f001 fcc5 	bl	800a038 <pvPortMalloc>
 80086ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	631a      	str	r2, [r3, #48]	; 0x30
 80086bc:	e005      	b.n	80086ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086be:	6978      	ldr	r0, [r7, #20]
 80086c0:	f001 fd86 	bl	800a1d0 <vPortFree>
 80086c4:	e001      	b.n	80086ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086c6:	2300      	movs	r3, #0
 80086c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d017      	beq.n	8008700 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086d8:	88fa      	ldrh	r2, [r7, #6]
 80086da:	2300      	movs	r3, #0
 80086dc:	9303      	str	r3, [sp, #12]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	9302      	str	r3, [sp, #8]
 80086e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68b9      	ldr	r1, [r7, #8]
 80086ee:	68f8      	ldr	r0, [r7, #12]
 80086f0:	f000 f80e 	bl	8008710 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086f4:	69f8      	ldr	r0, [r7, #28]
 80086f6:	f000 f8b1 	bl	800885c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80086fa:	2301      	movs	r3, #1
 80086fc:	61bb      	str	r3, [r7, #24]
 80086fe:	e002      	b.n	8008706 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008704:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008706:	69bb      	ldr	r3, [r7, #24]
	}
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800871e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008720:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	461a      	mov	r2, r3
 8008728:	21a5      	movs	r1, #165	; 0xa5
 800872a:	f001 feb9 	bl	800a4a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008738:	3b01      	subs	r3, #1
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	f023 0307 	bic.w	r3, r3, #7
 8008746:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	f003 0307 	and.w	r3, r3, #7
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	617b      	str	r3, [r7, #20]
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01f      	beq.n	80087ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800876e:	2300      	movs	r3, #0
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	e012      	b.n	800879a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	7819      	ldrb	r1, [r3, #0]
 800877c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	4413      	add	r3, r2
 8008782:	3334      	adds	r3, #52	; 0x34
 8008784:	460a      	mov	r2, r1
 8008786:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	3301      	adds	r3, #1
 8008798:	61fb      	str	r3, [r7, #28]
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	2b0f      	cmp	r3, #15
 800879e:	d9e9      	bls.n	8008774 <prvInitialiseNewTask+0x64>
 80087a0:	e000      	b.n	80087a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80087a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087ac:	e003      	b.n	80087b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	2b37      	cmp	r3, #55	; 0x37
 80087ba:	d901      	bls.n	80087c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087bc:	2337      	movs	r3, #55	; 0x37
 80087be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80087cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ce:	2200      	movs	r2, #0
 80087d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	3304      	adds	r3, #4
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7ff f8be 	bl	8007958 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087de:	3318      	adds	r3, #24
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7ff f8b9 	bl	8007958 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008806:	2200      	movs	r2, #0
 8008808:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	3354      	adds	r3, #84	; 0x54
 8008810:	2260      	movs	r2, #96	; 0x60
 8008812:	2100      	movs	r1, #0
 8008814:	4618      	mov	r0, r3
 8008816:	f001 fe43 	bl	800a4a0 <memset>
 800881a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881c:	4a0c      	ldr	r2, [pc, #48]	; (8008850 <prvInitialiseNewTask+0x140>)
 800881e:	659a      	str	r2, [r3, #88]	; 0x58
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	4a0c      	ldr	r2, [pc, #48]	; (8008854 <prvInitialiseNewTask+0x144>)
 8008824:	65da      	str	r2, [r3, #92]	; 0x5c
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	4a0b      	ldr	r2, [pc, #44]	; (8008858 <prvInitialiseNewTask+0x148>)
 800882a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	69b8      	ldr	r0, [r7, #24]
 8008832:	f001 f9b3 	bl	8009b9c <pxPortInitialiseStack>
 8008836:	4602      	mov	r2, r0
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800883c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d002      	beq.n	8008848 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008846:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008848:	bf00      	nop
 800884a:	3720      	adds	r7, #32
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	08028600 	.word	0x08028600
 8008854:	08028620 	.word	0x08028620
 8008858:	080285e0 	.word	0x080285e0

0800885c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008864:	f001 fac6 	bl	8009df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008868:	4b2d      	ldr	r3, [pc, #180]	; (8008920 <prvAddNewTaskToReadyList+0xc4>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3301      	adds	r3, #1
 800886e:	4a2c      	ldr	r2, [pc, #176]	; (8008920 <prvAddNewTaskToReadyList+0xc4>)
 8008870:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008872:	4b2c      	ldr	r3, [pc, #176]	; (8008924 <prvAddNewTaskToReadyList+0xc8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d109      	bne.n	800888e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800887a:	4a2a      	ldr	r2, [pc, #168]	; (8008924 <prvAddNewTaskToReadyList+0xc8>)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008880:	4b27      	ldr	r3, [pc, #156]	; (8008920 <prvAddNewTaskToReadyList+0xc4>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d110      	bne.n	80088aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008888:	f000 fc98 	bl	80091bc <prvInitialiseTaskLists>
 800888c:	e00d      	b.n	80088aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800888e:	4b26      	ldr	r3, [pc, #152]	; (8008928 <prvAddNewTaskToReadyList+0xcc>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008896:	4b23      	ldr	r3, [pc, #140]	; (8008924 <prvAddNewTaskToReadyList+0xc8>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d802      	bhi.n	80088aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088a4:	4a1f      	ldr	r2, [pc, #124]	; (8008924 <prvAddNewTaskToReadyList+0xc8>)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088aa:	4b20      	ldr	r3, [pc, #128]	; (800892c <prvAddNewTaskToReadyList+0xd0>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3301      	adds	r3, #1
 80088b0:	4a1e      	ldr	r2, [pc, #120]	; (800892c <prvAddNewTaskToReadyList+0xd0>)
 80088b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088b4:	4b1d      	ldr	r3, [pc, #116]	; (800892c <prvAddNewTaskToReadyList+0xd0>)
 80088b6:	681a      	ldr	r2, [r3, #0]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c0:	4b1b      	ldr	r3, [pc, #108]	; (8008930 <prvAddNewTaskToReadyList+0xd4>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d903      	bls.n	80088d0 <prvAddNewTaskToReadyList+0x74>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	4a18      	ldr	r2, [pc, #96]	; (8008930 <prvAddNewTaskToReadyList+0xd4>)
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088d4:	4613      	mov	r3, r2
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	4413      	add	r3, r2
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4a15      	ldr	r2, [pc, #84]	; (8008934 <prvAddNewTaskToReadyList+0xd8>)
 80088de:	441a      	add	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f7ff f843 	bl	8007972 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088ec:	f001 fab2 	bl	8009e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088f0:	4b0d      	ldr	r3, [pc, #52]	; (8008928 <prvAddNewTaskToReadyList+0xcc>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00e      	beq.n	8008916 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <prvAddNewTaskToReadyList+0xc8>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	429a      	cmp	r2, r3
 8008904:	d207      	bcs.n	8008916 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <prvAddNewTaskToReadyList+0xdc>)
 8008908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000d00 	.word	0x20000d00
 8008924:	2000082c 	.word	0x2000082c
 8008928:	20000d0c 	.word	0x20000d0c
 800892c:	20000d1c 	.word	0x20000d1c
 8008930:	20000d08 	.word	0x20000d08
 8008934:	20000830 	.word	0x20000830
 8008938:	e000ed04 	.word	0xe000ed04

0800893c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008944:	f001 fa56 	bl	8009df4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <vTaskDelete+0x18>
 800894e:	4b2c      	ldr	r3, [pc, #176]	; (8008a00 <vTaskDelete+0xc4>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	e000      	b.n	8008956 <vTaskDelete+0x1a>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3304      	adds	r3, #4
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff f865 	bl	8007a2c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	3318      	adds	r3, #24
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff f85c 	bl	8007a2c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008974:	4b23      	ldr	r3, [pc, #140]	; (8008a04 <vTaskDelete+0xc8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3301      	adds	r3, #1
 800897a:	4a22      	ldr	r2, [pc, #136]	; (8008a04 <vTaskDelete+0xc8>)
 800897c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800897e:	4b20      	ldr	r3, [pc, #128]	; (8008a00 <vTaskDelete+0xc4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d10b      	bne.n	80089a0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3304      	adds	r3, #4
 800898c:	4619      	mov	r1, r3
 800898e:	481e      	ldr	r0, [pc, #120]	; (8008a08 <vTaskDelete+0xcc>)
 8008990:	f7fe ffef 	bl	8007972 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008994:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <vTaskDelete+0xd0>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3301      	adds	r3, #1
 800899a:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <vTaskDelete+0xd0>)
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	e009      	b.n	80089b4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80089a0:	4b1b      	ldr	r3, [pc, #108]	; (8008a10 <vTaskDelete+0xd4>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	4a1a      	ldr	r2, [pc, #104]	; (8008a10 <vTaskDelete+0xd4>)
 80089a8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f000 fc74 	bl	8009298 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80089b0:	f000 fca6 	bl	8009300 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80089b4:	f001 fa4e 	bl	8009e54 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80089b8:	4b16      	ldr	r3, [pc, #88]	; (8008a14 <vTaskDelete+0xd8>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d01b      	beq.n	80089f8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80089c0:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <vTaskDelete+0xc4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68fa      	ldr	r2, [r7, #12]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d116      	bne.n	80089f8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80089ca:	4b13      	ldr	r3, [pc, #76]	; (8008a18 <vTaskDelete+0xdc>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00a      	beq.n	80089e8 <vTaskDelete+0xac>
	__asm volatile
 80089d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	60bb      	str	r3, [r7, #8]
}
 80089e4:	bf00      	nop
 80089e6:	e7fe      	b.n	80089e6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80089e8:	4b0c      	ldr	r3, [pc, #48]	; (8008a1c <vTaskDelete+0xe0>)
 80089ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	f3bf 8f4f 	dsb	sy
 80089f4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	2000082c 	.word	0x2000082c
 8008a04:	20000d1c 	.word	0x20000d1c
 8008a08:	20000cd4 	.word	0x20000cd4
 8008a0c:	20000ce8 	.word	0x20000ce8
 8008a10:	20000d00 	.word	0x20000d00
 8008a14:	20000d0c 	.word	0x20000d0c
 8008a18:	20000d28 	.word	0x20000d28
 8008a1c:	e000ed04 	.word	0xe000ed04

08008a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d017      	beq.n	8008a62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <vTaskDelay+0x60>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00a      	beq.n	8008a50 <vTaskDelay+0x30>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	60bb      	str	r3, [r7, #8]
}
 8008a4c:	bf00      	nop
 8008a4e:	e7fe      	b.n	8008a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a50:	f000 f88a 	bl	8008b68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 fcfe 	bl	8009458 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a5c:	f000 f892 	bl	8008b84 <xTaskResumeAll>
 8008a60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d107      	bne.n	8008a78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a68:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <vTaskDelay+0x64>)
 8008a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a6e:	601a      	str	r2, [r3, #0]
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a78:	bf00      	nop
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20000d28 	.word	0x20000d28
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08a      	sub	sp, #40	; 0x28
 8008a8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a96:	463a      	mov	r2, r7
 8008a98:	1d39      	adds	r1, r7, #4
 8008a9a:	f107 0308 	add.w	r3, r7, #8
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe ff06 	bl	80078b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008aa4:	6839      	ldr	r1, [r7, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	9202      	str	r2, [sp, #8]
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	460a      	mov	r2, r1
 8008ab6:	4924      	ldr	r1, [pc, #144]	; (8008b48 <vTaskStartScheduler+0xc0>)
 8008ab8:	4824      	ldr	r0, [pc, #144]	; (8008b4c <vTaskStartScheduler+0xc4>)
 8008aba:	f7ff fd87 	bl	80085cc <xTaskCreateStatic>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4a23      	ldr	r2, [pc, #140]	; (8008b50 <vTaskStartScheduler+0xc8>)
 8008ac2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ac4:	4b22      	ldr	r3, [pc, #136]	; (8008b50 <vTaskStartScheduler+0xc8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d002      	beq.n	8008ad2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008acc:	2301      	movs	r3, #1
 8008ace:	617b      	str	r3, [r7, #20]
 8008ad0:	e001      	b.n	8008ad6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d102      	bne.n	8008ae2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008adc:	f000 fd10 	bl	8009500 <xTimerCreateTimerTask>
 8008ae0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d11b      	bne.n	8008b20 <vTaskStartScheduler+0x98>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aec:	f383 8811 	msr	BASEPRI, r3
 8008af0:	f3bf 8f6f 	isb	sy
 8008af4:	f3bf 8f4f 	dsb	sy
 8008af8:	613b      	str	r3, [r7, #16]
}
 8008afa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008afc:	4b15      	ldr	r3, [pc, #84]	; (8008b54 <vTaskStartScheduler+0xcc>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	3354      	adds	r3, #84	; 0x54
 8008b02:	4a15      	ldr	r2, [pc, #84]	; (8008b58 <vTaskStartScheduler+0xd0>)
 8008b04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <vTaskStartScheduler+0xd4>)
 8008b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b0e:	4b14      	ldr	r3, [pc, #80]	; (8008b60 <vTaskStartScheduler+0xd8>)
 8008b10:	2201      	movs	r2, #1
 8008b12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b14:	4b13      	ldr	r3, [pc, #76]	; (8008b64 <vTaskStartScheduler+0xdc>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b1a:	f001 f8c9 	bl	8009cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b1e:	e00e      	b.n	8008b3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b26:	d10a      	bne.n	8008b3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b2c:	f383 8811 	msr	BASEPRI, r3
 8008b30:	f3bf 8f6f 	isb	sy
 8008b34:	f3bf 8f4f 	dsb	sy
 8008b38:	60fb      	str	r3, [r7, #12]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <vTaskStartScheduler+0xb4>
}
 8008b3e:	bf00      	nop
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	0800a7cc 	.word	0x0800a7cc
 8008b4c:	0800918d 	.word	0x0800918d
 8008b50:	20000d24 	.word	0x20000d24
 8008b54:	2000082c 	.word	0x2000082c
 8008b58:	20000020 	.word	0x20000020
 8008b5c:	20000d20 	.word	0x20000d20
 8008b60:	20000d0c 	.word	0x20000d0c
 8008b64:	20000d04 	.word	0x20000d04

08008b68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b6c:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <vTaskSuspendAll+0x18>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3301      	adds	r3, #1
 8008b72:	4a03      	ldr	r2, [pc, #12]	; (8008b80 <vTaskSuspendAll+0x18>)
 8008b74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b76:	bf00      	nop
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	20000d28 	.word	0x20000d28

08008b84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b92:	4b42      	ldr	r3, [pc, #264]	; (8008c9c <xTaskResumeAll+0x118>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bb0:	f001 f920 	bl	8009df4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bb4:	4b39      	ldr	r3, [pc, #228]	; (8008c9c <xTaskResumeAll+0x118>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	4a38      	ldr	r2, [pc, #224]	; (8008c9c <xTaskResumeAll+0x118>)
 8008bbc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bbe:	4b37      	ldr	r3, [pc, #220]	; (8008c9c <xTaskResumeAll+0x118>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d162      	bne.n	8008c8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bc6:	4b36      	ldr	r3, [pc, #216]	; (8008ca0 <xTaskResumeAll+0x11c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d05e      	beq.n	8008c8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bce:	e02f      	b.n	8008c30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd0:	4b34      	ldr	r3, [pc, #208]	; (8008ca4 <xTaskResumeAll+0x120>)
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3318      	adds	r3, #24
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe ff25 	bl	8007a2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3304      	adds	r3, #4
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe ff20 	bl	8007a2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf0:	4b2d      	ldr	r3, [pc, #180]	; (8008ca8 <xTaskResumeAll+0x124>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d903      	bls.n	8008c00 <xTaskResumeAll+0x7c>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	4a2a      	ldr	r2, [pc, #168]	; (8008ca8 <xTaskResumeAll+0x124>)
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c04:	4613      	mov	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	4413      	add	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4a27      	ldr	r2, [pc, #156]	; (8008cac <xTaskResumeAll+0x128>)
 8008c0e:	441a      	add	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3304      	adds	r3, #4
 8008c14:	4619      	mov	r1, r3
 8008c16:	4610      	mov	r0, r2
 8008c18:	f7fe feab 	bl	8007972 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c20:	4b23      	ldr	r3, [pc, #140]	; (8008cb0 <xTaskResumeAll+0x12c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d302      	bcc.n	8008c30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008c2a:	4b22      	ldr	r3, [pc, #136]	; (8008cb4 <xTaskResumeAll+0x130>)
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c30:	4b1c      	ldr	r3, [pc, #112]	; (8008ca4 <xTaskResumeAll+0x120>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1cb      	bne.n	8008bd0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c3e:	f000 fb5f 	bl	8009300 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c42:	4b1d      	ldr	r3, [pc, #116]	; (8008cb8 <xTaskResumeAll+0x134>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d010      	beq.n	8008c70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c4e:	f000 f847 	bl	8008ce0 <xTaskIncrementTick>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008c58:	4b16      	ldr	r3, [pc, #88]	; (8008cb4 <xTaskResumeAll+0x130>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f1      	bne.n	8008c4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008c6a:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <xTaskResumeAll+0x134>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c70:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <xTaskResumeAll+0x130>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d009      	beq.n	8008c8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c7c:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <xTaskResumeAll+0x138>)
 8008c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c8c:	f001 f8e2 	bl	8009e54 <vPortExitCritical>

	return xAlreadyYielded;
 8008c90:	68bb      	ldr	r3, [r7, #8]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000d28 	.word	0x20000d28
 8008ca0:	20000d00 	.word	0x20000d00
 8008ca4:	20000cc0 	.word	0x20000cc0
 8008ca8:	20000d08 	.word	0x20000d08
 8008cac:	20000830 	.word	0x20000830
 8008cb0:	2000082c 	.word	0x2000082c
 8008cb4:	20000d14 	.word	0x20000d14
 8008cb8:	20000d10 	.word	0x20000d10
 8008cbc:	e000ed04 	.word	0xe000ed04

08008cc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cc6:	4b05      	ldr	r3, [pc, #20]	; (8008cdc <xTaskGetTickCount+0x1c>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ccc:	687b      	ldr	r3, [r7, #4]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	20000d04 	.word	0x20000d04

08008ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cea:	4b4f      	ldr	r3, [pc, #316]	; (8008e28 <xTaskIncrementTick+0x148>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f040 808f 	bne.w	8008e12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cf4:	4b4d      	ldr	r3, [pc, #308]	; (8008e2c <xTaskIncrementTick+0x14c>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cfc:	4a4b      	ldr	r2, [pc, #300]	; (8008e2c <xTaskIncrementTick+0x14c>)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d120      	bne.n	8008d4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d08:	4b49      	ldr	r3, [pc, #292]	; (8008e30 <xTaskIncrementTick+0x150>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00a      	beq.n	8008d28 <xTaskIncrementTick+0x48>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	603b      	str	r3, [r7, #0]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <xTaskIncrementTick+0x46>
 8008d28:	4b41      	ldr	r3, [pc, #260]	; (8008e30 <xTaskIncrementTick+0x150>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60fb      	str	r3, [r7, #12]
 8008d2e:	4b41      	ldr	r3, [pc, #260]	; (8008e34 <xTaskIncrementTick+0x154>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a3f      	ldr	r2, [pc, #252]	; (8008e30 <xTaskIncrementTick+0x150>)
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	4a3f      	ldr	r2, [pc, #252]	; (8008e34 <xTaskIncrementTick+0x154>)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6013      	str	r3, [r2, #0]
 8008d3c:	4b3e      	ldr	r3, [pc, #248]	; (8008e38 <xTaskIncrementTick+0x158>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	4a3d      	ldr	r2, [pc, #244]	; (8008e38 <xTaskIncrementTick+0x158>)
 8008d44:	6013      	str	r3, [r2, #0]
 8008d46:	f000 fadb 	bl	8009300 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d4a:	4b3c      	ldr	r3, [pc, #240]	; (8008e3c <xTaskIncrementTick+0x15c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d349      	bcc.n	8008de8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d54:	4b36      	ldr	r3, [pc, #216]	; (8008e30 <xTaskIncrementTick+0x150>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d104      	bne.n	8008d68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d5e:	4b37      	ldr	r3, [pc, #220]	; (8008e3c <xTaskIncrementTick+0x15c>)
 8008d60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d64:	601a      	str	r2, [r3, #0]
					break;
 8008d66:	e03f      	b.n	8008de8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d68:	4b31      	ldr	r3, [pc, #196]	; (8008e30 <xTaskIncrementTick+0x150>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d78:	693a      	ldr	r2, [r7, #16]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d203      	bcs.n	8008d88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d80:	4a2e      	ldr	r2, [pc, #184]	; (8008e3c <xTaskIncrementTick+0x15c>)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d86:	e02f      	b.n	8008de8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fe fe4d 	bl	8007a2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d004      	beq.n	8008da4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	3318      	adds	r3, #24
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fe fe44 	bl	8007a2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008da8:	4b25      	ldr	r3, [pc, #148]	; (8008e40 <xTaskIncrementTick+0x160>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d903      	bls.n	8008db8 <xTaskIncrementTick+0xd8>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db4:	4a22      	ldr	r2, [pc, #136]	; (8008e40 <xTaskIncrementTick+0x160>)
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4413      	add	r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4a1f      	ldr	r2, [pc, #124]	; (8008e44 <xTaskIncrementTick+0x164>)
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	3304      	adds	r3, #4
 8008dcc:	4619      	mov	r1, r3
 8008dce:	4610      	mov	r0, r2
 8008dd0:	f7fe fdcf 	bl	8007972 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd8:	4b1b      	ldr	r3, [pc, #108]	; (8008e48 <xTaskIncrementTick+0x168>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d3b8      	bcc.n	8008d54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008de2:	2301      	movs	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008de6:	e7b5      	b.n	8008d54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008de8:	4b17      	ldr	r3, [pc, #92]	; (8008e48 <xTaskIncrementTick+0x168>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dee:	4915      	ldr	r1, [pc, #84]	; (8008e44 <xTaskIncrementTick+0x164>)
 8008df0:	4613      	mov	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d901      	bls.n	8008e04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e04:	4b11      	ldr	r3, [pc, #68]	; (8008e4c <xTaskIncrementTick+0x16c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	617b      	str	r3, [r7, #20]
 8008e10:	e004      	b.n	8008e1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e12:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <xTaskIncrementTick+0x170>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	4a0d      	ldr	r2, [pc, #52]	; (8008e50 <xTaskIncrementTick+0x170>)
 8008e1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e1c:	697b      	ldr	r3, [r7, #20]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	20000d28 	.word	0x20000d28
 8008e2c:	20000d04 	.word	0x20000d04
 8008e30:	20000cb8 	.word	0x20000cb8
 8008e34:	20000cbc 	.word	0x20000cbc
 8008e38:	20000d18 	.word	0x20000d18
 8008e3c:	20000d20 	.word	0x20000d20
 8008e40:	20000d08 	.word	0x20000d08
 8008e44:	20000830 	.word	0x20000830
 8008e48:	2000082c 	.word	0x2000082c
 8008e4c:	20000d14 	.word	0x20000d14
 8008e50:	20000d10 	.word	0x20000d10

08008e54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e5a:	4b2a      	ldr	r3, [pc, #168]	; (8008f04 <vTaskSwitchContext+0xb0>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d003      	beq.n	8008e6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e62:	4b29      	ldr	r3, [pc, #164]	; (8008f08 <vTaskSwitchContext+0xb4>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e68:	e046      	b.n	8008ef8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008e6a:	4b27      	ldr	r3, [pc, #156]	; (8008f08 <vTaskSwitchContext+0xb4>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e70:	4b26      	ldr	r3, [pc, #152]	; (8008f0c <vTaskSwitchContext+0xb8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	60fb      	str	r3, [r7, #12]
 8008e76:	e010      	b.n	8008e9a <vTaskSwitchContext+0x46>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10a      	bne.n	8008e94 <vTaskSwitchContext+0x40>
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	607b      	str	r3, [r7, #4]
}
 8008e90:	bf00      	nop
 8008e92:	e7fe      	b.n	8008e92 <vTaskSwitchContext+0x3e>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	491d      	ldr	r1, [pc, #116]	; (8008f10 <vTaskSwitchContext+0xbc>)
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	440b      	add	r3, r1
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d0e4      	beq.n	8008e78 <vTaskSwitchContext+0x24>
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <vTaskSwitchContext+0xbc>)
 8008eba:	4413      	add	r3, r2
 8008ebc:	60bb      	str	r3, [r7, #8]
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	605a      	str	r2, [r3, #4]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3308      	adds	r3, #8
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d104      	bne.n	8008ede <vTaskSwitchContext+0x8a>
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	4a0b      	ldr	r2, [pc, #44]	; (8008f14 <vTaskSwitchContext+0xc0>)
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <vTaskSwitchContext+0xb8>)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008eee:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <vTaskSwitchContext+0xc0>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3354      	adds	r3, #84	; 0x54
 8008ef4:	4a08      	ldr	r2, [pc, #32]	; (8008f18 <vTaskSwitchContext+0xc4>)
 8008ef6:	6013      	str	r3, [r2, #0]
}
 8008ef8:	bf00      	nop
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	20000d28 	.word	0x20000d28
 8008f08:	20000d14 	.word	0x20000d14
 8008f0c:	20000d08 	.word	0x20000d08
 8008f10:	20000830 	.word	0x20000830
 8008f14:	2000082c 	.word	0x2000082c
 8008f18:	20000020 	.word	0x20000020

08008f1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	60fb      	str	r3, [r7, #12]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f42:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <vTaskPlaceOnEventList+0x44>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3318      	adds	r3, #24
 8008f48:	4619      	mov	r1, r3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7fe fd35 	bl	80079ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f50:	2101      	movs	r1, #1
 8008f52:	6838      	ldr	r0, [r7, #0]
 8008f54:	f000 fa80 	bl	8009458 <prvAddCurrentTaskToDelayedList>
}
 8008f58:	bf00      	nop
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	2000082c 	.word	0x2000082c

08008f64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	617b      	str	r3, [r7, #20]
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	3318      	adds	r3, #24
 8008f92:	4619      	mov	r1, r3
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7fe fcec 	bl	8007972 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	68b8      	ldr	r0, [r7, #8]
 8008faa:	f000 fa55 	bl	8009458 <prvAddCurrentTaskToDelayedList>
	}
 8008fae:	bf00      	nop
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	2000082c 	.word	0x2000082c

08008fbc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	60fb      	str	r3, [r7, #12]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	3318      	adds	r3, #24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fe fd1d 	bl	8007a2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ff2:	4b1e      	ldr	r3, [pc, #120]	; (800906c <xTaskRemoveFromEventList+0xb0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d11d      	bne.n	8009036 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fe fd14 	bl	8007a2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009008:	4b19      	ldr	r3, [pc, #100]	; (8009070 <xTaskRemoveFromEventList+0xb4>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d903      	bls.n	8009018 <xTaskRemoveFromEventList+0x5c>
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	4a16      	ldr	r2, [pc, #88]	; (8009070 <xTaskRemoveFromEventList+0xb4>)
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901c:	4613      	mov	r3, r2
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4a13      	ldr	r2, [pc, #76]	; (8009074 <xTaskRemoveFromEventList+0xb8>)
 8009026:	441a      	add	r2, r3
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	3304      	adds	r3, #4
 800902c:	4619      	mov	r1, r3
 800902e:	4610      	mov	r0, r2
 8009030:	f7fe fc9f 	bl	8007972 <vListInsertEnd>
 8009034:	e005      	b.n	8009042 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3318      	adds	r3, #24
 800903a:	4619      	mov	r1, r3
 800903c:	480e      	ldr	r0, [pc, #56]	; (8009078 <xTaskRemoveFromEventList+0xbc>)
 800903e:	f7fe fc98 	bl	8007972 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009046:	4b0d      	ldr	r3, [pc, #52]	; (800907c <xTaskRemoveFromEventList+0xc0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904c:	429a      	cmp	r2, r3
 800904e:	d905      	bls.n	800905c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009054:	4b0a      	ldr	r3, [pc, #40]	; (8009080 <xTaskRemoveFromEventList+0xc4>)
 8009056:	2201      	movs	r2, #1
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	e001      	b.n	8009060 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009060:	697b      	ldr	r3, [r7, #20]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000d28 	.word	0x20000d28
 8009070:	20000d08 	.word	0x20000d08
 8009074:	20000830 	.word	0x20000830
 8009078:	20000cc0 	.word	0x20000cc0
 800907c:	2000082c 	.word	0x2000082c
 8009080:	20000d14 	.word	0x20000d14

08009084 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800908c:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <vTaskInternalSetTimeOutState+0x24>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <vTaskInternalSetTimeOutState+0x28>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	605a      	str	r2, [r3, #4]
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr
 80090a8:	20000d18 	.word	0x20000d18
 80090ac:	20000d04 	.word	0x20000d04

080090b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	613b      	str	r3, [r7, #16]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d10a      	bne.n	80090f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	60fb      	str	r3, [r7, #12]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80090f2:	f000 fe7f 	bl	8009df4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090f6:	4b1d      	ldr	r3, [pc, #116]	; (800916c <xTaskCheckForTimeOut+0xbc>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800910e:	d102      	bne.n	8009116 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009110:	2300      	movs	r3, #0
 8009112:	61fb      	str	r3, [r7, #28]
 8009114:	e023      	b.n	800915e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	4b15      	ldr	r3, [pc, #84]	; (8009170 <xTaskCheckForTimeOut+0xc0>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	429a      	cmp	r2, r3
 8009120:	d007      	beq.n	8009132 <xTaskCheckForTimeOut+0x82>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	429a      	cmp	r2, r3
 800912a:	d302      	bcc.n	8009132 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800912c:	2301      	movs	r3, #1
 800912e:	61fb      	str	r3, [r7, #28]
 8009130:	e015      	b.n	800915e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	429a      	cmp	r2, r3
 800913a:	d20b      	bcs.n	8009154 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	1ad2      	subs	r2, r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff ff9b 	bl	8009084 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	61fb      	str	r3, [r7, #28]
 8009152:	e004      	b.n	800915e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800915a:	2301      	movs	r3, #1
 800915c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800915e:	f000 fe79 	bl	8009e54 <vPortExitCritical>

	return xReturn;
 8009162:	69fb      	ldr	r3, [r7, #28]
}
 8009164:	4618      	mov	r0, r3
 8009166:	3720      	adds	r7, #32
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}
 800916c:	20000d04 	.word	0x20000d04
 8009170:	20000d18 	.word	0x20000d18

08009174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009174:	b480      	push	{r7}
 8009176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009178:	4b03      	ldr	r3, [pc, #12]	; (8009188 <vTaskMissedYield+0x14>)
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	bf00      	nop
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	20000d14 	.word	0x20000d14

0800918c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009194:	f000 f852 	bl	800923c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009198:	4b06      	ldr	r3, [pc, #24]	; (80091b4 <prvIdleTask+0x28>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d9f9      	bls.n	8009194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <prvIdleTask+0x2c>)
 80091a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	f3bf 8f4f 	dsb	sy
 80091ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091b0:	e7f0      	b.n	8009194 <prvIdleTask+0x8>
 80091b2:	bf00      	nop
 80091b4:	20000830 	.word	0x20000830
 80091b8:	e000ed04 	.word	0xe000ed04

080091bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091c2:	2300      	movs	r3, #0
 80091c4:	607b      	str	r3, [r7, #4]
 80091c6:	e00c      	b.n	80091e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	4613      	mov	r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4413      	add	r3, r2
 80091d0:	009b      	lsls	r3, r3, #2
 80091d2:	4a12      	ldr	r2, [pc, #72]	; (800921c <prvInitialiseTaskLists+0x60>)
 80091d4:	4413      	add	r3, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fe fb9e 	bl	8007918 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	3301      	adds	r3, #1
 80091e0:	607b      	str	r3, [r7, #4]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b37      	cmp	r3, #55	; 0x37
 80091e6:	d9ef      	bls.n	80091c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80091e8:	480d      	ldr	r0, [pc, #52]	; (8009220 <prvInitialiseTaskLists+0x64>)
 80091ea:	f7fe fb95 	bl	8007918 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80091ee:	480d      	ldr	r0, [pc, #52]	; (8009224 <prvInitialiseTaskLists+0x68>)
 80091f0:	f7fe fb92 	bl	8007918 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091f4:	480c      	ldr	r0, [pc, #48]	; (8009228 <prvInitialiseTaskLists+0x6c>)
 80091f6:	f7fe fb8f 	bl	8007918 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091fa:	480c      	ldr	r0, [pc, #48]	; (800922c <prvInitialiseTaskLists+0x70>)
 80091fc:	f7fe fb8c 	bl	8007918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009200:	480b      	ldr	r0, [pc, #44]	; (8009230 <prvInitialiseTaskLists+0x74>)
 8009202:	f7fe fb89 	bl	8007918 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009206:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <prvInitialiseTaskLists+0x78>)
 8009208:	4a05      	ldr	r2, [pc, #20]	; (8009220 <prvInitialiseTaskLists+0x64>)
 800920a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800920c:	4b0a      	ldr	r3, [pc, #40]	; (8009238 <prvInitialiseTaskLists+0x7c>)
 800920e:	4a05      	ldr	r2, [pc, #20]	; (8009224 <prvInitialiseTaskLists+0x68>)
 8009210:	601a      	str	r2, [r3, #0]
}
 8009212:	bf00      	nop
 8009214:	3708      	adds	r7, #8
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	20000830 	.word	0x20000830
 8009220:	20000c90 	.word	0x20000c90
 8009224:	20000ca4 	.word	0x20000ca4
 8009228:	20000cc0 	.word	0x20000cc0
 800922c:	20000cd4 	.word	0x20000cd4
 8009230:	20000cec 	.word	0x20000cec
 8009234:	20000cb8 	.word	0x20000cb8
 8009238:	20000cbc 	.word	0x20000cbc

0800923c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009242:	e019      	b.n	8009278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009244:	f000 fdd6 	bl	8009df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009248:	4b10      	ldr	r3, [pc, #64]	; (800928c <prvCheckTasksWaitingTermination+0x50>)
 800924a:	68db      	ldr	r3, [r3, #12]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	3304      	adds	r3, #4
 8009254:	4618      	mov	r0, r3
 8009256:	f7fe fbe9 	bl	8007a2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800925a:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <prvCheckTasksWaitingTermination+0x54>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	3b01      	subs	r3, #1
 8009260:	4a0b      	ldr	r2, [pc, #44]	; (8009290 <prvCheckTasksWaitingTermination+0x54>)
 8009262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009264:	4b0b      	ldr	r3, [pc, #44]	; (8009294 <prvCheckTasksWaitingTermination+0x58>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3b01      	subs	r3, #1
 800926a:	4a0a      	ldr	r2, [pc, #40]	; (8009294 <prvCheckTasksWaitingTermination+0x58>)
 800926c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800926e:	f000 fdf1 	bl	8009e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f810 	bl	8009298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009278:	4b06      	ldr	r3, [pc, #24]	; (8009294 <prvCheckTasksWaitingTermination+0x58>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d1e1      	bne.n	8009244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009280:	bf00      	nop
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20000cd4 	.word	0x20000cd4
 8009290:	20000d00 	.word	0x20000d00
 8009294:	20000ce8 	.word	0x20000ce8

08009298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	3354      	adds	r3, #84	; 0x54
 80092a4:	4618      	mov	r0, r3
 80092a6:	f001 f9bb 	bl	800a620 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d108      	bne.n	80092c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 ff89 	bl	800a1d0 <vPortFree>
				vPortFree( pxTCB );
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 ff86 	bl	800a1d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092c4:	e018      	b.n	80092f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d103      	bne.n	80092d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 ff7d 	bl	800a1d0 <vPortFree>
	}
 80092d6:	e00f      	b.n	80092f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80092de:	2b02      	cmp	r3, #2
 80092e0:	d00a      	beq.n	80092f8 <prvDeleteTCB+0x60>
	__asm volatile
 80092e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e6:	f383 8811 	msr	BASEPRI, r3
 80092ea:	f3bf 8f6f 	isb	sy
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	60fb      	str	r3, [r7, #12]
}
 80092f4:	bf00      	nop
 80092f6:	e7fe      	b.n	80092f6 <prvDeleteTCB+0x5e>
	}
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <prvResetNextTaskUnblockTime+0x38>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009310:	4b0a      	ldr	r3, [pc, #40]	; (800933c <prvResetNextTaskUnblockTime+0x3c>)
 8009312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009316:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009318:	e008      	b.n	800932c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931a:	4b07      	ldr	r3, [pc, #28]	; (8009338 <prvResetNextTaskUnblockTime+0x38>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	4a04      	ldr	r2, [pc, #16]	; (800933c <prvResetNextTaskUnblockTime+0x3c>)
 800932a:	6013      	str	r3, [r2, #0]
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	20000cb8 	.word	0x20000cb8
 800933c:	20000d20 	.word	0x20000d20

08009340 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009346:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <xTaskGetSchedulerState+0x34>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d102      	bne.n	8009354 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800934e:	2301      	movs	r3, #1
 8009350:	607b      	str	r3, [r7, #4]
 8009352:	e008      	b.n	8009366 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009354:	4b08      	ldr	r3, [pc, #32]	; (8009378 <xTaskGetSchedulerState+0x38>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d102      	bne.n	8009362 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800935c:	2302      	movs	r3, #2
 800935e:	607b      	str	r3, [r7, #4]
 8009360:	e001      	b.n	8009366 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009362:	2300      	movs	r3, #0
 8009364:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009366:	687b      	ldr	r3, [r7, #4]
	}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr
 8009374:	20000d0c 	.word	0x20000d0c
 8009378:	20000d28 	.word	0x20000d28

0800937c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800937c:	b580      	push	{r7, lr}
 800937e:	b086      	sub	sp, #24
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009388:	2300      	movs	r3, #0
 800938a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d056      	beq.n	8009440 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009392:	4b2e      	ldr	r3, [pc, #184]	; (800944c <xTaskPriorityDisinherit+0xd0>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	429a      	cmp	r2, r3
 800939a:	d00a      	beq.n	80093b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	60fb      	str	r3, [r7, #12]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10a      	bne.n	80093d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	60bb      	str	r3, [r7, #8]
}
 80093cc:	bf00      	nop
 80093ce:	e7fe      	b.n	80093ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093d4:	1e5a      	subs	r2, r3, #1
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d02c      	beq.n	8009440 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d128      	bne.n	8009440 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe fb1a 	bl	8007a2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009404:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <xTaskPriorityDisinherit+0xd4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	429a      	cmp	r2, r3
 8009416:	d903      	bls.n	8009420 <xTaskPriorityDisinherit+0xa4>
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	4a0c      	ldr	r2, [pc, #48]	; (8009450 <xTaskPriorityDisinherit+0xd4>)
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009424:	4613      	mov	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4a09      	ldr	r2, [pc, #36]	; (8009454 <xTaskPriorityDisinherit+0xd8>)
 800942e:	441a      	add	r2, r3
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	3304      	adds	r3, #4
 8009434:	4619      	mov	r1, r3
 8009436:	4610      	mov	r0, r2
 8009438:	f7fe fa9b 	bl	8007972 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800943c:	2301      	movs	r3, #1
 800943e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009440:	697b      	ldr	r3, [r7, #20]
	}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	2000082c 	.word	0x2000082c
 8009450:	20000d08 	.word	0x20000d08
 8009454:	20000830 	.word	0x20000830

08009458 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009462:	4b21      	ldr	r3, [pc, #132]	; (80094e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009468:	4b20      	ldr	r3, [pc, #128]	; (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3304      	adds	r3, #4
 800946e:	4618      	mov	r0, r3
 8009470:	f7fe fadc 	bl	8007a2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800947a:	d10a      	bne.n	8009492 <prvAddCurrentTaskToDelayedList+0x3a>
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009482:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	3304      	adds	r3, #4
 8009488:	4619      	mov	r1, r3
 800948a:	4819      	ldr	r0, [pc, #100]	; (80094f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800948c:	f7fe fa71 	bl	8007972 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009490:	e026      	b.n	80094e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4413      	add	r3, r2
 8009498:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800949a:	4b14      	ldr	r3, [pc, #80]	; (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d209      	bcs.n	80094be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094aa:	4b12      	ldr	r3, [pc, #72]	; (80094f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	4b0f      	ldr	r3, [pc, #60]	; (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	3304      	adds	r3, #4
 80094b4:	4619      	mov	r1, r3
 80094b6:	4610      	mov	r0, r2
 80094b8:	f7fe fa7f 	bl	80079ba <vListInsert>
}
 80094bc:	e010      	b.n	80094e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094be:	4b0e      	ldr	r3, [pc, #56]	; (80094f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <prvAddCurrentTaskToDelayedList+0x94>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3304      	adds	r3, #4
 80094c8:	4619      	mov	r1, r3
 80094ca:	4610      	mov	r0, r2
 80094cc:	f7fe fa75 	bl	80079ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094d0:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d202      	bcs.n	80094e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094da:	4a08      	ldr	r2, [pc, #32]	; (80094fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	6013      	str	r3, [r2, #0]
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000d04 	.word	0x20000d04
 80094ec:	2000082c 	.word	0x2000082c
 80094f0:	20000cec 	.word	0x20000cec
 80094f4:	20000cbc 	.word	0x20000cbc
 80094f8:	20000cb8 	.word	0x20000cb8
 80094fc:	20000d20 	.word	0x20000d20

08009500 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b08a      	sub	sp, #40	; 0x28
 8009504:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800950a:	f000 fb07 	bl	8009b1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800950e:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <xTimerCreateTimerTask+0x80>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d021      	beq.n	800955a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800951a:	2300      	movs	r3, #0
 800951c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800951e:	1d3a      	adds	r2, r7, #4
 8009520:	f107 0108 	add.w	r1, r7, #8
 8009524:	f107 030c 	add.w	r3, r7, #12
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe f9db 	bl	80078e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	9202      	str	r2, [sp, #8]
 8009536:	9301      	str	r3, [sp, #4]
 8009538:	2302      	movs	r3, #2
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	2300      	movs	r3, #0
 800953e:	460a      	mov	r2, r1
 8009540:	4910      	ldr	r1, [pc, #64]	; (8009584 <xTimerCreateTimerTask+0x84>)
 8009542:	4811      	ldr	r0, [pc, #68]	; (8009588 <xTimerCreateTimerTask+0x88>)
 8009544:	f7ff f842 	bl	80085cc <xTaskCreateStatic>
 8009548:	4603      	mov	r3, r0
 800954a:	4a10      	ldr	r2, [pc, #64]	; (800958c <xTimerCreateTimerTask+0x8c>)
 800954c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800954e:	4b0f      	ldr	r3, [pc, #60]	; (800958c <xTimerCreateTimerTask+0x8c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009556:	2301      	movs	r3, #1
 8009558:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	613b      	str	r3, [r7, #16]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009576:	697b      	ldr	r3, [r7, #20]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20000d5c 	.word	0x20000d5c
 8009584:	0800a7d4 	.word	0x0800a7d4
 8009588:	080096c5 	.word	0x080096c5
 800958c:	20000d60 	.word	0x20000d60

08009590 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b08a      	sub	sp, #40	; 0x28
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	607a      	str	r2, [r7, #4]
 800959c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800959e:	2300      	movs	r3, #0
 80095a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10a      	bne.n	80095be <xTimerGenericCommand+0x2e>
	__asm volatile
 80095a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ac:	f383 8811 	msr	BASEPRI, r3
 80095b0:	f3bf 8f6f 	isb	sy
 80095b4:	f3bf 8f4f 	dsb	sy
 80095b8:	623b      	str	r3, [r7, #32]
}
 80095ba:	bf00      	nop
 80095bc:	e7fe      	b.n	80095bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095be:	4b1a      	ldr	r3, [pc, #104]	; (8009628 <xTimerGenericCommand+0x98>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d02a      	beq.n	800961c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b05      	cmp	r3, #5
 80095d6:	dc18      	bgt.n	800960a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095d8:	f7ff feb2 	bl	8009340 <xTaskGetSchedulerState>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d109      	bne.n	80095f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095e2:	4b11      	ldr	r3, [pc, #68]	; (8009628 <xTimerGenericCommand+0x98>)
 80095e4:	6818      	ldr	r0, [r3, #0]
 80095e6:	f107 0110 	add.w	r1, r7, #16
 80095ea:	2300      	movs	r3, #0
 80095ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ee:	f7fe fb85 	bl	8007cfc <xQueueGenericSend>
 80095f2:	6278      	str	r0, [r7, #36]	; 0x24
 80095f4:	e012      	b.n	800961c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095f6:	4b0c      	ldr	r3, [pc, #48]	; (8009628 <xTimerGenericCommand+0x98>)
 80095f8:	6818      	ldr	r0, [r3, #0]
 80095fa:	f107 0110 	add.w	r1, r7, #16
 80095fe:	2300      	movs	r3, #0
 8009600:	2200      	movs	r2, #0
 8009602:	f7fe fb7b 	bl	8007cfc <xQueueGenericSend>
 8009606:	6278      	str	r0, [r7, #36]	; 0x24
 8009608:	e008      	b.n	800961c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800960a:	4b07      	ldr	r3, [pc, #28]	; (8009628 <xTimerGenericCommand+0x98>)
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f107 0110 	add.w	r1, r7, #16
 8009612:	2300      	movs	r3, #0
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	f7fe fc6f 	bl	8007ef8 <xQueueGenericSendFromISR>
 800961a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800961e:	4618      	mov	r0, r3
 8009620:	3728      	adds	r7, #40	; 0x28
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000d5c 	.word	0x20000d5c

0800962c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af02      	add	r7, sp, #8
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009636:	4b22      	ldr	r3, [pc, #136]	; (80096c0 <prvProcessExpiredTimer+0x94>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	3304      	adds	r3, #4
 8009644:	4618      	mov	r0, r3
 8009646:	f7fe f9f1 	bl	8007a2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009650:	f003 0304 	and.w	r3, r3, #4
 8009654:	2b00      	cmp	r3, #0
 8009656:	d022      	beq.n	800969e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	699a      	ldr	r2, [r3, #24]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	18d1      	adds	r1, r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	6978      	ldr	r0, [r7, #20]
 8009666:	f000 f8d1 	bl	800980c <prvInsertTimerInActiveList>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01f      	beq.n	80096b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009670:	2300      	movs	r3, #0
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	2100      	movs	r1, #0
 800967a:	6978      	ldr	r0, [r7, #20]
 800967c:	f7ff ff88 	bl	8009590 <xTimerGenericCommand>
 8009680:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d113      	bne.n	80096b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968c:	f383 8811 	msr	BASEPRI, r3
 8009690:	f3bf 8f6f 	isb	sy
 8009694:	f3bf 8f4f 	dsb	sy
 8009698:	60fb      	str	r3, [r7, #12]
}
 800969a:	bf00      	nop
 800969c:	e7fe      	b.n	800969c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a4:	f023 0301 	bic.w	r3, r3, #1
 80096a8:	b2da      	uxtb	r2, r3
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	6978      	ldr	r0, [r7, #20]
 80096b6:	4798      	blx	r3
}
 80096b8:	bf00      	nop
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000d54 	.word	0x20000d54

080096c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096cc:	f107 0308 	add.w	r3, r7, #8
 80096d0:	4618      	mov	r0, r3
 80096d2:	f000 f857 	bl	8009784 <prvGetNextExpireTime>
 80096d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4619      	mov	r1, r3
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 f803 	bl	80096e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096e2:	f000 f8d5 	bl	8009890 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096e6:	e7f1      	b.n	80096cc <prvTimerTask+0x8>

080096e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096f2:	f7ff fa39 	bl	8008b68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096f6:	f107 0308 	add.w	r3, r7, #8
 80096fa:	4618      	mov	r0, r3
 80096fc:	f000 f866 	bl	80097cc <prvSampleTimeNow>
 8009700:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d130      	bne.n	800976a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <prvProcessTimerOrBlockTask+0x3c>
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	429a      	cmp	r2, r3
 8009714:	d806      	bhi.n	8009724 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009716:	f7ff fa35 	bl	8008b84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff ff85 	bl	800962c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009722:	e024      	b.n	800976e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d008      	beq.n	800973c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800972a:	4b13      	ldr	r3, [pc, #76]	; (8009778 <prvProcessTimerOrBlockTask+0x90>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <prvProcessTimerOrBlockTask+0x50>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <prvProcessTimerOrBlockTask+0x52>
 8009738:	2300      	movs	r3, #0
 800973a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800973c:	4b0f      	ldr	r3, [pc, #60]	; (800977c <prvProcessTimerOrBlockTask+0x94>)
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	683a      	ldr	r2, [r7, #0]
 8009748:	4619      	mov	r1, r3
 800974a:	f7fe ff0b 	bl	8008564 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800974e:	f7ff fa19 	bl	8008b84 <xTaskResumeAll>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009758:	4b09      	ldr	r3, [pc, #36]	; (8009780 <prvProcessTimerOrBlockTask+0x98>)
 800975a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	f3bf 8f6f 	isb	sy
}
 8009768:	e001      	b.n	800976e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800976a:	f7ff fa0b 	bl	8008b84 <xTaskResumeAll>
}
 800976e:	bf00      	nop
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000d58 	.word	0x20000d58
 800977c:	20000d5c 	.word	0x20000d5c
 8009780:	e000ed04 	.word	0xe000ed04

08009784 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800978c:	4b0e      	ldr	r3, [pc, #56]	; (80097c8 <prvGetNextExpireTime+0x44>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <prvGetNextExpireTime+0x16>
 8009796:	2201      	movs	r2, #1
 8009798:	e000      	b.n	800979c <prvGetNextExpireTime+0x18>
 800979a:	2200      	movs	r2, #0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d105      	bne.n	80097b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097a8:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <prvGetNextExpireTime+0x44>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	60fb      	str	r3, [r7, #12]
 80097b2:	e001      	b.n	80097b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097b8:	68fb      	ldr	r3, [r7, #12]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3714      	adds	r7, #20
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	20000d54 	.word	0x20000d54

080097cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097d4:	f7ff fa74 	bl	8008cc0 <xTaskGetTickCount>
 80097d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097da:	4b0b      	ldr	r3, [pc, #44]	; (8009808 <prvSampleTimeNow+0x3c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d205      	bcs.n	80097f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097e4:	f000 f936 	bl	8009a54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	601a      	str	r2, [r3, #0]
 80097ee:	e002      	b.n	80097f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097f6:	4a04      	ldr	r2, [pc, #16]	; (8009808 <prvSampleTimeNow+0x3c>)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097fc:	68fb      	ldr	r3, [r7, #12]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20000d64 	.word	0x20000d64

0800980c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af00      	add	r7, sp, #0
 8009812:	60f8      	str	r0, [r7, #12]
 8009814:	60b9      	str	r1, [r7, #8]
 8009816:	607a      	str	r2, [r7, #4]
 8009818:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800981a:	2300      	movs	r3, #0
 800981c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	429a      	cmp	r2, r3
 8009830:	d812      	bhi.n	8009858 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009832:	687a      	ldr	r2, [r7, #4]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	1ad2      	subs	r2, r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	429a      	cmp	r2, r3
 800983e:	d302      	bcc.n	8009846 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009840:	2301      	movs	r3, #1
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	e01b      	b.n	800987e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009846:	4b10      	ldr	r3, [pc, #64]	; (8009888 <prvInsertTimerInActiveList+0x7c>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3304      	adds	r3, #4
 800984e:	4619      	mov	r1, r3
 8009850:	4610      	mov	r0, r2
 8009852:	f7fe f8b2 	bl	80079ba <vListInsert>
 8009856:	e012      	b.n	800987e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	429a      	cmp	r2, r3
 800985e:	d206      	bcs.n	800986e <prvInsertTimerInActiveList+0x62>
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	429a      	cmp	r2, r3
 8009866:	d302      	bcc.n	800986e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009868:	2301      	movs	r3, #1
 800986a:	617b      	str	r3, [r7, #20]
 800986c:	e007      	b.n	800987e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800986e:	4b07      	ldr	r3, [pc, #28]	; (800988c <prvInsertTimerInActiveList+0x80>)
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	4610      	mov	r0, r2
 800987a:	f7fe f89e 	bl	80079ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800987e:	697b      	ldr	r3, [r7, #20]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3718      	adds	r7, #24
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20000d58 	.word	0x20000d58
 800988c:	20000d54 	.word	0x20000d54

08009890 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b08e      	sub	sp, #56	; 0x38
 8009894:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009896:	e0ca      	b.n	8009a2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	da18      	bge.n	80098d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800989e:	1d3b      	adds	r3, r7, #4
 80098a0:	3304      	adds	r3, #4
 80098a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80098aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ae:	f383 8811 	msr	BASEPRI, r3
 80098b2:	f3bf 8f6f 	isb	sy
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	61fb      	str	r3, [r7, #28]
}
 80098bc:	bf00      	nop
 80098be:	e7fe      	b.n	80098be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098c6:	6850      	ldr	r0, [r2, #4]
 80098c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098ca:	6892      	ldr	r2, [r2, #8]
 80098cc:	4611      	mov	r1, r2
 80098ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f2c0 80aa 	blt.w	8009a2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d004      	beq.n	80098ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e6:	3304      	adds	r3, #4
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7fe f89f 	bl	8007a2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098ee:	463b      	mov	r3, r7
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7ff ff6b 	bl	80097cc <prvSampleTimeNow>
 80098f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b09      	cmp	r3, #9
 80098fc:	f200 8097 	bhi.w	8009a2e <prvProcessReceivedCommands+0x19e>
 8009900:	a201      	add	r2, pc, #4	; (adr r2, 8009908 <prvProcessReceivedCommands+0x78>)
 8009902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009906:	bf00      	nop
 8009908:	08009931 	.word	0x08009931
 800990c:	08009931 	.word	0x08009931
 8009910:	08009931 	.word	0x08009931
 8009914:	080099a5 	.word	0x080099a5
 8009918:	080099b9 	.word	0x080099b9
 800991c:	08009a03 	.word	0x08009a03
 8009920:	08009931 	.word	0x08009931
 8009924:	08009931 	.word	0x08009931
 8009928:	080099a5 	.word	0x080099a5
 800992c:	080099b9 	.word	0x080099b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009936:	f043 0301 	orr.w	r3, r3, #1
 800993a:	b2da      	uxtb	r2, r3
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	18d1      	adds	r1, r2, r3
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800994e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009950:	f7ff ff5c 	bl	800980c <prvInsertTimerInActiveList>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d069      	beq.n	8009a2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b00      	cmp	r3, #0
 800996e:	d05e      	beq.n	8009a2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	441a      	add	r2, r3
 8009978:	2300      	movs	r3, #0
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	2300      	movs	r3, #0
 800997e:	2100      	movs	r1, #0
 8009980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009982:	f7ff fe05 	bl	8009590 <xTimerGenericCommand>
 8009986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d14f      	bne.n	8009a2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	61bb      	str	r3, [r7, #24]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099aa:	f023 0301 	bic.w	r3, r3, #1
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80099b6:	e03a      	b.n	8009a2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099be:	f043 0301 	orr.w	r3, r3, #1
 80099c2:	b2da      	uxtb	r2, r3
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80099d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	617b      	str	r3, [r7, #20]
}
 80099ea:	bf00      	nop
 80099ec:	e7fe      	b.n	80099ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	699a      	ldr	r2, [r3, #24]
 80099f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f4:	18d1      	adds	r1, r2, r3
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099fc:	f7ff ff06 	bl	800980c <prvInsertTimerInActiveList>
					break;
 8009a00:	e015      	b.n	8009a2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a08:	f003 0302 	and.w	r3, r3, #2
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d103      	bne.n	8009a18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009a10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a12:	f000 fbdd 	bl	800a1d0 <vPortFree>
 8009a16:	e00a      	b.n	8009a2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a1e:	f023 0301 	bic.w	r3, r3, #1
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a2a:	e000      	b.n	8009a2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a2e:	4b08      	ldr	r3, [pc, #32]	; (8009a50 <prvProcessReceivedCommands+0x1c0>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	1d39      	adds	r1, r7, #4
 8009a34:	2200      	movs	r2, #0
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe fafa 	bl	8008030 <xQueueReceive>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f47f af2a 	bne.w	8009898 <prvProcessReceivedCommands+0x8>
	}
}
 8009a44:	bf00      	nop
 8009a46:	bf00      	nop
 8009a48:	3730      	adds	r7, #48	; 0x30
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20000d5c 	.word	0x20000d5c

08009a54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b088      	sub	sp, #32
 8009a58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a5a:	e048      	b.n	8009aee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a5c:	4b2d      	ldr	r3, [pc, #180]	; (8009b14 <prvSwitchTimerLists+0xc0>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a66:	4b2b      	ldr	r3, [pc, #172]	; (8009b14 <prvSwitchTimerLists+0xc0>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3304      	adds	r3, #4
 8009a74:	4618      	mov	r0, r3
 8009a76:	f7fd ffd9 	bl	8007a2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6a1b      	ldr	r3, [r3, #32]
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a88:	f003 0304 	and.w	r3, r3, #4
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d02e      	beq.n	8009aee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	4413      	add	r3, r2
 8009a98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d90e      	bls.n	8009ac0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aae:	4b19      	ldr	r3, [pc, #100]	; (8009b14 <prvSwitchTimerLists+0xc0>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	4610      	mov	r0, r2
 8009aba:	f7fd ff7e 	bl	80079ba <vListInsert>
 8009abe:	e016      	b.n	8009aee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	693a      	ldr	r2, [r7, #16]
 8009ac8:	2100      	movs	r1, #0
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f7ff fd60 	bl	8009590 <xTimerGenericCommand>
 8009ad0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	603b      	str	r3, [r7, #0]
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aee:	4b09      	ldr	r3, [pc, #36]	; (8009b14 <prvSwitchTimerLists+0xc0>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1b1      	bne.n	8009a5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009af8:	4b06      	ldr	r3, [pc, #24]	; (8009b14 <prvSwitchTimerLists+0xc0>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009afe:	4b06      	ldr	r3, [pc, #24]	; (8009b18 <prvSwitchTimerLists+0xc4>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a04      	ldr	r2, [pc, #16]	; (8009b14 <prvSwitchTimerLists+0xc0>)
 8009b04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b06:	4a04      	ldr	r2, [pc, #16]	; (8009b18 <prvSwitchTimerLists+0xc4>)
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	6013      	str	r3, [r2, #0]
}
 8009b0c:	bf00      	nop
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	20000d54 	.word	0x20000d54
 8009b18:	20000d58 	.word	0x20000d58

08009b1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b22:	f000 f967 	bl	8009df4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b26:	4b15      	ldr	r3, [pc, #84]	; (8009b7c <prvCheckForValidListAndQueue+0x60>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d120      	bne.n	8009b70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b2e:	4814      	ldr	r0, [pc, #80]	; (8009b80 <prvCheckForValidListAndQueue+0x64>)
 8009b30:	f7fd fef2 	bl	8007918 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b34:	4813      	ldr	r0, [pc, #76]	; (8009b84 <prvCheckForValidListAndQueue+0x68>)
 8009b36:	f7fd feef 	bl	8007918 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b3a:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <prvCheckForValidListAndQueue+0x6c>)
 8009b3c:	4a10      	ldr	r2, [pc, #64]	; (8009b80 <prvCheckForValidListAndQueue+0x64>)
 8009b3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b40:	4b12      	ldr	r3, [pc, #72]	; (8009b8c <prvCheckForValidListAndQueue+0x70>)
 8009b42:	4a10      	ldr	r2, [pc, #64]	; (8009b84 <prvCheckForValidListAndQueue+0x68>)
 8009b44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b46:	2300      	movs	r3, #0
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4b11      	ldr	r3, [pc, #68]	; (8009b90 <prvCheckForValidListAndQueue+0x74>)
 8009b4c:	4a11      	ldr	r2, [pc, #68]	; (8009b94 <prvCheckForValidListAndQueue+0x78>)
 8009b4e:	2110      	movs	r1, #16
 8009b50:	200a      	movs	r0, #10
 8009b52:	f7fd fffd 	bl	8007b50 <xQueueGenericCreateStatic>
 8009b56:	4603      	mov	r3, r0
 8009b58:	4a08      	ldr	r2, [pc, #32]	; (8009b7c <prvCheckForValidListAndQueue+0x60>)
 8009b5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b5c:	4b07      	ldr	r3, [pc, #28]	; (8009b7c <prvCheckForValidListAndQueue+0x60>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d005      	beq.n	8009b70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b64:	4b05      	ldr	r3, [pc, #20]	; (8009b7c <prvCheckForValidListAndQueue+0x60>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	490b      	ldr	r1, [pc, #44]	; (8009b98 <prvCheckForValidListAndQueue+0x7c>)
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe fcd0 	bl	8008510 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b70:	f000 f970 	bl	8009e54 <vPortExitCritical>
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000d5c 	.word	0x20000d5c
 8009b80:	20000d2c 	.word	0x20000d2c
 8009b84:	20000d40 	.word	0x20000d40
 8009b88:	20000d54 	.word	0x20000d54
 8009b8c:	20000d58 	.word	0x20000d58
 8009b90:	20000e08 	.word	0x20000e08
 8009b94:	20000d68 	.word	0x20000d68
 8009b98:	0800a7dc 	.word	0x0800a7dc

08009b9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3b04      	subs	r3, #4
 8009bac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3b04      	subs	r3, #4
 8009bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f023 0201 	bic.w	r2, r3, #1
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3b04      	subs	r3, #4
 8009bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bcc:	4a0c      	ldr	r2, [pc, #48]	; (8009c00 <pxPortInitialiseStack+0x64>)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	3b14      	subs	r3, #20
 8009bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3b04      	subs	r3, #4
 8009be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f06f 0202 	mvn.w	r2, #2
 8009bea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3b20      	subs	r3, #32
 8009bf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	08009c05 	.word	0x08009c05

08009c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c0e:	4b12      	ldr	r3, [pc, #72]	; (8009c58 <prvTaskExitError+0x54>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c16:	d00a      	beq.n	8009c2e <prvTaskExitError+0x2a>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	60fb      	str	r3, [r7, #12]
}
 8009c2a:	bf00      	nop
 8009c2c:	e7fe      	b.n	8009c2c <prvTaskExitError+0x28>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	60bb      	str	r3, [r7, #8]
}
 8009c40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c42:	bf00      	nop
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0fc      	beq.n	8009c44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	2000001c 	.word	0x2000001c
 8009c5c:	00000000 	.word	0x00000000

08009c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c60:	4b07      	ldr	r3, [pc, #28]	; (8009c80 <pxCurrentTCBConst2>)
 8009c62:	6819      	ldr	r1, [r3, #0]
 8009c64:	6808      	ldr	r0, [r1, #0]
 8009c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6a:	f380 8809 	msr	PSP, r0
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f04f 0000 	mov.w	r0, #0
 8009c76:	f380 8811 	msr	BASEPRI, r0
 8009c7a:	4770      	bx	lr
 8009c7c:	f3af 8000 	nop.w

08009c80 <pxCurrentTCBConst2>:
 8009c80:	2000082c 	.word	0x2000082c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop

08009c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c88:	4808      	ldr	r0, [pc, #32]	; (8009cac <prvPortStartFirstTask+0x24>)
 8009c8a:	6800      	ldr	r0, [r0, #0]
 8009c8c:	6800      	ldr	r0, [r0, #0]
 8009c8e:	f380 8808 	msr	MSP, r0
 8009c92:	f04f 0000 	mov.w	r0, #0
 8009c96:	f380 8814 	msr	CONTROL, r0
 8009c9a:	b662      	cpsie	i
 8009c9c:	b661      	cpsie	f
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	df00      	svc	0
 8009ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009caa:	bf00      	nop
 8009cac:	e000ed08 	.word	0xe000ed08

08009cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009cb6:	4b46      	ldr	r3, [pc, #280]	; (8009dd0 <xPortStartScheduler+0x120>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a46      	ldr	r2, [pc, #280]	; (8009dd4 <xPortStartScheduler+0x124>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d10a      	bne.n	8009cd6 <xPortStartScheduler+0x26>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	613b      	str	r3, [r7, #16]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cd6:	4b3e      	ldr	r3, [pc, #248]	; (8009dd0 <xPortStartScheduler+0x120>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a3f      	ldr	r2, [pc, #252]	; (8009dd8 <xPortStartScheduler+0x128>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d10a      	bne.n	8009cf6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cf6:	4b39      	ldr	r3, [pc, #228]	; (8009ddc <xPortStartScheduler+0x12c>)
 8009cf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	22ff      	movs	r2, #255	; 0xff
 8009d06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	4b31      	ldr	r3, [pc, #196]	; (8009de0 <xPortStartScheduler+0x130>)
 8009d1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d1e:	4b31      	ldr	r3, [pc, #196]	; (8009de4 <xPortStartScheduler+0x134>)
 8009d20:	2207      	movs	r2, #7
 8009d22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d24:	e009      	b.n	8009d3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d26:	4b2f      	ldr	r3, [pc, #188]	; (8009de4 <xPortStartScheduler+0x134>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	4a2d      	ldr	r2, [pc, #180]	; (8009de4 <xPortStartScheduler+0x134>)
 8009d2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	005b      	lsls	r3, r3, #1
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d3a:	78fb      	ldrb	r3, [r7, #3]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d42:	2b80      	cmp	r3, #128	; 0x80
 8009d44:	d0ef      	beq.n	8009d26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d46:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <xPortStartScheduler+0x134>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f1c3 0307 	rsb	r3, r3, #7
 8009d4e:	2b04      	cmp	r3, #4
 8009d50:	d00a      	beq.n	8009d68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d56:	f383 8811 	msr	BASEPRI, r3
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	f3bf 8f4f 	dsb	sy
 8009d62:	60bb      	str	r3, [r7, #8]
}
 8009d64:	bf00      	nop
 8009d66:	e7fe      	b.n	8009d66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d68:	4b1e      	ldr	r3, [pc, #120]	; (8009de4 <xPortStartScheduler+0x134>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	4a1d      	ldr	r2, [pc, #116]	; (8009de4 <xPortStartScheduler+0x134>)
 8009d70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d72:	4b1c      	ldr	r3, [pc, #112]	; (8009de4 <xPortStartScheduler+0x134>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d7a:	4a1a      	ldr	r2, [pc, #104]	; (8009de4 <xPortStartScheduler+0x134>)
 8009d7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d86:	4b18      	ldr	r3, [pc, #96]	; (8009de8 <xPortStartScheduler+0x138>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a17      	ldr	r2, [pc, #92]	; (8009de8 <xPortStartScheduler+0x138>)
 8009d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d92:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <xPortStartScheduler+0x138>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a14      	ldr	r2, [pc, #80]	; (8009de8 <xPortStartScheduler+0x138>)
 8009d98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d9e:	f000 f8dd 	bl	8009f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009da2:	4b12      	ldr	r3, [pc, #72]	; (8009dec <xPortStartScheduler+0x13c>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009da8:	f000 f8fc 	bl	8009fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dac:	4b10      	ldr	r3, [pc, #64]	; (8009df0 <xPortStartScheduler+0x140>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a0f      	ldr	r2, [pc, #60]	; (8009df0 <xPortStartScheduler+0x140>)
 8009db2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009db6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009db8:	f7ff ff66 	bl	8009c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009dbc:	f7ff f84a 	bl	8008e54 <vTaskSwitchContext>
	prvTaskExitError();
 8009dc0:	f7ff ff20 	bl	8009c04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dc4:	2300      	movs	r3, #0
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3718      	adds	r7, #24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	e000ed00 	.word	0xe000ed00
 8009dd4:	410fc271 	.word	0x410fc271
 8009dd8:	410fc270 	.word	0x410fc270
 8009ddc:	e000e400 	.word	0xe000e400
 8009de0:	20000e58 	.word	0x20000e58
 8009de4:	20000e5c 	.word	0x20000e5c
 8009de8:	e000ed20 	.word	0xe000ed20
 8009dec:	2000001c 	.word	0x2000001c
 8009df0:	e000ef34 	.word	0xe000ef34

08009df4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	607b      	str	r3, [r7, #4]
}
 8009e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e0e:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <vPortEnterCritical+0x58>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	4a0d      	ldr	r2, [pc, #52]	; (8009e4c <vPortEnterCritical+0x58>)
 8009e16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e18:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <vPortEnterCritical+0x58>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d10f      	bne.n	8009e40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e20:	4b0b      	ldr	r3, [pc, #44]	; (8009e50 <vPortEnterCritical+0x5c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	603b      	str	r3, [r7, #0]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <vPortEnterCritical+0x4a>
	}
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	2000001c 	.word	0x2000001c
 8009e50:	e000ed04 	.word	0xe000ed04

08009e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e5a:	4b12      	ldr	r3, [pc, #72]	; (8009ea4 <vPortExitCritical+0x50>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <vPortExitCritical+0x24>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	607b      	str	r3, [r7, #4]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e78:	4b0a      	ldr	r3, [pc, #40]	; (8009ea4 <vPortExitCritical+0x50>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	4a09      	ldr	r2, [pc, #36]	; (8009ea4 <vPortExitCritical+0x50>)
 8009e80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e82:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <vPortExitCritical+0x50>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d105      	bne.n	8009e96 <vPortExitCritical+0x42>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	f383 8811 	msr	BASEPRI, r3
}
 8009e94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	2000001c 	.word	0x2000001c
	...

08009eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009eb0:	f3ef 8009 	mrs	r0, PSP
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	4b15      	ldr	r3, [pc, #84]	; (8009f10 <pxCurrentTCBConst>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	f01e 0f10 	tst.w	lr, #16
 8009ec0:	bf08      	it	eq
 8009ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eca:	6010      	str	r0, [r2, #0]
 8009ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ed0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ed4:	f380 8811 	msr	BASEPRI, r0
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f7fe ffb8 	bl	8008e54 <vTaskSwitchContext>
 8009ee4:	f04f 0000 	mov.w	r0, #0
 8009ee8:	f380 8811 	msr	BASEPRI, r0
 8009eec:	bc09      	pop	{r0, r3}
 8009eee:	6819      	ldr	r1, [r3, #0]
 8009ef0:	6808      	ldr	r0, [r1, #0]
 8009ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef6:	f01e 0f10 	tst.w	lr, #16
 8009efa:	bf08      	it	eq
 8009efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f00:	f380 8809 	msr	PSP, r0
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	f3af 8000 	nop.w

08009f10 <pxCurrentTCBConst>:
 8009f10:	2000082c 	.word	0x2000082c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop

08009f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	607b      	str	r3, [r7, #4]
}
 8009f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f32:	f7fe fed5 	bl	8008ce0 <xTaskIncrementTick>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f3c:	4b06      	ldr	r3, [pc, #24]	; (8009f58 <xPortSysTickHandler+0x40>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	2300      	movs	r3, #0
 8009f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	f383 8811 	msr	BASEPRI, r3
}
 8009f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f60:	4b0b      	ldr	r3, [pc, #44]	; (8009f90 <vPortSetupTimerInterrupt+0x34>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f66:	4b0b      	ldr	r3, [pc, #44]	; (8009f94 <vPortSetupTimerInterrupt+0x38>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	; (8009f98 <vPortSetupTimerInterrupt+0x3c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0a      	ldr	r2, [pc, #40]	; (8009f9c <vPortSetupTimerInterrupt+0x40>)
 8009f72:	fba2 2303 	umull	r2, r3, r2, r3
 8009f76:	099b      	lsrs	r3, r3, #6
 8009f78:	4a09      	ldr	r2, [pc, #36]	; (8009fa0 <vPortSetupTimerInterrupt+0x44>)
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f7e:	4b04      	ldr	r3, [pc, #16]	; (8009f90 <vPortSetupTimerInterrupt+0x34>)
 8009f80:	2207      	movs	r2, #7
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	e000e010 	.word	0xe000e010
 8009f94:	e000e018 	.word	0xe000e018
 8009f98:	20000000 	.word	0x20000000
 8009f9c:	10624dd3 	.word	0x10624dd3
 8009fa0:	e000e014 	.word	0xe000e014

08009fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009fb4 <vPortEnableVFP+0x10>
 8009fa8:	6801      	ldr	r1, [r0, #0]
 8009faa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009fae:	6001      	str	r1, [r0, #0]
 8009fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fb2:	bf00      	nop
 8009fb4:	e000ed88 	.word	0xe000ed88

08009fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fbe:	f3ef 8305 	mrs	r3, IPSR
 8009fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b0f      	cmp	r3, #15
 8009fc8:	d914      	bls.n	8009ff4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fca:	4a17      	ldr	r2, [pc, #92]	; (800a028 <vPortValidateInterruptPriority+0x70>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fd4:	4b15      	ldr	r3, [pc, #84]	; (800a02c <vPortValidateInterruptPriority+0x74>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	7afa      	ldrb	r2, [r7, #11]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d20a      	bcs.n	8009ff4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	607b      	str	r3, [r7, #4]
}
 8009ff0:	bf00      	nop
 8009ff2:	e7fe      	b.n	8009ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ff4:	4b0e      	ldr	r3, [pc, #56]	; (800a030 <vPortValidateInterruptPriority+0x78>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ffc:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <vPortValidateInterruptPriority+0x7c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	429a      	cmp	r2, r3
 800a002:	d90a      	bls.n	800a01a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	603b      	str	r3, [r7, #0]
}
 800a016:	bf00      	nop
 800a018:	e7fe      	b.n	800a018 <vPortValidateInterruptPriority+0x60>
	}
 800a01a:	bf00      	nop
 800a01c:	3714      	adds	r7, #20
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr
 800a026:	bf00      	nop
 800a028:	e000e3f0 	.word	0xe000e3f0
 800a02c:	20000e58 	.word	0x20000e58
 800a030:	e000ed0c 	.word	0xe000ed0c
 800a034:	20000e5c 	.word	0x20000e5c

0800a038 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08a      	sub	sp, #40	; 0x28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a040:	2300      	movs	r3, #0
 800a042:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a044:	f7fe fd90 	bl	8008b68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a048:	4b5b      	ldr	r3, [pc, #364]	; (800a1b8 <pvPortMalloc+0x180>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a050:	f000 f920 	bl	800a294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a054:	4b59      	ldr	r3, [pc, #356]	; (800a1bc <pvPortMalloc+0x184>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4013      	ands	r3, r2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f040 8093 	bne.w	800a188 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01d      	beq.n	800a0a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a068:	2208      	movs	r2, #8
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4413      	add	r3, r2
 800a06e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	2b00      	cmp	r3, #0
 800a078:	d014      	beq.n	800a0a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f023 0307 	bic.w	r3, r3, #7
 800a080:	3308      	adds	r3, #8
 800a082:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f003 0307 	and.w	r3, r3, #7
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d00a      	beq.n	800a0a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	617b      	str	r3, [r7, #20]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d06e      	beq.n	800a188 <pvPortMalloc+0x150>
 800a0aa:	4b45      	ldr	r3, [pc, #276]	; (800a1c0 <pvPortMalloc+0x188>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d869      	bhi.n	800a188 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0b4:	4b43      	ldr	r3, [pc, #268]	; (800a1c4 <pvPortMalloc+0x18c>)
 800a0b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0b8:	4b42      	ldr	r3, [pc, #264]	; (800a1c4 <pvPortMalloc+0x18c>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0be:	e004      	b.n	800a0ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d903      	bls.n	800a0dc <pvPortMalloc+0xa4>
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1f1      	bne.n	800a0c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0dc:	4b36      	ldr	r3, [pc, #216]	; (800a1b8 <pvPortMalloc+0x180>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d050      	beq.n	800a188 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	4413      	add	r3, r2
 800a0ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	6a3b      	ldr	r3, [r7, #32]
 800a0f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	1ad2      	subs	r2, r2, r3
 800a100:	2308      	movs	r3, #8
 800a102:	005b      	lsls	r3, r3, #1
 800a104:	429a      	cmp	r2, r3
 800a106:	d91f      	bls.n	800a148 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4413      	add	r3, r2
 800a10e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <pvPortMalloc+0xf8>
	__asm volatile
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	613b      	str	r3, [r7, #16]
}
 800a12c:	bf00      	nop
 800a12e:	e7fe      	b.n	800a12e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	1ad2      	subs	r2, r2, r3
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a142:	69b8      	ldr	r0, [r7, #24]
 800a144:	f000 f908 	bl	800a358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a148:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <pvPortMalloc+0x188>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	4a1b      	ldr	r2, [pc, #108]	; (800a1c0 <pvPortMalloc+0x188>)
 800a154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a156:	4b1a      	ldr	r3, [pc, #104]	; (800a1c0 <pvPortMalloc+0x188>)
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	4b1b      	ldr	r3, [pc, #108]	; (800a1c8 <pvPortMalloc+0x190>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d203      	bcs.n	800a16a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a162:	4b17      	ldr	r3, [pc, #92]	; (800a1c0 <pvPortMalloc+0x188>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a18      	ldr	r2, [pc, #96]	; (800a1c8 <pvPortMalloc+0x190>)
 800a168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <pvPortMalloc+0x184>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	431a      	orrs	r2, r3
 800a174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a17e:	4b13      	ldr	r3, [pc, #76]	; (800a1cc <pvPortMalloc+0x194>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3301      	adds	r3, #1
 800a184:	4a11      	ldr	r2, [pc, #68]	; (800a1cc <pvPortMalloc+0x194>)
 800a186:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a188:	f7fe fcfc 	bl	8008b84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	f003 0307 	and.w	r3, r3, #7
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <pvPortMalloc+0x174>
	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	60fb      	str	r3, [r7, #12]
}
 800a1a8:	bf00      	nop
 800a1aa:	e7fe      	b.n	800a1aa <pvPortMalloc+0x172>
	return pvReturn;
 800a1ac:	69fb      	ldr	r3, [r7, #28]
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3728      	adds	r7, #40	; 0x28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20004a68 	.word	0x20004a68
 800a1bc:	20004a7c 	.word	0x20004a7c
 800a1c0:	20004a6c 	.word	0x20004a6c
 800a1c4:	20004a60 	.word	0x20004a60
 800a1c8:	20004a70 	.word	0x20004a70
 800a1cc:	20004a74 	.word	0x20004a74

0800a1d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d04d      	beq.n	800a27e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1e2:	2308      	movs	r3, #8
 800a1e4:	425b      	negs	r3, r3
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	4b24      	ldr	r3, [pc, #144]	; (800a288 <vPortFree+0xb8>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10a      	bne.n	800a214 <vPortFree+0x44>
	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	60fb      	str	r3, [r7, #12]
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00a      	beq.n	800a232 <vPortFree+0x62>
	__asm volatile
 800a21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a220:	f383 8811 	msr	BASEPRI, r3
 800a224:	f3bf 8f6f 	isb	sy
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	60bb      	str	r3, [r7, #8]
}
 800a22e:	bf00      	nop
 800a230:	e7fe      	b.n	800a230 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	685a      	ldr	r2, [r3, #4]
 800a236:	4b14      	ldr	r3, [pc, #80]	; (800a288 <vPortFree+0xb8>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4013      	ands	r3, r2
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d01e      	beq.n	800a27e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d11a      	bne.n	800a27e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	4b0e      	ldr	r3, [pc, #56]	; (800a288 <vPortFree+0xb8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	43db      	mvns	r3, r3
 800a252:	401a      	ands	r2, r3
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a258:	f7fe fc86 	bl	8008b68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a25c:	693b      	ldr	r3, [r7, #16]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	4b0a      	ldr	r3, [pc, #40]	; (800a28c <vPortFree+0xbc>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4413      	add	r3, r2
 800a266:	4a09      	ldr	r2, [pc, #36]	; (800a28c <vPortFree+0xbc>)
 800a268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a26a:	6938      	ldr	r0, [r7, #16]
 800a26c:	f000 f874 	bl	800a358 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a270:	4b07      	ldr	r3, [pc, #28]	; (800a290 <vPortFree+0xc0>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	3301      	adds	r3, #1
 800a276:	4a06      	ldr	r2, [pc, #24]	; (800a290 <vPortFree+0xc0>)
 800a278:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a27a:	f7fe fc83 	bl	8008b84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a27e:	bf00      	nop
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20004a7c 	.word	0x20004a7c
 800a28c:	20004a6c 	.word	0x20004a6c
 800a290:	20004a78 	.word	0x20004a78

0800a294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a29a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a29e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2a0:	4b27      	ldr	r3, [pc, #156]	; (800a340 <prvHeapInit+0xac>)
 800a2a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d00c      	beq.n	800a2c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	3307      	adds	r3, #7
 800a2b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0307 	bic.w	r3, r3, #7
 800a2ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	4a1f      	ldr	r2, [pc, #124]	; (800a340 <prvHeapInit+0xac>)
 800a2c4:	4413      	add	r3, r2
 800a2c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2cc:	4a1d      	ldr	r2, [pc, #116]	; (800a344 <prvHeapInit+0xb0>)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2d2:	4b1c      	ldr	r3, [pc, #112]	; (800a344 <prvHeapInit+0xb0>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	4413      	add	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2e0:	2208      	movs	r2, #8
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	1a9b      	subs	r3, r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f023 0307 	bic.w	r3, r3, #7
 800a2ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4a15      	ldr	r2, [pc, #84]	; (800a348 <prvHeapInit+0xb4>)
 800a2f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2f6:	4b14      	ldr	r3, [pc, #80]	; (800a348 <prvHeapInit+0xb4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2fe:	4b12      	ldr	r3, [pc, #72]	; (800a348 <prvHeapInit+0xb4>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2200      	movs	r2, #0
 800a304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a314:	4b0c      	ldr	r3, [pc, #48]	; (800a348 <prvHeapInit+0xb4>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	4a0a      	ldr	r2, [pc, #40]	; (800a34c <prvHeapInit+0xb8>)
 800a322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4a09      	ldr	r2, [pc, #36]	; (800a350 <prvHeapInit+0xbc>)
 800a32a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a32c:	4b09      	ldr	r3, [pc, #36]	; (800a354 <prvHeapInit+0xc0>)
 800a32e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a332:	601a      	str	r2, [r3, #0]
}
 800a334:	bf00      	nop
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	20000e60 	.word	0x20000e60
 800a344:	20004a60 	.word	0x20004a60
 800a348:	20004a68 	.word	0x20004a68
 800a34c:	20004a70 	.word	0x20004a70
 800a350:	20004a6c 	.word	0x20004a6c
 800a354:	20004a7c 	.word	0x20004a7c

0800a358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a360:	4b28      	ldr	r3, [pc, #160]	; (800a404 <prvInsertBlockIntoFreeList+0xac>)
 800a362:	60fb      	str	r3, [r7, #12]
 800a364:	e002      	b.n	800a36c <prvInsertBlockIntoFreeList+0x14>
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	429a      	cmp	r2, r3
 800a374:	d8f7      	bhi.n	800a366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	4413      	add	r3, r2
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d108      	bne.n	800a39a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	441a      	add	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	441a      	add	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d118      	bne.n	800a3e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	4b15      	ldr	r3, [pc, #84]	; (800a408 <prvInsertBlockIntoFreeList+0xb0>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d00d      	beq.n	800a3d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685a      	ldr	r2, [r3, #4]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	441a      	add	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	601a      	str	r2, [r3, #0]
 800a3d4:	e008      	b.n	800a3e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3d6:	4b0c      	ldr	r3, [pc, #48]	; (800a408 <prvInsertBlockIntoFreeList+0xb0>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	601a      	str	r2, [r3, #0]
 800a3de:	e003      	b.n	800a3e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d002      	beq.n	800a3f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	20004a60 	.word	0x20004a60
 800a408:	20004a68 	.word	0x20004a68

0800a40c <__errno>:
 800a40c:	4b01      	ldr	r3, [pc, #4]	; (800a414 <__errno+0x8>)
 800a40e:	6818      	ldr	r0, [r3, #0]
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	20000020 	.word	0x20000020

0800a418 <__libc_init_array>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	4d0d      	ldr	r5, [pc, #52]	; (800a450 <__libc_init_array+0x38>)
 800a41c:	4c0d      	ldr	r4, [pc, #52]	; (800a454 <__libc_init_array+0x3c>)
 800a41e:	1b64      	subs	r4, r4, r5
 800a420:	10a4      	asrs	r4, r4, #2
 800a422:	2600      	movs	r6, #0
 800a424:	42a6      	cmp	r6, r4
 800a426:	d109      	bne.n	800a43c <__libc_init_array+0x24>
 800a428:	4d0b      	ldr	r5, [pc, #44]	; (800a458 <__libc_init_array+0x40>)
 800a42a:	4c0c      	ldr	r4, [pc, #48]	; (800a45c <__libc_init_array+0x44>)
 800a42c:	f000 f970 	bl	800a710 <_init>
 800a430:	1b64      	subs	r4, r4, r5
 800a432:	10a4      	asrs	r4, r4, #2
 800a434:	2600      	movs	r6, #0
 800a436:	42a6      	cmp	r6, r4
 800a438:	d105      	bne.n	800a446 <__libc_init_array+0x2e>
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a440:	4798      	blx	r3
 800a442:	3601      	adds	r6, #1
 800a444:	e7ee      	b.n	800a424 <__libc_init_array+0xc>
 800a446:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44a:	4798      	blx	r3
 800a44c:	3601      	adds	r6, #1
 800a44e:	e7f2      	b.n	800a436 <__libc_init_array+0x1e>
 800a450:	08028648 	.word	0x08028648
 800a454:	08028648 	.word	0x08028648
 800a458:	08028648 	.word	0x08028648
 800a45c:	0802864c 	.word	0x0802864c

0800a460 <__retarget_lock_acquire_recursive>:
 800a460:	4770      	bx	lr

0800a462 <__retarget_lock_release_recursive>:
 800a462:	4770      	bx	lr

0800a464 <malloc>:
 800a464:	4b02      	ldr	r3, [pc, #8]	; (800a470 <malloc+0xc>)
 800a466:	4601      	mov	r1, r0
 800a468:	6818      	ldr	r0, [r3, #0]
 800a46a:	f000 b871 	b.w	800a550 <_malloc_r>
 800a46e:	bf00      	nop
 800a470:	20000020 	.word	0x20000020

0800a474 <free>:
 800a474:	4b02      	ldr	r3, [pc, #8]	; (800a480 <free+0xc>)
 800a476:	4601      	mov	r1, r0
 800a478:	6818      	ldr	r0, [r3, #0]
 800a47a:	f000 b819 	b.w	800a4b0 <_free_r>
 800a47e:	bf00      	nop
 800a480:	20000020 	.word	0x20000020

0800a484 <memcpy>:
 800a484:	440a      	add	r2, r1
 800a486:	4291      	cmp	r1, r2
 800a488:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a48c:	d100      	bne.n	800a490 <memcpy+0xc>
 800a48e:	4770      	bx	lr
 800a490:	b510      	push	{r4, lr}
 800a492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a49a:	4291      	cmp	r1, r2
 800a49c:	d1f9      	bne.n	800a492 <memcpy+0xe>
 800a49e:	bd10      	pop	{r4, pc}

0800a4a0 <memset>:
 800a4a0:	4402      	add	r2, r0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d100      	bne.n	800a4aa <memset+0xa>
 800a4a8:	4770      	bx	lr
 800a4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a4ae:	e7f9      	b.n	800a4a4 <memset+0x4>

0800a4b0 <_free_r>:
 800a4b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4b2:	2900      	cmp	r1, #0
 800a4b4:	d048      	beq.n	800a548 <_free_r+0x98>
 800a4b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ba:	9001      	str	r0, [sp, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	f1a1 0404 	sub.w	r4, r1, #4
 800a4c2:	bfb8      	it	lt
 800a4c4:	18e4      	addlt	r4, r4, r3
 800a4c6:	f000 f917 	bl	800a6f8 <__malloc_lock>
 800a4ca:	4a20      	ldr	r2, [pc, #128]	; (800a54c <_free_r+0x9c>)
 800a4cc:	9801      	ldr	r0, [sp, #4]
 800a4ce:	6813      	ldr	r3, [r2, #0]
 800a4d0:	4615      	mov	r5, r2
 800a4d2:	b933      	cbnz	r3, 800a4e2 <_free_r+0x32>
 800a4d4:	6063      	str	r3, [r4, #4]
 800a4d6:	6014      	str	r4, [r2, #0]
 800a4d8:	b003      	add	sp, #12
 800a4da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4de:	f000 b911 	b.w	800a704 <__malloc_unlock>
 800a4e2:	42a3      	cmp	r3, r4
 800a4e4:	d90b      	bls.n	800a4fe <_free_r+0x4e>
 800a4e6:	6821      	ldr	r1, [r4, #0]
 800a4e8:	1862      	adds	r2, r4, r1
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	bf04      	itt	eq
 800a4ee:	681a      	ldreq	r2, [r3, #0]
 800a4f0:	685b      	ldreq	r3, [r3, #4]
 800a4f2:	6063      	str	r3, [r4, #4]
 800a4f4:	bf04      	itt	eq
 800a4f6:	1852      	addeq	r2, r2, r1
 800a4f8:	6022      	streq	r2, [r4, #0]
 800a4fa:	602c      	str	r4, [r5, #0]
 800a4fc:	e7ec      	b.n	800a4d8 <_free_r+0x28>
 800a4fe:	461a      	mov	r2, r3
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	b10b      	cbz	r3, 800a508 <_free_r+0x58>
 800a504:	42a3      	cmp	r3, r4
 800a506:	d9fa      	bls.n	800a4fe <_free_r+0x4e>
 800a508:	6811      	ldr	r1, [r2, #0]
 800a50a:	1855      	adds	r5, r2, r1
 800a50c:	42a5      	cmp	r5, r4
 800a50e:	d10b      	bne.n	800a528 <_free_r+0x78>
 800a510:	6824      	ldr	r4, [r4, #0]
 800a512:	4421      	add	r1, r4
 800a514:	1854      	adds	r4, r2, r1
 800a516:	42a3      	cmp	r3, r4
 800a518:	6011      	str	r1, [r2, #0]
 800a51a:	d1dd      	bne.n	800a4d8 <_free_r+0x28>
 800a51c:	681c      	ldr	r4, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	6053      	str	r3, [r2, #4]
 800a522:	4421      	add	r1, r4
 800a524:	6011      	str	r1, [r2, #0]
 800a526:	e7d7      	b.n	800a4d8 <_free_r+0x28>
 800a528:	d902      	bls.n	800a530 <_free_r+0x80>
 800a52a:	230c      	movs	r3, #12
 800a52c:	6003      	str	r3, [r0, #0]
 800a52e:	e7d3      	b.n	800a4d8 <_free_r+0x28>
 800a530:	6825      	ldr	r5, [r4, #0]
 800a532:	1961      	adds	r1, r4, r5
 800a534:	428b      	cmp	r3, r1
 800a536:	bf04      	itt	eq
 800a538:	6819      	ldreq	r1, [r3, #0]
 800a53a:	685b      	ldreq	r3, [r3, #4]
 800a53c:	6063      	str	r3, [r4, #4]
 800a53e:	bf04      	itt	eq
 800a540:	1949      	addeq	r1, r1, r5
 800a542:	6021      	streq	r1, [r4, #0]
 800a544:	6054      	str	r4, [r2, #4]
 800a546:	e7c7      	b.n	800a4d8 <_free_r+0x28>
 800a548:	b003      	add	sp, #12
 800a54a:	bd30      	pop	{r4, r5, pc}
 800a54c:	20004a80 	.word	0x20004a80

0800a550 <_malloc_r>:
 800a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a552:	1ccd      	adds	r5, r1, #3
 800a554:	f025 0503 	bic.w	r5, r5, #3
 800a558:	3508      	adds	r5, #8
 800a55a:	2d0c      	cmp	r5, #12
 800a55c:	bf38      	it	cc
 800a55e:	250c      	movcc	r5, #12
 800a560:	2d00      	cmp	r5, #0
 800a562:	4606      	mov	r6, r0
 800a564:	db01      	blt.n	800a56a <_malloc_r+0x1a>
 800a566:	42a9      	cmp	r1, r5
 800a568:	d903      	bls.n	800a572 <_malloc_r+0x22>
 800a56a:	230c      	movs	r3, #12
 800a56c:	6033      	str	r3, [r6, #0]
 800a56e:	2000      	movs	r0, #0
 800a570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a572:	f000 f8c1 	bl	800a6f8 <__malloc_lock>
 800a576:	4921      	ldr	r1, [pc, #132]	; (800a5fc <_malloc_r+0xac>)
 800a578:	680a      	ldr	r2, [r1, #0]
 800a57a:	4614      	mov	r4, r2
 800a57c:	b99c      	cbnz	r4, 800a5a6 <_malloc_r+0x56>
 800a57e:	4f20      	ldr	r7, [pc, #128]	; (800a600 <_malloc_r+0xb0>)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	b923      	cbnz	r3, 800a58e <_malloc_r+0x3e>
 800a584:	4621      	mov	r1, r4
 800a586:	4630      	mov	r0, r6
 800a588:	f000 f8a6 	bl	800a6d8 <_sbrk_r>
 800a58c:	6038      	str	r0, [r7, #0]
 800a58e:	4629      	mov	r1, r5
 800a590:	4630      	mov	r0, r6
 800a592:	f000 f8a1 	bl	800a6d8 <_sbrk_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d123      	bne.n	800a5e2 <_malloc_r+0x92>
 800a59a:	230c      	movs	r3, #12
 800a59c:	6033      	str	r3, [r6, #0]
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f000 f8b0 	bl	800a704 <__malloc_unlock>
 800a5a4:	e7e3      	b.n	800a56e <_malloc_r+0x1e>
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	1b5b      	subs	r3, r3, r5
 800a5aa:	d417      	bmi.n	800a5dc <_malloc_r+0x8c>
 800a5ac:	2b0b      	cmp	r3, #11
 800a5ae:	d903      	bls.n	800a5b8 <_malloc_r+0x68>
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	441c      	add	r4, r3
 800a5b4:	6025      	str	r5, [r4, #0]
 800a5b6:	e004      	b.n	800a5c2 <_malloc_r+0x72>
 800a5b8:	6863      	ldr	r3, [r4, #4]
 800a5ba:	42a2      	cmp	r2, r4
 800a5bc:	bf0c      	ite	eq
 800a5be:	600b      	streq	r3, [r1, #0]
 800a5c0:	6053      	strne	r3, [r2, #4]
 800a5c2:	4630      	mov	r0, r6
 800a5c4:	f000 f89e 	bl	800a704 <__malloc_unlock>
 800a5c8:	f104 000b 	add.w	r0, r4, #11
 800a5cc:	1d23      	adds	r3, r4, #4
 800a5ce:	f020 0007 	bic.w	r0, r0, #7
 800a5d2:	1ac2      	subs	r2, r0, r3
 800a5d4:	d0cc      	beq.n	800a570 <_malloc_r+0x20>
 800a5d6:	1a1b      	subs	r3, r3, r0
 800a5d8:	50a3      	str	r3, [r4, r2]
 800a5da:	e7c9      	b.n	800a570 <_malloc_r+0x20>
 800a5dc:	4622      	mov	r2, r4
 800a5de:	6864      	ldr	r4, [r4, #4]
 800a5e0:	e7cc      	b.n	800a57c <_malloc_r+0x2c>
 800a5e2:	1cc4      	adds	r4, r0, #3
 800a5e4:	f024 0403 	bic.w	r4, r4, #3
 800a5e8:	42a0      	cmp	r0, r4
 800a5ea:	d0e3      	beq.n	800a5b4 <_malloc_r+0x64>
 800a5ec:	1a21      	subs	r1, r4, r0
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f000 f872 	bl	800a6d8 <_sbrk_r>
 800a5f4:	3001      	adds	r0, #1
 800a5f6:	d1dd      	bne.n	800a5b4 <_malloc_r+0x64>
 800a5f8:	e7cf      	b.n	800a59a <_malloc_r+0x4a>
 800a5fa:	bf00      	nop
 800a5fc:	20004a80 	.word	0x20004a80
 800a600:	20004a84 	.word	0x20004a84

0800a604 <cleanup_glue>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	460c      	mov	r4, r1
 800a608:	6809      	ldr	r1, [r1, #0]
 800a60a:	4605      	mov	r5, r0
 800a60c:	b109      	cbz	r1, 800a612 <cleanup_glue+0xe>
 800a60e:	f7ff fff9 	bl	800a604 <cleanup_glue>
 800a612:	4621      	mov	r1, r4
 800a614:	4628      	mov	r0, r5
 800a616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a61a:	f7ff bf49 	b.w	800a4b0 <_free_r>
	...

0800a620 <_reclaim_reent>:
 800a620:	4b2c      	ldr	r3, [pc, #176]	; (800a6d4 <_reclaim_reent+0xb4>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4283      	cmp	r3, r0
 800a626:	b570      	push	{r4, r5, r6, lr}
 800a628:	4604      	mov	r4, r0
 800a62a:	d051      	beq.n	800a6d0 <_reclaim_reent+0xb0>
 800a62c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a62e:	b143      	cbz	r3, 800a642 <_reclaim_reent+0x22>
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d14a      	bne.n	800a6cc <_reclaim_reent+0xac>
 800a636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a638:	6819      	ldr	r1, [r3, #0]
 800a63a:	b111      	cbz	r1, 800a642 <_reclaim_reent+0x22>
 800a63c:	4620      	mov	r0, r4
 800a63e:	f7ff ff37 	bl	800a4b0 <_free_r>
 800a642:	6961      	ldr	r1, [r4, #20]
 800a644:	b111      	cbz	r1, 800a64c <_reclaim_reent+0x2c>
 800a646:	4620      	mov	r0, r4
 800a648:	f7ff ff32 	bl	800a4b0 <_free_r>
 800a64c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a64e:	b111      	cbz	r1, 800a656 <_reclaim_reent+0x36>
 800a650:	4620      	mov	r0, r4
 800a652:	f7ff ff2d 	bl	800a4b0 <_free_r>
 800a656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a658:	b111      	cbz	r1, 800a660 <_reclaim_reent+0x40>
 800a65a:	4620      	mov	r0, r4
 800a65c:	f7ff ff28 	bl	800a4b0 <_free_r>
 800a660:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a662:	b111      	cbz	r1, 800a66a <_reclaim_reent+0x4a>
 800a664:	4620      	mov	r0, r4
 800a666:	f7ff ff23 	bl	800a4b0 <_free_r>
 800a66a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a66c:	b111      	cbz	r1, 800a674 <_reclaim_reent+0x54>
 800a66e:	4620      	mov	r0, r4
 800a670:	f7ff ff1e 	bl	800a4b0 <_free_r>
 800a674:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a676:	b111      	cbz	r1, 800a67e <_reclaim_reent+0x5e>
 800a678:	4620      	mov	r0, r4
 800a67a:	f7ff ff19 	bl	800a4b0 <_free_r>
 800a67e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a680:	b111      	cbz	r1, 800a688 <_reclaim_reent+0x68>
 800a682:	4620      	mov	r0, r4
 800a684:	f7ff ff14 	bl	800a4b0 <_free_r>
 800a688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a68a:	b111      	cbz	r1, 800a692 <_reclaim_reent+0x72>
 800a68c:	4620      	mov	r0, r4
 800a68e:	f7ff ff0f 	bl	800a4b0 <_free_r>
 800a692:	69a3      	ldr	r3, [r4, #24]
 800a694:	b1e3      	cbz	r3, 800a6d0 <_reclaim_reent+0xb0>
 800a696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a698:	4620      	mov	r0, r4
 800a69a:	4798      	blx	r3
 800a69c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a69e:	b1b9      	cbz	r1, 800a6d0 <_reclaim_reent+0xb0>
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6a6:	f7ff bfad 	b.w	800a604 <cleanup_glue>
 800a6aa:	5949      	ldr	r1, [r1, r5]
 800a6ac:	b941      	cbnz	r1, 800a6c0 <_reclaim_reent+0xa0>
 800a6ae:	3504      	adds	r5, #4
 800a6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6b2:	2d80      	cmp	r5, #128	; 0x80
 800a6b4:	68d9      	ldr	r1, [r3, #12]
 800a6b6:	d1f8      	bne.n	800a6aa <_reclaim_reent+0x8a>
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f7ff fef9 	bl	800a4b0 <_free_r>
 800a6be:	e7ba      	b.n	800a636 <_reclaim_reent+0x16>
 800a6c0:	680e      	ldr	r6, [r1, #0]
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f7ff fef4 	bl	800a4b0 <_free_r>
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	e7ef      	b.n	800a6ac <_reclaim_reent+0x8c>
 800a6cc:	2500      	movs	r5, #0
 800a6ce:	e7ef      	b.n	800a6b0 <_reclaim_reent+0x90>
 800a6d0:	bd70      	pop	{r4, r5, r6, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000020 	.word	0x20000020

0800a6d8 <_sbrk_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d06      	ldr	r5, [pc, #24]	; (800a6f4 <_sbrk_r+0x1c>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f7 fa46 	bl	8001b74 <_sbrk>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_sbrk_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_sbrk_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	20004e74 	.word	0x20004e74

0800a6f8 <__malloc_lock>:
 800a6f8:	4801      	ldr	r0, [pc, #4]	; (800a700 <__malloc_lock+0x8>)
 800a6fa:	f7ff beb1 	b.w	800a460 <__retarget_lock_acquire_recursive>
 800a6fe:	bf00      	nop
 800a700:	20004e6c 	.word	0x20004e6c

0800a704 <__malloc_unlock>:
 800a704:	4801      	ldr	r0, [pc, #4]	; (800a70c <__malloc_unlock+0x8>)
 800a706:	f7ff beac 	b.w	800a462 <__retarget_lock_release_recursive>
 800a70a:	bf00      	nop
 800a70c:	20004e6c 	.word	0x20004e6c

0800a710 <_init>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	bf00      	nop
 800a714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a716:	bc08      	pop	{r3}
 800a718:	469e      	mov	lr, r3
 800a71a:	4770      	bx	lr

0800a71c <_fini>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	bf00      	nop
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr
