
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a178  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000170c  0800a308  0800a308  0001a308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba14  0800ba14  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba14  0800ba14  0001ba14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba1c  0800ba1c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba1c  0800ba1c  0001ba1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba20  0800ba20  0001ba20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ba24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
 10 .bss          00004df4  20000084  20000084  00020084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e78  20004e78  00020084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028b6a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000506d  00000000  00000000  00048c1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b70  00000000  00000000  0004dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000019b0  00000000  00000000  0004f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026469  00000000  00000000  000511b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021620  00000000  00000000  00077619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de040  00000000  00000000  00098c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00176c79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075b8  00000000  00000000  00176ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2f0 	.word	0x0800a2f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800a2f0 	.word	0x0800a2f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <buttonTaskEntry>:
* @param argument: Not used
* @retval None
*/

void buttonTaskEntry(void *argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]

  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]
 80004e2:	619a      	str	r2, [r3, #24]

  // Set LED blinking
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004e4:	2360      	movs	r3, #96	; 0x60
 80004e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80004ec:	2300      	movs	r3, #0
 80004ee:	613b      	str	r3, [r7, #16]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80004f4:	2300      	movs	r3, #0
 80004f6:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80004fc:	2300      	movs	r3, #0
 80004fe:	623b      	str	r3, [r7, #32]

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	2200      	movs	r2, #0
 8000506:	4619      	mov	r1, r3
 8000508:	488a      	ldr	r0, [pc, #552]	; (8000734 <buttonTaskEntry+0x26c>)
 800050a:	f005 fee7 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800050e:	2100      	movs	r1, #0
 8000510:	4888      	ldr	r0, [pc, #544]	; (8000734 <buttonTaskEntry+0x26c>)
 8000512:	f005 fbb7 	bl	8005c84 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	2204      	movs	r2, #4
 800051c:	4619      	mov	r1, r3
 800051e:	4885      	ldr	r0, [pc, #532]	; (8000734 <buttonTaskEntry+0x26c>)
 8000520:	f005 fedc 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000524:	2104      	movs	r1, #4
 8000526:	4883      	ldr	r0, [pc, #524]	; (8000734 <buttonTaskEntry+0x26c>)
 8000528:	f005 fbac 	bl	8005c84 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  uint8_t led_level = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t i = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t delay_cnt = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	627b      	str	r3, [r7, #36]	; 0x24

  for(;;)
  {
	switch (state){
 800053a:	4b7f      	ldr	r3, [pc, #508]	; (8000738 <buttonTaskEntry+0x270>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b07      	cmp	r3, #7
 8000540:	f200 80f4 	bhi.w	800072c <buttonTaskEntry+0x264>
 8000544:	a201      	add	r2, pc, #4	; (adr r2, 800054c <buttonTaskEntry+0x84>)
 8000546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054a:	bf00      	nop
 800054c:	0800056d 	.word	0x0800056d
 8000550:	08000621 	.word	0x08000621
 8000554:	0800072d 	.word	0x0800072d
 8000558:	0800066f 	.word	0x0800066f
 800055c:	0800072d 	.word	0x0800072d
 8000560:	0800069f 	.word	0x0800069f
 8000564:	0800072d 	.word	0x0800072d
 8000568:	080006b5 	.word	0x080006b5
	  // LED Blinking - Stand-by
	  case (0):
		led_level++;
 800056c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000570:	3301      	adds	r3, #1
 8000572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	486e      	ldr	r0, [pc, #440]	; (8000734 <buttonTaskEntry+0x26c>)
 800057a:	f005 fc4b 	bl	8005e14 <HAL_TIM_PWM_Stop>
	    if (led_level > 127)
 800057e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000582:	2b00      	cmp	r3, #0
 8000584:	da0e      	bge.n	80005a4 <buttonTaskEntry+0xdc>
	    {
	      sConfigOC.Pulse = (0XFF - led_level) * 0xFFFF/200;
 8000586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800058a:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 800058e:	4613      	mov	r3, r2
 8000590:	041b      	lsls	r3, r3, #16
 8000592:	1a9b      	subs	r3, r3, r2
 8000594:	4a69      	ldr	r2, [pc, #420]	; (800073c <buttonTaskEntry+0x274>)
 8000596:	fb82 1203 	smull	r1, r2, r2, r3
 800059a:	1192      	asrs	r2, r2, #6
 800059c:	17db      	asrs	r3, r3, #31
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	e00b      	b.n	80005bc <buttonTaskEntry+0xf4>
	    }
	    else
	    {
	      sConfigOC.Pulse = led_level * 0xFFFF/200;
 80005a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80005a8:	4613      	mov	r3, r2
 80005aa:	041b      	lsls	r3, r3, #16
 80005ac:	1a9b      	subs	r3, r3, r2
 80005ae:	4a63      	ldr	r2, [pc, #396]	; (800073c <buttonTaskEntry+0x274>)
 80005b0:	fb82 1203 	smull	r1, r2, r2, r3
 80005b4:	1192      	asrs	r2, r2, #6
 80005b6:	17db      	asrs	r3, r3, #31
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	60fb      	str	r3, [r7, #12]
	    }
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	485b      	ldr	r0, [pc, #364]	; (8000734 <buttonTaskEntry+0x26c>)
 80005c6:	f005 fe89 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80005ca:	2100      	movs	r1, #0
 80005cc:	4859      	ldr	r0, [pc, #356]	; (8000734 <buttonTaskEntry+0x26c>)
 80005ce:	f005 fb59 	bl	8005c84 <HAL_TIM_PWM_Start>

		if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_RESET)
 80005d2:	2108      	movs	r1, #8
 80005d4:	485a      	ldr	r0, [pc, #360]	; (8000740 <buttonTaskEntry+0x278>)
 80005d6:	f003 fc87 	bl	8003ee8 <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	f040 80a2 	bne.w	8000726 <buttonTaskEntry+0x25e>
		{
			osDelay(100);
 80005e2:	2064      	movs	r0, #100	; 0x64
 80005e4:	f006 fe68 	bl	80072b8 <osDelay>
            state = 1;
 80005e8:	4b53      	ldr	r3, [pc, #332]	; (8000738 <buttonTaskEntry+0x270>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
			led_level = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			// Wait for button release
			for (i = 0 ; i < 200 ; i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80005f8:	e00c      	b.n	8000614 <buttonTaskEntry+0x14c>
			{
			  osDelay(100);
 80005fa:	2064      	movs	r0, #100	; 0x64
 80005fc:	f006 fe5c 	bl	80072b8 <osDelay>
			  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 8000600:	2108      	movs	r1, #8
 8000602:	484f      	ldr	r0, [pc, #316]	; (8000740 <buttonTaskEntry+0x278>)
 8000604:	f003 fc70 	bl	8003ee8 <HAL_GPIO_ReadPin>
 8000608:	4603      	mov	r3, r0
 800060a:	2b01      	cmp	r3, #1
 800060c:	d006      	beq.n	800061c <buttonTaskEntry+0x154>
			for (i = 0 ; i < 200 ; i++)
 800060e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000610:	3301      	adds	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
 8000614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000616:	2bc7      	cmp	r3, #199	; 0xc7
 8000618:	d9ef      	bls.n	80005fa <buttonTaskEntry+0x132>
			}
		}
	    break;
 800061a:	e084      	b.n	8000726 <buttonTaskEntry+0x25e>
			  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 800061c:	bf00      	nop
	    break;
 800061e:	e082      	b.n	8000726 <buttonTaskEntry+0x25e>

	  // ON requested
	  case (1):
	    // Main transformer will be switch on from the zero crossing interrupt based on state
	    delay_cnt = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
        state = 2;
 8000624:	4b44      	ldr	r3, [pc, #272]	; (8000738 <buttonTaskEntry+0x270>)
 8000626:	2202      	movs	r2, #2
 8000628:	701a      	strb	r2, [r3, #0]

     	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	4841      	ldr	r0, [pc, #260]	; (8000734 <buttonTaskEntry+0x26c>)
 800062e:	f005 fbf1 	bl	8005e14 <HAL_TIM_PWM_Stop>
     	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000632:	2104      	movs	r1, #4
 8000634:	483f      	ldr	r0, [pc, #252]	; (8000734 <buttonTaskEntry+0x26c>)
 8000636:	f005 fbed 	bl	8005e14 <HAL_TIM_PWM_Stop>
    	sConfigOC.Pulse = 65535;
 800063a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800063e:	60fb      	str	r3, [r7, #12]
     	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2200      	movs	r2, #0
 8000646:	4619      	mov	r1, r3
 8000648:	483a      	ldr	r0, [pc, #232]	; (8000734 <buttonTaskEntry+0x26c>)
 800064a:	f005 fe47 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
     	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	2204      	movs	r2, #4
 8000654:	4619      	mov	r1, r3
 8000656:	4837      	ldr	r0, [pc, #220]	; (8000734 <buttonTaskEntry+0x26c>)
 8000658:	f005 fe40 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
     	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800065c:	2100      	movs	r1, #0
 800065e:	4835      	ldr	r0, [pc, #212]	; (8000734 <buttonTaskEntry+0x26c>)
 8000660:	f005 fb10 	bl	8005c84 <HAL_TIM_PWM_Start>
     	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000664:	2104      	movs	r1, #4
 8000666:	4833      	ldr	r0, [pc, #204]	; (8000734 <buttonTaskEntry+0x26c>)
 8000668:	f005 fb0c 	bl	8005c84 <HAL_TIM_PWM_Start>
     	break;
 800066c:	e05e      	b.n	800072c <buttonTaskEntry+0x264>

	  case (3):
	    if (delay_cnt > START_DELAY) {
 800066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000670:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000674:	d905      	bls.n	8000682 <buttonTaskEntry+0x1ba>
	      state++;
 8000676:	4b30      	ldr	r3, [pc, #192]	; (8000738 <buttonTaskEntry+0x270>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <buttonTaskEntry+0x270>)
 8000680:	701a      	strb	r2, [r3, #0]
	    }
		if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_RESET)
 8000682:	2108      	movs	r1, #8
 8000684:	482e      	ldr	r0, [pc, #184]	; (8000740 <buttonTaskEntry+0x278>)
 8000686:	f003 fc2f 	bl	8003ee8 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <buttonTaskEntry+0x1ce>
		{
		  state = 6;
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <buttonTaskEntry+0x270>)
 8000692:	2206      	movs	r2, #6
 8000694:	701a      	strb	r2, [r3, #0]
		}
	    delay_cnt++;
 8000696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000698:	3301      	adds	r3, #1
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800069c:	e046      	b.n	800072c <buttonTaskEntry+0x264>

	  // ON
	  case (5):
	    // Check for off request
		if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_RESET)
 800069e:	2108      	movs	r1, #8
 80006a0:	4827      	ldr	r0, [pc, #156]	; (8000740 <buttonTaskEntry+0x278>)
 80006a2:	f003 fc21 	bl	8003ee8 <HAL_GPIO_ReadPin>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d13e      	bne.n	800072a <buttonTaskEntry+0x262>
		{
		  state = 6;
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <buttonTaskEntry+0x270>)
 80006ae:	2206      	movs	r2, #6
 80006b0:	701a      	strb	r2, [r3, #0]
		}

	    // TODO: Monitor system while is ON

		break;
 80006b2:	e03a      	b.n	800072a <buttonTaskEntry+0x262>

	  // OFF requested
	  case (7):
  	    state = 0;
 80006b4:	4b20      	ldr	r3, [pc, #128]	; (8000738 <buttonTaskEntry+0x270>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
		// Switch off LED and backlight
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80006ba:	2100      	movs	r1, #0
 80006bc:	481d      	ldr	r0, [pc, #116]	; (8000734 <buttonTaskEntry+0x26c>)
 80006be:	f005 fba9 	bl	8005e14 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80006c2:	2104      	movs	r1, #4
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <buttonTaskEntry+0x26c>)
 80006c6:	f005 fba5 	bl	8005e14 <HAL_TIM_PWM_Stop>
		sConfigOC.Pulse = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 80006ce:	f107 0308 	add.w	r3, r7, #8
 80006d2:	2200      	movs	r2, #0
 80006d4:	4619      	mov	r1, r3
 80006d6:	4817      	ldr	r0, [pc, #92]	; (8000734 <buttonTaskEntry+0x26c>)
 80006d8:	f005 fe00 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2204      	movs	r2, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4813      	ldr	r0, [pc, #76]	; (8000734 <buttonTaskEntry+0x26c>)
 80006e6:	f005 fdf9 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006ea:	2100      	movs	r1, #0
 80006ec:	4811      	ldr	r0, [pc, #68]	; (8000734 <buttonTaskEntry+0x26c>)
 80006ee:	f005 fac9 	bl	8005c84 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006f2:	2104      	movs	r1, #4
 80006f4:	480f      	ldr	r0, [pc, #60]	; (8000734 <buttonTaskEntry+0x26c>)
 80006f6:	f005 fac5 	bl	8005c84 <HAL_TIM_PWM_Start>

		// Wait for button release
		for (i = 0 ; i < 100 ; i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80006fe:	e00c      	b.n	800071a <buttonTaskEntry+0x252>
		{
		  osDelay(100);
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f006 fdd9 	bl	80072b8 <osDelay>
		  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 8000706:	2108      	movs	r1, #8
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <buttonTaskEntry+0x278>)
 800070a:	f003 fbed 	bl	8003ee8 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d006      	beq.n	8000722 <buttonTaskEntry+0x25a>
		for (i = 0 ; i < 100 ; i++)
 8000714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000716:	3301      	adds	r3, #1
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
 800071a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800071c:	2b63      	cmp	r3, #99	; 0x63
 800071e:	d9ef      	bls.n	8000700 <buttonTaskEntry+0x238>
		}

		break;
 8000720:	e004      	b.n	800072c <buttonTaskEntry+0x264>
		  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 8000722:	bf00      	nop
		break;
 8000724:	e002      	b.n	800072c <buttonTaskEntry+0x264>
	    break;
 8000726:	bf00      	nop
 8000728:	e000      	b.n	800072c <buttonTaskEntry+0x264>
		break;
 800072a:	bf00      	nop
	}
    osDelay(10);
 800072c:	200a      	movs	r0, #10
 800072e:	f006 fdc3 	bl	80072b8 <osDelay>
	switch (state){
 8000732:	e702      	b.n	800053a <buttonTaskEntry+0x72>
 8000734:	20004bc8 	.word	0x20004bc8
 8000738:	200000a0 	.word	0x200000a0
 800073c:	51eb851f 	.word	0x51eb851f
 8000740:	40020c00 	.word	0x40020c00

08000744 <dspTaskEntry>:
#include "stm32f4xx_hal.h"
#include "cmsis_os.h"

void dspTaskEntry(void *argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f006 fdb3 	bl	80072b8 <osDelay>
 8000752:	e7fb      	b.n	800074c <dspTaskEntry+0x8>

08000754 <fanTaskEntry>:
#include "cmsis_os.h"

extern TIM_HandleTypeDef htim1;

void fanTaskEntry(void *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  TIM_OC_InitTypeDef sConfigOC = {0};
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]

  // Set FAN Low
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000770:	2360      	movs	r3, #96	; 0x60
 8000772:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 670;
 8000774:	f240 239e 	movw	r3, #670	; 0x29e
 8000778:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	4619      	mov	r1, r3
 8000796:	480d      	ldr	r0, [pc, #52]	; (80007cc <fanTaskEntry+0x78>)
 8000798:	f005 fda0 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800079c:	2100      	movs	r1, #0
 800079e:	480b      	ldr	r0, [pc, #44]	; (80007cc <fanTaskEntry+0x78>)
 80007a0:	f005 fa70 	bl	8005c84 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2204      	movs	r2, #4
 80007aa:	4619      	mov	r1, r3
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <fanTaskEntry+0x78>)
 80007ae:	f005 fd95 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007b2:	2104      	movs	r1, #4
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <fanTaskEntry+0x78>)
 80007b6:	f005 fa65 	bl	8005c84 <HAL_TIM_PWM_Start>
    //Read temperature A
	//Read temperature B
	//Set FAN A speed
	//Set Fan B speed

	osDelay(1000);
 80007ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007be:	f006 fd7b 	bl	80072b8 <osDelay>

	// Check FAN A speed

	// Check FAN B speed

	osDelay(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f006 fd77 	bl	80072b8 <osDelay>
	osDelay(1000);
 80007ca:	e7f6      	b.n	80007ba <fanTaskEntry+0x66>
 80007cc:	20004c90 	.word	0x20004c90

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f002 fd34 	bl	8003240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f88a 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f000 fbdc 	bl	8000f98 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e0:	f000 fbba 	bl	8000f58 <MX_DMA_Init>
  MX_I2C1_Init();
 80007e4:	f000 f8f0 	bl	80009c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007e8:	f000 f91c 	bl	8000a24 <MX_I2C2_Init>
  MX_RTC_Init();
 80007ec:	f000 f948 	bl	8000a80 <MX_RTC_Init>
  MX_SPI1_Init();
 80007f0:	f000 f96c 	bl	8000acc <MX_SPI1_Init>
  MX_SPI3_Init();
 80007f4:	f000 f9a0 	bl	8000b38 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007f8:	f000 f9d4 	bl	8000ba4 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007fc:	f000 fa80 	bl	8000d00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000800:	f000 fae2 	bl	8000dc8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000804:	f000 fb5a 	bl	8000ebc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000808:	f006 fc7a 	bl	8007100 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of displayQueue */
  displayQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &displayQueue_attributes);
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <main+0xc4>)
 800080e:	2104      	movs	r1, #4
 8000810:	2010      	movs	r0, #16
 8000812:	f006 fd6c 	bl	80072ee <osMessageQueueNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <main+0xc8>)
 800081a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idleTask */
  idleTaskHandle = osThreadNew(idleTaskEntry, NULL, &idleTask_attributes);
 800081c:	4a1f      	ldr	r2, [pc, #124]	; (800089c <main+0xcc>)
 800081e:	2100      	movs	r1, #0
 8000820:	481f      	ldr	r0, [pc, #124]	; (80008a0 <main+0xd0>)
 8000822:	f006 fcb7 	bl	8007194 <osThreadNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a1e      	ldr	r2, [pc, #120]	; (80008a4 <main+0xd4>)
 800082a:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(buttonTaskEntry, NULL, &buttonTask_attributes);
 800082c:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <main+0xd8>)
 800082e:	2100      	movs	r1, #0
 8000830:	481e      	ldr	r0, [pc, #120]	; (80008ac <main+0xdc>)
 8000832:	f006 fcaf 	bl	8007194 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <main+0xe0>)
 800083a:	6013      	str	r3, [r2, #0]

  /* creation of fanTask */
  fanTaskHandle = osThreadNew(fanTaskEntry, NULL, &fanTask_attributes);
 800083c:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <main+0xe4>)
 800083e:	2100      	movs	r1, #0
 8000840:	481d      	ldr	r0, [pc, #116]	; (80008b8 <main+0xe8>)
 8000842:	f006 fca7 	bl	8007194 <osThreadNew>
 8000846:	4603      	mov	r3, r0
 8000848:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <main+0xec>)
 800084a:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(displayTaskEntry, NULL, &displayTask_attributes);
 800084c:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <main+0xf0>)
 800084e:	2100      	movs	r1, #0
 8000850:	481c      	ldr	r0, [pc, #112]	; (80008c4 <main+0xf4>)
 8000852:	f006 fc9f 	bl	8007194 <osThreadNew>
 8000856:	4603      	mov	r3, r0
 8000858:	4a1b      	ldr	r2, [pc, #108]	; (80008c8 <main+0xf8>)
 800085a:	6013      	str	r3, [r2, #0]

  /* creation of touchTask */
  touchTaskHandle = osThreadNew(touchTaskEntry, NULL, &touchTask_attributes);
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <main+0xfc>)
 800085e:	2100      	movs	r1, #0
 8000860:	481b      	ldr	r0, [pc, #108]	; (80008d0 <main+0x100>)
 8000862:	f006 fc97 	bl	8007194 <osThreadNew>
 8000866:	4603      	mov	r3, r0
 8000868:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <main+0x104>)
 800086a:	6013      	str	r3, [r2, #0]

  /* creation of dspTask */
  dspTaskHandle = osThreadNew(dspTaskEntry, NULL, &dspTask_attributes);
 800086c:	4a1a      	ldr	r2, [pc, #104]	; (80008d8 <main+0x108>)
 800086e:	2100      	movs	r1, #0
 8000870:	481a      	ldr	r0, [pc, #104]	; (80008dc <main+0x10c>)
 8000872:	f006 fc8f 	bl	8007194 <osThreadNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <main+0x110>)
 800087a:	6013      	str	r3, [r2, #0]

  /* creation of sensorATask */
  sensorATaskHandle = osThreadNew(sensorATaskEntry, NULL, &sensorATask_attributes);
 800087c:	4a19      	ldr	r2, [pc, #100]	; (80008e4 <main+0x114>)
 800087e:	2100      	movs	r1, #0
 8000880:	4819      	ldr	r0, [pc, #100]	; (80008e8 <main+0x118>)
 8000882:	f006 fc87 	bl	8007194 <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a18      	ldr	r2, [pc, #96]	; (80008ec <main+0x11c>)
 800088a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800088c:	f006 fc5c 	bl	8007148 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000890:	e7fe      	b.n	8000890 <main+0xc0>
 8000892:	bf00      	nop
 8000894:	0800a4b4 	.word	0x0800a4b4
 8000898:	20004d38 	.word	0x20004d38
 800089c:	0800a3b8 	.word	0x0800a3b8
 80008a0:	080012c5 	.word	0x080012c5
 80008a4:	20004cd8 	.word	0x20004cd8
 80008a8:	0800a3dc 	.word	0x0800a3dc
 80008ac:	080004c9 	.word	0x080004c9
 80008b0:	20004d34 	.word	0x20004d34
 80008b4:	0800a400 	.word	0x0800a400
 80008b8:	08000755 	.word	0x08000755
 80008bc:	20004c6c 	.word	0x20004c6c
 80008c0:	0800a424 	.word	0x0800a424
 80008c4:	08001be5 	.word	0x08001be5
 80008c8:	20004b7c 	.word	0x20004b7c
 80008cc:	0800a448 	.word	0x0800a448
 80008d0:	08001a55 	.word	0x08001a55
 80008d4:	20004c10 	.word	0x20004c10
 80008d8:	0800a46c 	.word	0x0800a46c
 80008dc:	08000745 	.word	0x08000745
 80008e0:	20004a88 	.word	0x20004a88
 80008e4:	0800a490 	.word	0x0800a490
 80008e8:	080026ad 	.word	0x080026ad
 80008ec:	20004d3c 	.word	0x20004d3c

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b094      	sub	sp, #80	; 0x50
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0320 	add.w	r3, r7, #32
 80008fa:	2230      	movs	r2, #48	; 0x30
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f009 fbbe 	bl	800a080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <SystemClock_Config+0xd0>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091c:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <SystemClock_Config+0xd0>)
 800091e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000922:	6413      	str	r3, [r2, #64]	; 0x40
 8000924:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <SystemClock_Config+0xd0>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <SystemClock_Config+0xd4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a22      	ldr	r2, [pc, #136]	; (80009c4 <SystemClock_Config+0xd4>)
 800093a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093e:	6013      	str	r3, [r2, #0]
 8000940:	4b20      	ldr	r3, [pc, #128]	; (80009c4 <SystemClock_Config+0xd4>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800094c:	2309      	movs	r3, #9
 800094e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000956:	2301      	movs	r3, #1
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095a:	2302      	movs	r3, #2
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800095e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000964:	2306      	movs	r3, #6
 8000966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000968:	23a8      	movs	r3, #168	; 0xa8
 800096a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000970:	2307      	movs	r3, #7
 8000972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0320 	add.w	r3, r7, #32
 8000978:	4618      	mov	r0, r3
 800097a:	f003 fc43 	bl	8004204 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000984:	f000 fcc8 	bl	8001318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000988:	230f      	movs	r3, #15
 800098a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800098c:	2302      	movs	r3, #2
 800098e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000994:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800099a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2105      	movs	r1, #5
 80009a6:	4618      	mov	r0, r3
 80009a8:	f003 fea4 	bl	80046f4 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009b2:	f000 fcb1 	bl	8001318 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3750      	adds	r7, #80	; 0x50
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40007000 	.word	0x40007000

080009c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009ce:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <MX_I2C1_Init+0x54>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <MX_I2C1_Init+0x58>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <MX_I2C1_Init+0x50>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_I2C1_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a04:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_I2C1_Init+0x50>)
 8000a06:	f003 fab9 	bl	8003f7c <HAL_I2C_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a10:	f000 fc82 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20004ad4 	.word	0x20004ad4
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	000186a0 	.word	0x000186a0

08000a24 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a2a:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <MX_I2C2_Init+0x54>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <MX_I2C2_Init+0x58>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a46:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_I2C2_Init+0x50>)
 8000a62:	f003 fa8b 	bl	8003f7c <HAL_I2C_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a6c:	f000 fc54 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20004b28 	.word	0x20004b28
 8000a78:	40005800 	.word	0x40005800
 8000a7c:	000186a0 	.word	0x000186a0

08000a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a86:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <MX_RTC_Init+0x48>)
 8000a88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a92:	227f      	movs	r2, #127	; 0x7f
 8000a94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a98:	22ff      	movs	r2, #255	; 0xff
 8000a9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_RTC_Init+0x44>)
 8000ab0:	f004 f904 	bl	8004cbc <HAL_RTC_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000aba:	f000 fc2d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20004c70 	.word	0x20004c70
 8000ac8:	40002800 	.word	0x40002800

08000acc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ad0:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000ad2:	4a18      	ldr	r2, [pc, #96]	; (8000b34 <MX_SPI1_Init+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad6:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000ad8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000adc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000af8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000afc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b00:	2220      	movs	r2, #32
 8000b02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b18:	220a      	movs	r2, #10
 8000b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_SPI1_Init+0x64>)
 8000b1e:	f004 f9b2 	bl	8004e86 <HAL_SPI_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b28:	f000 fbf6 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20004cdc 	.word	0x20004cdc
 8000b34:	40013000 	.word	0x40013000

08000b38 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_SPI3_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b68:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b6c:	2230      	movs	r2, #48	; 0x30
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_SPI3_Init+0x64>)
 8000b8a:	f004 f97c 	bl	8004e86 <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 fbc0 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20004c14 	.word	0x20004c14
 8000ba0:	40003c00 	.word	0x40003c00

08000ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b096      	sub	sp, #88	; 0x58
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]
 8000bd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2220      	movs	r2, #32
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f009 fa4f 	bl	800a080 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be2:	4b45      	ldr	r3, [pc, #276]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000be4:	4a45      	ldr	r2, [pc, #276]	; (8000cfc <MX_TIM1_Init+0x158>)
 8000be6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000be8:	4b43      	ldr	r3, [pc, #268]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b42      	ldr	r3, [pc, #264]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6700;
 8000bf4:	4b40      	ldr	r3, [pc, #256]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000bf6:	f641 222c 	movw	r2, #6700	; 0x1a2c
 8000bfa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c04:	4b3c      	ldr	r3, [pc, #240]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c10:	4839      	ldr	r0, [pc, #228]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000c12:	f004 febf 	bl	8005994 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c1c:	f000 fb7c 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4832      	ldr	r0, [pc, #200]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000c2e:	f005 fc17 	bl	8006460 <HAL_TIM_ConfigClockSource>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c38:	f000 fb6e 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c3c:	482e      	ldr	r0, [pc, #184]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000c3e:	f004 ffd1 	bl	8005be4 <HAL_TIM_PWM_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c48:	f000 fb66 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4827      	ldr	r0, [pc, #156]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000c5c:	f006 f92a 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000c66:	f000 fb57 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6a:	2360      	movs	r3, #96	; 0x60
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481a      	ldr	r0, [pc, #104]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000c90:	f005 fb24 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000c9a:	f000 fb3d 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca2:	2204      	movs	r2, #4
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000ca8:	f005 fb18 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 8000cb2:	f000 fb31 	bl	8001318 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000cda:	f006 f967 	bl	8006fac <HAL_TIMEx_ConfigBreakDeadTime>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000ce4:	f000 fb18 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ce8:	4803      	ldr	r0, [pc, #12]	; (8000cf8 <MX_TIM1_Init+0x154>)
 8000cea:	f000 fd6f 	bl	80017cc <HAL_TIM_MspPostInit>

}
 8000cee:	bf00      	nop
 8000cf0:	3758      	adds	r7, #88	; 0x58
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20004c90 	.word	0x20004c90
 8000cfc:	40010000 	.word	0x40010000

08000d00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d06:	f107 0320 	add.w	r3, r7, #32
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d22:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <MX_TIM3_Init+0xc4>)
 8000d26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2e:	4b24      	ldr	r3, [pc, #144]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d48:	481d      	ldr	r0, [pc, #116]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d4a:	f004 ff4b 	bl	8005be4 <HAL_TIM_PWM_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d54:	f000 fae0 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	4619      	mov	r1, r3
 8000d66:	4816      	ldr	r0, [pc, #88]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d68:	f006 f8a4 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d72:	f000 fad1 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d76:	2360      	movs	r3, #96	; 0x60
 8000d78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000d8e:	f005 faa5 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d98:	f000 fabe 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2204      	movs	r2, #4
 8000da0:	4619      	mov	r1, r3
 8000da2:	4807      	ldr	r0, [pc, #28]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000da4:	f005 fa9a 	bl	80062dc <HAL_TIM_PWM_ConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000dae:	f000 fab3 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000db2:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <MX_TIM3_Init+0xc0>)
 8000db4:	f000 fd0a 	bl	80017cc <HAL_TIM_MspPostInit>

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20004bc8 	.word	0x20004bc8
 8000dc4:	40000400 	.word	0x40000400

08000dc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000de4:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000de6:	4a34      	ldr	r2, [pc, #208]	; (8000eb8 <MX_TIM4_Init+0xf0>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dea:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000df6:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000e0a:	482a      	ldr	r0, [pc, #168]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000e0c:	f005 f872 	bl	8005ef4 <HAL_TIM_IC_Init>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000e16:	f000 fa7f 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	4822      	ldr	r0, [pc, #136]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000e2a:	f006 f843 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000e34:	f000 fa70 	bl	8001318 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4819      	ldr	r0, [pc, #100]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000e50:	f005 f9a7 	bl	80061a2 <HAL_TIM_IC_ConfigChannel>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000e5a:	f000 fa5d 	bl	8001318 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e62:	463b      	mov	r3, r7
 8000e64:	2204      	movs	r2, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4812      	ldr	r0, [pc, #72]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000e6a:	f005 f99a 	bl	80061a2 <HAL_TIM_IC_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e74:	f000 fa50 	bl	8001318 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2208      	movs	r2, #8
 8000e80:	4619      	mov	r1, r3
 8000e82:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000e84:	f005 f98d 	bl	80061a2 <HAL_TIM_IC_ConfigChannel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000e8e:	f000 fa43 	bl	8001318 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e92:	2302      	movs	r3, #2
 8000e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	220c      	movs	r2, #12
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_TIM4_Init+0xec>)
 8000e9e:	f005 f980 	bl	80061a2 <HAL_TIM_IC_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8000ea8:	f000 fa36 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20004a8c 	.word	0x20004a8c
 8000eb8:	40000800 	.word	0x40000800

08000ebc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000eda:	4a1e      	ldr	r2, [pc, #120]	; (8000f54 <MX_TIM5_Init+0x98>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000ee0:	2253      	movs	r2, #83	; 0x53
 8000ee2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000eec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ef0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000f00:	f004 fd48 	bl	8005994 <HAL_TIM_Base_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000f0a:	f000 fa05 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000f1c:	f005 faa0 	bl	8006460 <HAL_TIM_ConfigClockSource>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 f9f7 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <MX_TIM5_Init+0x94>)
 8000f38:	f005 ffbc 	bl	8006eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000f42:	f000 f9e9 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20004b80 	.word	0x20004b80
 8000f54:	40000c00 	.word	0x40000c00

08000f58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_DMA_Init+0x3c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <MX_DMA_Init+0x3c>)
 8000f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_DMA_Init+0x3c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2044      	movs	r0, #68	; 0x44
 8000f80:	f002 fa7c 	bl	800347c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000f84:	2044      	movs	r0, #68	; 0x44
 8000f86:	f002 fa95 	bl	80034b4 <HAL_NVIC_EnableIRQ>

}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800

08000f98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	f107 031c 	add.w	r3, r7, #28
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	605a      	str	r2, [r3, #4]
 8000fa8:	609a      	str	r2, [r3, #8]
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	4b95      	ldr	r3, [pc, #596]	; (8001208 <MX_GPIO_Init+0x270>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a94      	ldr	r2, [pc, #592]	; (8001208 <MX_GPIO_Init+0x270>)
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b92      	ldr	r3, [pc, #584]	; (8001208 <MX_GPIO_Init+0x270>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0310 	and.w	r3, r3, #16
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b8e      	ldr	r3, [pc, #568]	; (8001208 <MX_GPIO_Init+0x270>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a8d      	ldr	r2, [pc, #564]	; (8001208 <MX_GPIO_Init+0x270>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b8b      	ldr	r3, [pc, #556]	; (8001208 <MX_GPIO_Init+0x270>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b87      	ldr	r3, [pc, #540]	; (8001208 <MX_GPIO_Init+0x270>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a86      	ldr	r2, [pc, #536]	; (8001208 <MX_GPIO_Init+0x270>)
 8000ff0:	f043 0304 	orr.w	r3, r3, #4
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b84      	ldr	r3, [pc, #528]	; (8001208 <MX_GPIO_Init+0x270>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0304 	and.w	r3, r3, #4
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b80      	ldr	r3, [pc, #512]	; (8001208 <MX_GPIO_Init+0x270>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a7f      	ldr	r2, [pc, #508]	; (8001208 <MX_GPIO_Init+0x270>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b7d      	ldr	r3, [pc, #500]	; (8001208 <MX_GPIO_Init+0x270>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b79      	ldr	r3, [pc, #484]	; (8001208 <MX_GPIO_Init+0x270>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a78      	ldr	r2, [pc, #480]	; (8001208 <MX_GPIO_Init+0x270>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b76      	ldr	r3, [pc, #472]	; (8001208 <MX_GPIO_Init+0x270>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b72      	ldr	r3, [pc, #456]	; (8001208 <MX_GPIO_Init+0x270>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a71      	ldr	r2, [pc, #452]	; (8001208 <MX_GPIO_Init+0x270>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b6f      	ldr	r3, [pc, #444]	; (8001208 <MX_GPIO_Init+0x270>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CH5_OUT_Pin|CH6_OUT_Pin|CH4_OUT_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2162      	movs	r1, #98	; 0x62
 800105a:	486c      	ldr	r0, [pc, #432]	; (800120c <MX_GPIO_Init+0x274>)
 800105c:	f002 ff5c 	bl	8003f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2110      	movs	r1, #16
 8001064:	486a      	ldr	r0, [pc, #424]	; (8001210 <MX_GPIO_Init+0x278>)
 8001066:	f002 ff57 	bl	8003f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	4868      	ldr	r0, [pc, #416]	; (8001210 <MX_GPIO_Init+0x278>)
 8001070:	f002 ff52 	bl	8003f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AC_RES_GPIO_Port, AC_RES_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2110      	movs	r1, #16
 8001078:	4866      	ldr	r0, [pc, #408]	; (8001214 <MX_GPIO_Init+0x27c>)
 800107a:	f002 ff4d 	bl	8003f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|CH1_OUT_Pin|CH2_OUT_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f240 3101 	movw	r1, #769	; 0x301
 8001084:	4864      	ldr	r0, [pc, #400]	; (8001218 <MX_GPIO_Init+0x280>)
 8001086:	f002 ff47 	bl	8003f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	21c0      	movs	r1, #192	; 0xc0
 800108e:	4863      	ldr	r0, [pc, #396]	; (800121c <MX_GPIO_Init+0x284>)
 8001090:	f002 ff42 	bl	8003f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH5_OUT_Pin CH6_OUT_Pin CH4_OUT_Pin */
  GPIO_InitStruct.Pin = CH5_OUT_Pin|CH6_OUT_Pin|CH4_OUT_Pin;
 8001094:	2362      	movs	r3, #98	; 0x62
 8001096:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	4858      	ldr	r0, [pc, #352]	; (800120c <MX_GPIO_Init+0x274>)
 80010ac:	f002 fd80 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH5_Pin CH6_Pin */
  GPIO_InitStruct.Pin = CH5_Pin|CH6_Pin;
 80010b0:	230c      	movs	r3, #12
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4854      	ldr	r0, [pc, #336]	; (8001214 <MX_GPIO_Init+0x27c>)
 80010c4:	f002 fd74 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80010c8:	2310      	movs	r3, #16
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	484c      	ldr	r0, [pc, #304]	; (8001210 <MX_GPIO_Init+0x278>)
 80010e0:	f002 fd66 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_CTRL_Pin */
  GPIO_InitStruct.Pin = AC_CTRL_Pin;
 80010e4:	2320      	movs	r3, #32
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010ec:	2302      	movs	r3, #2
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AC_CTRL_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4845      	ldr	r0, [pc, #276]	; (8001210 <MX_GPIO_Init+0x278>)
 80010fc:	f002 fd58 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_RES_Pin */
  GPIO_InitStruct.Pin = AC_RES_Pin;
 8001100:	2310      	movs	r3, #16
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001108:	2302      	movs	r3, #2
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AC_RES_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	483f      	ldr	r0, [pc, #252]	; (8001214 <MX_GPIO_Init+0x27c>)
 8001118:	f002 fd4a 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin CH1_OUT_Pin CH2_OUT_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CH1_OUT_Pin|CH2_OUT_Pin;
 800111c:	f240 3301 	movw	r3, #769	; 0x301
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4838      	ldr	r0, [pc, #224]	; (8001218 <MX_GPIO_Init+0x280>)
 8001136:	f002 fd3b 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_IN_Pin */
  GPIO_InitStruct.Pin = AC_IN_Pin;
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001144:	2301      	movs	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(AC_IN_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 031c 	add.w	r3, r7, #28
 800114c:	4619      	mov	r1, r3
 800114e:	482f      	ldr	r0, [pc, #188]	; (800120c <MX_GPIO_Init+0x274>)
 8001150:	f002 fd2e 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS2_Pin TS1_Pin */
  GPIO_InitStruct.Pin = TS2_Pin|TS1_Pin;
 8001154:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	482c      	ldr	r0, [pc, #176]	; (800121c <MX_GPIO_Init+0x284>)
 800116a:	f002 fd21 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 800116e:	2301      	movs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001172:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001176:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001178:	2301      	movs	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4826      	ldr	r0, [pc, #152]	; (800121c <MX_GPIO_Init+0x284>)
 8001184:	f002 fd14 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PON_Pin */
  GPIO_InitStruct.Pin = PON_Pin;
 8001188:	2308      	movs	r3, #8
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001190:	2301      	movs	r3, #1
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PON_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4820      	ldr	r0, [pc, #128]	; (800121c <MX_GPIO_Init+0x284>)
 800119c:	f002 fd08 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80011a0:	2340      	movs	r3, #64	; 0x40
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4819      	ldr	r0, [pc, #100]	; (800121c <MX_GPIO_Init+0x284>)
 80011b8:	f002 fcfa 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c8:	2303      	movs	r3, #3
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <MX_GPIO_Init+0x284>)
 80011d4:	f002 fcec 	bl	8003bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH3_OUT_Pin */
  GPIO_InitStruct.Pin = CH3_OUT_Pin;
 80011d8:	2301      	movs	r3, #1
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CH3_OUT_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4808      	ldr	r0, [pc, #32]	; (800120c <MX_GPIO_Init+0x274>)
 80011ec:	f002 fce0 	bl	8003bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2105      	movs	r1, #5
 80011f4:	2017      	movs	r0, #23
 80011f6:	f002 f941 	bl	800347c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011fa:	2017      	movs	r0, #23
 80011fc:	f002 f95a 	bl	80034b4 <HAL_NVIC_EnableIRQ>

}
 8001200:	bf00      	nop
 8001202:	3730      	adds	r7, #48	; 0x30
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40023800 	.word	0x40023800
 800120c:	40021000 	.word	0x40021000
 8001210:	40020000 	.word	0x40020000
 8001214:	40020800 	.word	0x40020800
 8001218:	40020400 	.word	0x40020400
 800121c:	40020c00 	.word	0x40020c00

08001220 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
	if (TOUCH_IRQ_Pin & GPIO_Pin) {
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <HAL_GPIO_EXTI_Callback+0x1c>
	  touch_pending = 1;
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <HAL_GPIO_EXTI_Callback+0x94>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
	}
	if (AC_IN_Pin & GPIO_Pin) {
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001242:	b29b      	uxth	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	d031      	beq.n	80012ac <HAL_GPIO_EXTI_Callback+0x8c>
	  if (state == 2) {
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d10a      	bne.n	8001266 <HAL_GPIO_EXTI_Callback+0x46>
		HAL_GPIO_WritePin(AC_RES_GPIO_Port, AC_RES_Pin, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2110      	movs	r1, #16
 8001254:	4819      	ldr	r0, [pc, #100]	; (80012bc <HAL_GPIO_EXTI_Callback+0x9c>)
 8001256:	f002 fe5f 	bl	8003f18 <HAL_GPIO_WritePin>
	    state++;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001264:	701a      	strb	r2, [r3, #0]
	  }
	  if (state == 4) {
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b04      	cmp	r3, #4
 800126c:	d10f      	bne.n	800128e <HAL_GPIO_EXTI_Callback+0x6e>
		HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2120      	movs	r1, #32
 8001272:	4813      	ldr	r0, [pc, #76]	; (80012c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001274:	f002 fe50 	bl	8003f18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(AC_RES_GPIO_Port, AC_RES_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2110      	movs	r1, #16
 800127c:	480f      	ldr	r0, [pc, #60]	; (80012bc <HAL_GPIO_EXTI_Callback+0x9c>)
 800127e:	f002 fe4b 	bl	8003f18 <HAL_GPIO_WritePin>
	    state++;
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	3301      	adds	r3, #1
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 800128c:	701a      	strb	r2, [r3, #0]
	  }
	  if (state == 6) {
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b06      	cmp	r3, #6
 8001294:	d10a      	bne.n	80012ac <HAL_GPIO_EXTI_Callback+0x8c>
		HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2120      	movs	r1, #32
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <HAL_GPIO_EXTI_Callback+0xa0>)
 800129c:	f002 fe3c 	bl	8003f18 <HAL_GPIO_WritePin>
	    state++;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x98>)
 80012aa:	701a      	strb	r2, [r3, #0]
	  }
	}
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000a8 	.word	0x200000a8
 80012b8:	200000a0 	.word	0x200000a0
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020000 	.word	0x40020000

080012c4 <idleTaskEntry>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_idleTaskEntry */
void idleTaskEntry(void *argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    // Status LED blinking
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012cc:	2201      	movs	r2, #1
 80012ce:	2101      	movs	r1, #1
 80012d0:	4807      	ldr	r0, [pc, #28]	; (80012f0 <idleTaskEntry+0x2c>)
 80012d2:	f002 fe21 	bl	8003f18 <HAL_GPIO_WritePin>
    osDelay(100);
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f005 ffee 	bl	80072b8 <osDelay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	2101      	movs	r1, #1
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <idleTaskEntry+0x2c>)
 80012e2:	f002 fe19 	bl	8003f18 <HAL_GPIO_WritePin>
	osDelay(100);
 80012e6:	2064      	movs	r0, #100	; 0x64
 80012e8:	f005 ffe6 	bl	80072b8 <osDelay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80012ec:	e7ee      	b.n	80012cc <idleTaskEntry+0x8>
 80012ee:	bf00      	nop
 80012f0:	40020400 	.word	0x40020400

080012f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001306:	f001 ffbd 	bl	8003284 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40014400 	.word	0x40014400

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_MspInit+0x54>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a11      	ldr	r2, [pc, #68]	; (8001378 <HAL_MspInit+0x54>)
 8001334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_MspInit+0x54>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_MspInit+0x54>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_MspInit+0x54>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_MspInit+0x54>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	210f      	movs	r1, #15
 8001366:	f06f 0001 	mvn.w	r0, #1
 800136a:	f002 f887 	bl	800347c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08c      	sub	sp, #48	; 0x30
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 031c 	add.w	r3, r7, #28
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_I2C_MspInit+0xe8>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d12c      	bne.n	80013f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <HAL_I2C_MspInit+0xec>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a30      	ldr	r2, [pc, #192]	; (8001468 <HAL_I2C_MspInit+0xec>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <HAL_I2C_MspInit+0xec>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DSP_SCL_Pin|DSP_SDA_Pin;
 80013ba:	23c0      	movs	r3, #192	; 0xc0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013be:	2312      	movs	r3, #18
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ca:	2304      	movs	r3, #4
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4825      	ldr	r0, [pc, #148]	; (800146c <HAL_I2C_MspInit+0xf0>)
 80013d6:	f002 fbeb 	bl	8003bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <HAL_I2C_MspInit+0xec>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a21      	ldr	r2, [pc, #132]	; (8001468 <HAL_I2C_MspInit+0xec>)
 80013e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <HAL_I2C_MspInit+0xec>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80013f6:	e031      	b.n	800145c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <HAL_I2C_MspInit+0xf4>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12c      	bne.n	800145c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_I2C_MspInit+0xec>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a17      	ldr	r2, [pc, #92]	; (8001468 <HAL_I2C_MspInit+0xec>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_I2C_MspInit+0xec>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CODEC_SCL_Pin|CODEC_SDA_Pin;
 800141e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001424:	2312      	movs	r3, #18
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001428:	2301      	movs	r3, #1
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001430:	2304      	movs	r3, #4
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <HAL_I2C_MspInit+0xf0>)
 800143c:	f002 fbb8 	bl	8003bb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_I2C_MspInit+0xec>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_I2C_MspInit+0xec>)
 800144a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800144e:	6413      	str	r3, [r2, #64]	; 0x40
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_I2C_MspInit+0xec>)
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
}
 800145c:	bf00      	nop
 800145e:	3730      	adds	r7, #48	; 0x30
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40005400 	.word	0x40005400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020400 	.word	0x40020400
 8001470:	40005800 	.word	0x40005800

08001474 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <HAL_RTC_MspInit+0x4c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d111      	bne.n	80014b8 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001494:	2302      	movs	r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fb28 	bl	8004af8 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80014ae:	f7ff ff33 	bl	8001318 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <HAL_RTC_MspInit+0x50>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40002800 	.word	0x40002800
 80014c4:	42470e3c 	.word	0x42470e3c

080014c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	; 0x30
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a59      	ldr	r2, [pc, #356]	; (800164c <HAL_SPI_MspInit+0x184>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d15b      	bne.n	80015a2 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a57      	ldr	r2, [pc, #348]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80014f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b55      	ldr	r3, [pc, #340]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <HAL_SPI_MspInit+0x188>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a50      	ldr	r2, [pc, #320]	; (8001650 <HAL_SPI_MspInit+0x188>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <HAL_SPI_MspInit+0x188>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001522:	2338      	movs	r3, #56	; 0x38
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152a:	2301      	movs	r3, #1
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001532:	2305      	movs	r3, #5
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4845      	ldr	r0, [pc, #276]	; (8001654 <HAL_SPI_MspInit+0x18c>)
 800153e:	f002 fb37 	bl	8003bb0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8001542:	4b45      	ldr	r3, [pc, #276]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001544:	4a45      	ldr	r2, [pc, #276]	; (800165c <HAL_SPI_MspInit+0x194>)
 8001546:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001548:	4b43      	ldr	r3, [pc, #268]	; (8001658 <HAL_SPI_MspInit+0x190>)
 800154a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800154e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001550:	4b41      	ldr	r3, [pc, #260]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001556:	4b40      	ldr	r3, [pc, #256]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800155c:	4b3e      	ldr	r3, [pc, #248]	; (8001658 <HAL_SPI_MspInit+0x190>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001564:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001566:	2200      	movs	r2, #0
 8001568:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156a:	4b3b      	ldr	r3, [pc, #236]	; (8001658 <HAL_SPI_MspInit+0x190>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001570:	4b39      	ldr	r3, [pc, #228]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001578:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800157c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800157e:	4b36      	ldr	r3, [pc, #216]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001584:	4834      	ldr	r0, [pc, #208]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001586:	f001 ffa3 	bl	80034d0 <HAL_DMA_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001590:	f7ff fec2 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a30      	ldr	r2, [pc, #192]	; (8001658 <HAL_SPI_MspInit+0x190>)
 8001598:	649a      	str	r2, [r3, #72]	; 0x48
 800159a:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <HAL_SPI_MspInit+0x190>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015a0:	e050      	b.n	8001644 <HAL_SPI_MspInit+0x17c>
  else if(hspi->Instance==SPI3)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a2e      	ldr	r2, [pc, #184]	; (8001660 <HAL_SPI_MspInit+0x198>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d14b      	bne.n	8001644 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b4:	4a26      	ldr	r2, [pc, #152]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ba:	6413      	str	r3, [r2, #64]	; 0x40
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6313      	str	r3, [r2, #48]	; 0x30
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a18      	ldr	r2, [pc, #96]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015ee:	f043 0304 	orr.w	r3, r3, #4
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_SPI_MspInit+0x188>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TOUCH_nCS_Pin;
 8001600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160a:	2301      	movs	r3, #1
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001612:	2306      	movs	r3, #6
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOUCH_nCS_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	4619      	mov	r1, r3
 800161c:	4811      	ldr	r0, [pc, #68]	; (8001664 <HAL_SPI_MspInit+0x19c>)
 800161e:	f002 fac7 	bl	8003bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOUCH_SCK_Pin|TOUCH_MISO_Pin|TOUCH_MOSI_Pin;
 8001622:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162c:	2301      	movs	r3, #1
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001634:	2306      	movs	r3, #6
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	4619      	mov	r1, r3
 800163e:	480a      	ldr	r0, [pc, #40]	; (8001668 <HAL_SPI_MspInit+0x1a0>)
 8001640:	f002 fab6 	bl	8003bb0 <HAL_GPIO_Init>
}
 8001644:	bf00      	nop
 8001646:	3730      	adds	r7, #48	; 0x30
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40013000 	.word	0x40013000
 8001650:	40023800 	.word	0x40023800
 8001654:	40020400 	.word	0x40020400
 8001658:	20004d40 	.word	0x20004d40
 800165c:	40026488 	.word	0x40026488
 8001660:	40003c00 	.word	0x40003c00
 8001664:	40020000 	.word	0x40020000
 8001668:	40020800 	.word	0x40020800

0800166c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a1c      	ldr	r2, [pc, #112]	; (80016ec <HAL_TIM_Base_MspInit+0x80>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d11e      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_TIM_Base_MspInit+0x84>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <HAL_TIM_Base_MspInit+0x84>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_TIM_Base_MspInit+0x84>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2105      	movs	r1, #5
 800169e:	2018      	movs	r0, #24
 80016a0:	f001 feec 	bl	800347c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016a4:	2018      	movs	r0, #24
 80016a6:	f001 ff05 	bl	80034b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2019      	movs	r0, #25
 80016b0:	f001 fee4 	bl	800347c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016b4:	2019      	movs	r0, #25
 80016b6:	f001 fefd 	bl	80034b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80016ba:	e012      	b.n	80016e2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_TIM_Base_MspInit+0x88>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10d      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_TIM_Base_MspInit+0x84>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_TIM_Base_MspInit+0x84>)
 80016d0:	f043 0308 	orr.w	r3, r3, #8
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_TIM_Base_MspInit+0x84>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40010000 	.word	0x40010000
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40000c00 	.word	0x40000c00

080016f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0b      	ldr	r2, [pc, #44]	; (8001734 <HAL_TIM_PWM_MspInit+0x3c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d10d      	bne.n	8001726 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_TIM_PWM_MspInit+0x40>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <HAL_TIM_PWM_MspInit+0x40>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6413      	str	r3, [r2, #64]	; 0x40
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <HAL_TIM_PWM_MspInit+0x40>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40000400 	.word	0x40000400
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_TIM_IC_MspInit+0x84>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12c      	bne.n	80017b8 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_TIM_IC_MspInit+0x88>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_TIM_IC_MspInit+0x88>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_TIM_IC_MspInit+0x88>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_TIM_IC_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <HAL_TIM_IC_MspInit+0x88>)
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_TIM_IC_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = FAN1_IN_Pin|FAN2_IN_Pin;
 8001796:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017a8:	2302      	movs	r3, #2
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4805      	ldr	r0, [pc, #20]	; (80017c8 <HAL_TIM_IC_MspInit+0x8c>)
 80017b4:	f002 f9fc 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40000800 	.word	0x40000800
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020c00 	.word	0x40020c00

080017cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_TIM_MspPostInit+0xb0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d11f      	bne.n	800182e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b23      	ldr	r3, [pc, #140]	; (8001880 <HAL_TIM_MspPostInit+0xb4>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a22      	ldr	r2, [pc, #136]	; (8001880 <HAL_TIM_MspPostInit+0xb4>)
 80017f8:	f043 0310 	orr.w	r3, r3, #16
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b20      	ldr	r3, [pc, #128]	; (8001880 <HAL_TIM_MspPostInit+0xb4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0310 	and.w	r3, r3, #16
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_CTRL_Pin|FAN2_CTRL_Pin;
 800180a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800180e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800181c:	2301      	movs	r3, #1
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	4817      	ldr	r0, [pc, #92]	; (8001884 <HAL_TIM_MspPostInit+0xb8>)
 8001828:	f002 f9c2 	bl	8003bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800182c:	e022      	b.n	8001874 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a15      	ldr	r2, [pc, #84]	; (8001888 <HAL_TIM_MspPostInit+0xbc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d11d      	bne.n	8001874 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_TIM_MspPostInit+0xb4>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_TIM_MspPostInit+0xb4>)
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_TIM_MspPostInit+0xb4>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUT_LED_Pin|LCD_BL_Pin;
 8001854:	23c0      	movs	r3, #192	; 0xc0
 8001856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001864:	2302      	movs	r3, #2
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <HAL_TIM_MspPostInit+0xc0>)
 8001870:	f002 f99e 	bl	8003bb0 <HAL_GPIO_Init>
}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40010000 	.word	0x40010000
 8001880:	40023800 	.word	0x40023800
 8001884:	40021000 	.word	0x40021000
 8001888:	40000400 	.word	0x40000400
 800188c:	40020800 	.word	0x40020800

08001890 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08c      	sub	sp, #48	; 0x30
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	2019      	movs	r0, #25
 80018a6:	f001 fde9 	bl	800347c <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018aa:	2019      	movs	r0, #25
 80018ac:	f001 fe02 	bl	80034b4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <HAL_InitTick+0xa4>)
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	4a1e      	ldr	r2, [pc, #120]	; (8001934 <HAL_InitTick+0xa4>)
 80018ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018be:	6453      	str	r3, [r2, #68]	; 0x44
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <HAL_InitTick+0xa4>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018cc:	f107 0210 	add.w	r2, r7, #16
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4611      	mov	r1, r2
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f8dc 	bl	8004a94 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80018dc:	f003 f8c6 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 80018e0:	4603      	mov	r3, r0
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	4a13      	ldr	r2, [pc, #76]	; (8001938 <HAL_InitTick+0xa8>)
 80018ea:	fba2 2303 	umull	r2, r3, r2, r3
 80018ee:	0c9b      	lsrs	r3, r3, #18
 80018f0:	3b01      	subs	r3, #1
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <HAL_InitTick+0xac>)
 80018f6:	4a12      	ldr	r2, [pc, #72]	; (8001940 <HAL_InitTick+0xb0>)
 80018f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_InitTick+0xac>)
 80018fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001900:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_InitTick+0xac>)
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_InitTick+0xac>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_InitTick+0xac>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001914:	4809      	ldr	r0, [pc, #36]	; (800193c <HAL_InitTick+0xac>)
 8001916:	f004 f83d 	bl	8005994 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d104      	bne.n	800192a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001920:	4806      	ldr	r0, [pc, #24]	; (800193c <HAL_InitTick+0xac>)
 8001922:	f004 f8ef 	bl	8005b04 <HAL_TIM_Base_Start_IT>
 8001926:	4603      	mov	r3, r0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3730      	adds	r7, #48	; 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800
 8001938:	431bde83 	.word	0x431bde83
 800193c:	20004da0 	.word	0x20004da0
 8001940:	40014400 	.word	0x40014400

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <NMI_Handler+0x4>

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001974:	2080      	movs	r0, #128	; 0x80
 8001976:	f002 fae9 	bl	8003f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001986:	f004 fb04 	bl	8005f92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20004c90 	.word	0x20004c90

08001994 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800199a:	f004 fafa 	bl	8005f92 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800199e:	4803      	ldr	r0, [pc, #12]	; (80019ac <TIM1_UP_TIM10_IRQHandler+0x18>)
 80019a0:	f004 faf7 	bl	8005f92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20004c90 	.word	0x20004c90
 80019ac:	20004da0 	.word	0x20004da0

080019b0 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80019b4:	4802      	ldr	r0, [pc, #8]	; (80019c0 <DMA2_Stream5_IRQHandler+0x10>)
 80019b6:	f001 fe91 	bl	80036dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20004d40 	.word	0x20004d40

080019c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019cc:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <_sbrk+0x5c>)
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <_sbrk+0x60>)
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <_sbrk+0x64>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d102      	bne.n	80019e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <_sbrk+0x64>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <_sbrk+0x68>)
 80019e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d207      	bcs.n	8001a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f4:	f008 fafa 	bl	8009fec <__errno>
 80019f8:	4603      	mov	r3, r0
 80019fa:	220c      	movs	r2, #12
 80019fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a02:	e009      	b.n	8001a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a05      	ldr	r2, [pc, #20]	; (8001a28 <_sbrk+0x64>)
 8001a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20020000 	.word	0x20020000
 8001a24:	00000400 	.word	0x00000400
 8001a28:	200000a4 	.word	0x200000a4
 8001a2c:	20004e78 	.word	0x20004e78

08001a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <SystemInit+0x20>)
 8001a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <SystemInit+0x20>)
 8001a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <touchTaskEntry>:
extern osMessageQId displayQueueHandle;

uint32_t qdata;
uint8_t touch_pending = 0;

void touchTaskEntry(void const * argument) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	6078      	str	r0, [r7, #4]
	uint8_t pos[4];
	uint16_t x;
	uint16_t y;

	while(1) {
		touch_pending = 0;
 8001a5c:	4b40      	ldr	r3, [pc, #256]	; (8001b60 <touchTaskEntry+0x10c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	701a      	strb	r2, [r3, #0]

		while (!touch_pending) {
 8001a62:	e002      	b.n	8001a6a <touchTaskEntry+0x16>
		   osDelay(10);
 8001a64:	200a      	movs	r0, #10
 8001a66:	f005 fc27 	bl	80072b8 <osDelay>
		while (!touch_pending) {
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <touchTaskEntry+0x10c>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f8      	beq.n	8001a64 <touchTaskEntry+0x10>
		 *                   ^
		 *                  0x79/0x75
		 */

		/*A1 - Y*/
		dout[0] = 0x90;
 8001a72:	2390      	movs	r3, #144	; 0x90
 8001a74:	733b      	strb	r3, [r7, #12]
		dout[1] = dout[2] = 0x00;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73bb      	strb	r3, [r7, #14]
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	737b      	strb	r3, [r7, #13]
		HAL_SPI_TransmitReceive(&hspi3, dout, din, 3, 20);
 8001a7e:	f107 0210 	add.w	r2, r7, #16
 8001a82:	f107 010c 	add.w	r1, r7, #12
 8001a86:	2314      	movs	r3, #20
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	4835      	ldr	r0, [pc, #212]	; (8001b64 <touchTaskEntry+0x110>)
 8001a8e:	f003 fbbf 	bl	8005210 <HAL_SPI_TransmitReceive>
		pos[0] = din[1];
 8001a92:	7c7b      	ldrb	r3, [r7, #17]
 8001a94:	723b      	strb	r3, [r7, #8]

		/*A5 - X*/
		dout[0] = 0xD0;
 8001a96:	23d0      	movs	r3, #208	; 0xd0
 8001a98:	733b      	strb	r3, [r7, #12]
		HAL_SPI_TransmitReceive(&hspi3, dout, din, 3, 20);
 8001a9a:	f107 0210 	add.w	r2, r7, #16
 8001a9e:	f107 010c 	add.w	r1, r7, #12
 8001aa2:	2314      	movs	r3, #20
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	482e      	ldr	r0, [pc, #184]	; (8001b64 <touchTaskEntry+0x110>)
 8001aaa:	f003 fbb1 	bl	8005210 <HAL_SPI_TransmitReceive>
		pos[1] = din[1];
 8001aae:	7c7b      	ldrb	r3, [r7, #17]
 8001ab0:	727b      	strb	r3, [r7, #9]

		/*A3 - Z1*/
		dout[0] = 0xB0;
 8001ab2:	23b0      	movs	r3, #176	; 0xb0
 8001ab4:	733b      	strb	r3, [r7, #12]
		HAL_SPI_TransmitReceive(&hspi3, dout, din, 3, 20);
 8001ab6:	f107 0210 	add.w	r2, r7, #16
 8001aba:	f107 010c 	add.w	r1, r7, #12
 8001abe:	2314      	movs	r3, #20
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	4827      	ldr	r0, [pc, #156]	; (8001b64 <touchTaskEntry+0x110>)
 8001ac6:	f003 fba3 	bl	8005210 <HAL_SPI_TransmitReceive>
		pos[2] = din[1];
 8001aca:	7c7b      	ldrb	r3, [r7, #17]
 8001acc:	72bb      	strb	r3, [r7, #10]

		/*A4 - Z2*/
		dout[0] = 0xC0;
 8001ace:	23c0      	movs	r3, #192	; 0xc0
 8001ad0:	733b      	strb	r3, [r7, #12]
		HAL_SPI_TransmitReceive(&hspi3, dout, din, 3, 20);
 8001ad2:	f107 0210 	add.w	r2, r7, #16
 8001ad6:	f107 010c 	add.w	r1, r7, #12
 8001ada:	2314      	movs	r3, #20
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2303      	movs	r3, #3
 8001ae0:	4820      	ldr	r0, [pc, #128]	; (8001b64 <touchTaskEntry+0x110>)
 8001ae2:	f003 fb95 	bl	8005210 <HAL_SPI_TransmitReceive>
		pos[3] = din[1];
 8001ae6:	7c7b      	ldrb	r3, [r7, #17]
 8001ae8:	72fb      	strb	r3, [r7, #11]

		/* Normalize */
		if (pos[0] >= 0x0b && pos[1] >= 0x06 &&
 8001aea:	7a3b      	ldrb	r3, [r7, #8]
 8001aec:	2b0a      	cmp	r3, #10
 8001aee:	d9b5      	bls.n	8001a5c <touchTaskEntry+0x8>
 8001af0:	7a7b      	ldrb	r3, [r7, #9]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d9b2      	bls.n	8001a5c <touchTaskEntry+0x8>
			pos[0] <= 0x79 && pos[1] <= 0x75 &&
 8001af6:	7a3b      	ldrb	r3, [r7, #8]
		if (pos[0] >= 0x0b && pos[1] >= 0x06 &&
 8001af8:	2b79      	cmp	r3, #121	; 0x79
 8001afa:	d8af      	bhi.n	8001a5c <touchTaskEntry+0x8>
			pos[0] <= 0x79 && pos[1] <= 0x75 &&
 8001afc:	7a7b      	ldrb	r3, [r7, #9]
 8001afe:	2b75      	cmp	r3, #117	; 0x75
 8001b00:	d8ac      	bhi.n	8001a5c <touchTaskEntry+0x8>
			pos[2] && pos[3]) { /* Bound check */
 8001b02:	7abb      	ldrb	r3, [r7, #10]
			pos[0] <= 0x79 && pos[1] <= 0x75 &&
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0a9      	beq.n	8001a5c <touchTaskEntry+0x8>
			pos[2] && pos[3]) { /* Bound check */
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0a6      	beq.n	8001a5c <touchTaskEntry+0x8>
			y = (((uint32_t)pos[1] - 0x06) * 240) / (0x75 - 0x06);
 8001b0e:	7a7b      	ldrb	r3, [r7, #9]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	011b      	lsls	r3, r3, #4
 8001b1a:	f5a3 62b4 	sub.w	r2, r3, #1440	; 0x5a0
 8001b1e:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <touchTaskEntry+0x114>)
 8001b20:	fba3 1302 	umull	r1, r3, r3, r2
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	0852      	lsrs	r2, r2, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	099b      	lsrs	r3, r3, #6
 8001b2c:	82fb      	strh	r3, [r7, #22]
			x = (((uint32_t)pos[0] - 0x0B) * 320) / (0x79 - 0x0B);
 8001b2e:	7a3b      	ldrb	r3, [r7, #8]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	019b      	lsls	r3, r3, #6
 8001b3a:	f5a3 635c 	sub.w	r3, r3, #3520	; 0xdc0
 8001b3e:	085b      	lsrs	r3, r3, #1
 8001b40:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <touchTaskEntry+0x118>)
 8001b42:	fba2 2303 	umull	r2, r3, r2, r3
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	82bb      	strh	r3, [r7, #20]
			qdata = x + (y << 16);
 8001b4a:	8aba      	ldrh	r2, [r7, #20]
 8001b4c:	8afb      	ldrh	r3, [r7, #22]
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	4413      	add	r3, r2
 8001b52:	461a      	mov	r2, r3
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <touchTaskEntry+0x11c>)
 8001b56:	601a      	str	r2, [r3, #0]
			//osMessagePut( displayQueueHandle, &qdata, 100);
			osDelay(50);
 8001b58:	2032      	movs	r0, #50	; 0x32
 8001b5a:	f005 fbad 	bl	80072b8 <osDelay>
		touch_pending = 0;
 8001b5e:	e77d      	b.n	8001a5c <touchTaskEntry+0x8>
 8001b60:	200000a8 	.word	0x200000a8
 8001b64:	20004c14 	.word	0x20004c14
 8001b68:	27350b89 	.word	0x27350b89
 8001b6c:	094f2095 	.word	0x094f2095
 8001b70:	20004de8 	.word	0x20004de8

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b78:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b7a:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b7c:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b90:	4c0b      	ldr	r4, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b9e:	f7ff ff47 	bl	8001a30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f008 fa29 	bl	8009ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7fe fe13 	bl	80007d0 <main>
  bx  lr    
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001bb8:	0800ba24 	.word	0x0800ba24
  ldr r2, =_sbss
 8001bbc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001bc0:	20004e78 	.word	0x20004e78

08001bc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC_IRQHandler>

08001bc6 <drawPoint>:
	 */
	return voltage / 18;
}

void drawPoint(uint16_t X, uint16_t Y)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	460a      	mov	r2, r1
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80bb      	strh	r3, [r7, #4]
		   TM_ILI9341_DrawFilledRectangle(50, 204, 86, 234, ILI9341_COLOR_BLACK);
	}
	else
		TM_ILI9341_DrawCircle(X, Y, 10, ILI9341_COLOR_BLUE);
*/
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <displayTaskEntry>:


void displayTaskEntry(void const * argument)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	6078      	str	r0, [r7, #4]
    TM_ILI9341_Init();
 8001bec:	f000 f8c8 	bl	8001d80 <TM_ILI9341_Init>

    /* Cross */
    TM_ILI9341_DrawFilledRectangle(0, 120, 320, 121, ILI9341_COLOR_WHITE);
 8001bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2379      	movs	r3, #121	; 0x79
 8001bf8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bfc:	2178      	movs	r1, #120	; 0x78
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f000 fcd2 	bl	80025a8 <TM_ILI9341_DrawFilledRectangle>
    TM_ILI9341_DrawFilledRectangle(106, 0, 107, 240*2, ILI9341_COLOR_WHITE);
 8001c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c0e:	226b      	movs	r2, #107	; 0x6b
 8001c10:	2100      	movs	r1, #0
 8001c12:	206a      	movs	r0, #106	; 0x6a
 8001c14:	f000 fcc8 	bl	80025a8 <TM_ILI9341_DrawFilledRectangle>
    TM_ILI9341_DrawFilledRectangle(213, 0, 214, 240*2, ILI9341_COLOR_WHITE);
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c22:	22d6      	movs	r2, #214	; 0xd6
 8001c24:	2100      	movs	r1, #0
 8001c26:	20d5      	movs	r0, #213	; 0xd5
 8001c28:	f000 fcbe 	bl	80025a8 <TM_ILI9341_DrawFilledRectangle>

    /* Texts */
    TM_ILI9341_Puts(20,0,"Engine", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <displayTaskEntry+0x174>)
 8001c38:	4a48      	ldr	r2, [pc, #288]	; (8001d5c <displayTaskEntry+0x178>)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	2014      	movs	r0, #20
 8001c3e:	f000 fbc9 	bl	80023d4 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(145,00,"Acc.", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001c42:	2300      	movs	r3, #0
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <displayTaskEntry+0x174>)
 8001c4e:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <displayTaskEntry+0x17c>)
 8001c50:	2100      	movs	r1, #0
 8001c52:	2091      	movs	r0, #145	; 0x91
 8001c54:	f000 fbbe 	bl	80023d4 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(245,00,"Solar", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	4b3d      	ldr	r3, [pc, #244]	; (8001d58 <displayTaskEntry+0x174>)
 8001c64:	4a3f      	ldr	r2, [pc, #252]	; (8001d64 <displayTaskEntry+0x180>)
 8001c66:	2100      	movs	r1, #0
 8001c68:	20f5      	movs	r0, #245	; 0xf5
 8001c6a:	f000 fbb3 	bl	80023d4 <TM_ILI9341_Puts>

    TM_ILI9341_Puts(20,122,"Engine", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <displayTaskEntry+0x174>)
 8001c7a:	4a38      	ldr	r2, [pc, #224]	; (8001d5c <displayTaskEntry+0x178>)
 8001c7c:	217a      	movs	r1, #122	; 0x7a
 8001c7e:	2014      	movs	r0, #20
 8001c80:	f000 fba8 	bl	80023d4 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(122,122,"Exhaust", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001c84:	2300      	movs	r3, #0
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <displayTaskEntry+0x174>)
 8001c90:	4a35      	ldr	r2, [pc, #212]	; (8001d68 <displayTaskEntry+0x184>)
 8001c92:	217a      	movs	r1, #122	; 0x7a
 8001c94:	207a      	movs	r0, #122	; 0x7a
 8001c96:	f000 fb9d 	bl	80023d4 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(235,122,"Status", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4b2c      	ldr	r3, [pc, #176]	; (8001d58 <displayTaskEntry+0x174>)
 8001ca6:	4a31      	ldr	r2, [pc, #196]	; (8001d6c <displayTaskEntry+0x188>)
 8001ca8:	217a      	movs	r1, #122	; 0x7a
 8001caa:	20eb      	movs	r0, #235	; 0xeb
 8001cac:	f000 fb92 	bl	80023d4 <TM_ILI9341_Puts>

    /* Batteries */
    TM_ILI9341_DrawImage(6, 88, 95, 30, BAT);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	231e      	movs	r3, #30
 8001cb6:	225f      	movs	r2, #95	; 0x5f
 8001cb8:	2158      	movs	r1, #88	; 0x58
 8001cba:	2006      	movs	r0, #6
 8001cbc:	f000 fcac 	bl	8002618 <TM_ILI9341_DrawImage>
    TM_ILI9341_DrawImage(112, 88, 95, 30, BAT);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	231e      	movs	r3, #30
 8001cc6:	225f      	movs	r2, #95	; 0x5f
 8001cc8:	2158      	movs	r1, #88	; 0x58
 8001cca:	2070      	movs	r0, #112	; 0x70
 8001ccc:	f000 fca4 	bl	8002618 <TM_ILI9341_DrawImage>
    TM_ILI9341_DrawImage(219, 88, 95, 30, BAT);
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	231e      	movs	r3, #30
 8001cd6:	225f      	movs	r2, #95	; 0x5f
 8001cd8:	2158      	movs	r1, #88	; 0x58
 8001cda:	20db      	movs	r0, #219	; 0xdb
 8001cdc:	f000 fc9c 	bl	8002618 <TM_ILI9341_DrawImage>

    /* Thermometers */
    TM_ILI9341_DrawImage(1, 145, 30, 90, THERM);
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	235a      	movs	r3, #90	; 0x5a
 8001ce6:	221e      	movs	r2, #30
 8001ce8:	2191      	movs	r1, #145	; 0x91
 8001cea:	2001      	movs	r0, #1
 8001cec:	f000 fc94 	bl	8002618 <TM_ILI9341_DrawImage>
    TM_ILI9341_DrawImage(113, 145, 30, 90, THERM);
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	235a      	movs	r3, #90	; 0x5a
 8001cf6:	221e      	movs	r2, #30
 8001cf8:	2191      	movs	r1, #145	; 0x91
 8001cfa:	2071      	movs	r0, #113	; 0x71
 8001cfc:	f000 fc8c 	bl	8002618 <TM_ILI9341_DrawImage>
    TM_ILI9341_Puts(220,180,"Room temp:", &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLACK);
 8001d00:	2300      	movs	r3, #0
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <displayTaskEntry+0x18c>)
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <displayTaskEntry+0x190>)
 8001d0e:	21b4      	movs	r1, #180	; 0xb4
 8001d10:	20dc      	movs	r0, #220	; 0xdc
 8001d12:	f000 fb5f 	bl	80023d4 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(220,147,"Bridge:", &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLACK);
 8001d16:	2300      	movs	r3, #0
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <displayTaskEntry+0x18c>)
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <displayTaskEntry+0x194>)
 8001d24:	2193      	movs	r1, #147	; 0x93
 8001d26:	20dc      	movs	r0, #220	; 0xdc
 8001d28:	f000 fb54 	bl	80023d4 <TM_ILI9341_Puts>

   for(;;)
   {
	   uint32_t data;

	   osMessageQueueGet (displayQueueHandle, &data, NULL, 0);
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <displayTaskEntry+0x198>)
 8001d2e:	6818      	ldr	r0, [r3, #0]
 8001d30:	f107 010c 	add.w	r1, r7, #12
 8001d34:	2300      	movs	r3, #0
 8001d36:	2200      	movs	r2, #0
 8001d38:	f005 fb4c 	bl	80073d4 <osMessageQueueGet>

	   if (data){
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f4      	beq.n	8001d2c <displayTaskEntry+0x148>
           drawPoint(data & 0xFFFF, (data & 0xFFFF0000) >> 16);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0c1b      	lsrs	r3, r3, #16
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4610      	mov	r0, r2
 8001d50:	f7ff ff39 	bl	8001bc6 <drawPoint>
   {
 8001d54:	e7ea      	b.n	8001d2c <displayTaskEntry+0x148>
 8001d56:	bf00      	nop
 8001d58:	2000000c 	.word	0x2000000c
 8001d5c:	0800a364 	.word	0x0800a364
 8001d60:	0800a36c 	.word	0x0800a36c
 8001d64:	0800a374 	.word	0x0800a374
 8001d68:	0800a37c 	.word	0x0800a37c
 8001d6c:	0800a384 	.word	0x0800a384
 8001d70:	20000004 	.word	0x20000004
 8001d74:	0800a38c 	.word	0x0800a38c
 8001d78:	0800a398 	.word	0x0800a398
 8001d7c:	20004d38 	.word	0x20004d38

08001d80 <TM_ILI9341_Init>:
void TM_ILI9341_SendCommand(uint8_t data);
void TM_ILI9341_Delay(volatile unsigned int delay);
void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);

void TM_ILI9341_Init() {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	
	/* Init LCD */
//	ILI9341_BL_RESET;

	TM_ILI9341_InitLCD();	
 8001d84:	f000 f820 	bl	8001dc8 <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <TM_ILI9341_Init+0x3c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <TM_ILI9341_Init+0x3c>)
 8001d90:	881a      	ldrh	r2, [r3, #0]
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <TM_ILI9341_Init+0x40>)
 8001d94:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 8001d96:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <TM_ILI9341_Init+0x44>)
 8001d98:	22f0      	movs	r2, #240	; 0xf0
 8001d9a:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <TM_ILI9341_Init+0x44>)
 8001d9e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001da2:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <TM_ILI9341_Init+0x44>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	711a      	strb	r2, [r3, #4]

	TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_2);
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 facc 	bl	8002348 <TM_ILI9341_Rotate>
	
	/* Fill with white color */
	TM_ILI9341_Fill(ILI9341_COLOR_BLACK);
 8001db0:	2000      	movs	r0, #0
 8001db2:	f000 f9f7 	bl	80021a4 <TM_ILI9341_Fill>

//	ILI9341_BL_SET;
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20004df6 	.word	0x20004df6
 8001dc0:	20004dec 	.word	0x20004dec
 8001dc4:	20004df0 	.word	0x20004df0

08001dc8 <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2140      	movs	r1, #64	; 0x40
 8001dd0:	4899      	ldr	r0, [pc, #612]	; (8002038 <TM_ILI9341_InitLCD+0x270>)
 8001dd2:	f002 f8a1 	bl	8003f18 <HAL_GPIO_WritePin>
	TM_ILI9341_Delay(20000);
 8001dd6:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001dda:	f000 faa3 	bl	8002324 <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 8001dde:	2201      	movs	r2, #1
 8001de0:	2140      	movs	r1, #64	; 0x40
 8001de2:	4895      	ldr	r0, [pc, #596]	; (8002038 <TM_ILI9341_InitLCD+0x270>)
 8001de4:	f002 f898 	bl	8003f18 <HAL_GPIO_WritePin>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 8001de8:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001dec:	f000 fa9a 	bl	8002324 <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f000 f925 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 8001df6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001dfa:	f000 fa93 	bl	8002324 <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 8001dfe:	20cb      	movs	r0, #203	; 0xcb
 8001e00:	f000 f91e 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 8001e04:	2039      	movs	r0, #57	; 0x39
 8001e06:	f000 f93f 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 8001e0a:	202c      	movs	r0, #44	; 0x2c
 8001e0c:	f000 f93c 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f000 f939 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 8001e16:	2034      	movs	r0, #52	; 0x34
 8001e18:	f000 f936 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f000 f933 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 8001e22:	20cf      	movs	r0, #207	; 0xcf
 8001e24:	f000 f90c 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f000 f92d 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 8001e2e:	20c1      	movs	r0, #193	; 0xc1
 8001e30:	f000 f92a 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 8001e34:	2030      	movs	r0, #48	; 0x30
 8001e36:	f000 f927 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 8001e3a:	20e8      	movs	r0, #232	; 0xe8
 8001e3c:	f000 f900 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 8001e40:	2085      	movs	r0, #133	; 0x85
 8001e42:	f000 f921 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f91e 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8001e4c:	2078      	movs	r0, #120	; 0x78
 8001e4e:	f000 f91b 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 8001e52:	20ea      	movs	r0, #234	; 0xea
 8001e54:	f000 f8f4 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f000 f915 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f912 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 8001e64:	20ed      	movs	r0, #237	; 0xed
 8001e66:	f000 f8eb 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 8001e6a:	2064      	movs	r0, #100	; 0x64
 8001e6c:	f000 f90c 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f909 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 8001e76:	2012      	movs	r0, #18
 8001e78:	f000 f906 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 8001e7c:	2081      	movs	r0, #129	; 0x81
 8001e7e:	f000 f903 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 8001e82:	20f7      	movs	r0, #247	; 0xf7
 8001e84:	f000 f8dc 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 8001e88:	2020      	movs	r0, #32
 8001e8a:	f000 f8fd 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 8001e8e:	20c0      	movs	r0, #192	; 0xc0
 8001e90:	f000 f8d6 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 8001e94:	2023      	movs	r0, #35	; 0x23
 8001e96:	f000 f8f7 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 8001e9a:	20c1      	movs	r0, #193	; 0xc1
 8001e9c:	f000 f8d0 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 8001ea0:	2010      	movs	r0, #16
 8001ea2:	f000 f8f1 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 8001ea6:	20c5      	movs	r0, #197	; 0xc5
 8001ea8:	f000 f8ca 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 8001eac:	203e      	movs	r0, #62	; 0x3e
 8001eae:	f000 f8eb 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 8001eb2:	2028      	movs	r0, #40	; 0x28
 8001eb4:	f000 f8e8 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 8001eb8:	20c7      	movs	r0, #199	; 0xc7
 8001eba:	f000 f8c1 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 8001ebe:	2086      	movs	r0, #134	; 0x86
 8001ec0:	f000 f8e2 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8001ec4:	2036      	movs	r0, #54	; 0x36
 8001ec6:	f000 f8bb 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 8001eca:	2048      	movs	r0, #72	; 0x48
 8001ecc:	f000 f8dc 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 8001ed0:	203a      	movs	r0, #58	; 0x3a
 8001ed2:	f000 f8b5 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 8001ed6:	2055      	movs	r0, #85	; 0x55
 8001ed8:	f000 f8d6 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 8001edc:	20b1      	movs	r0, #177	; 0xb1
 8001ede:	f000 f8af 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f000 f8d0 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 8001ee8:	2018      	movs	r0, #24
 8001eea:	f000 f8cd 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 8001eee:	20b6      	movs	r0, #182	; 0xb6
 8001ef0:	f000 f8a6 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 8001ef4:	2008      	movs	r0, #8
 8001ef6:	f000 f8c7 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 8001efa:	2082      	movs	r0, #130	; 0x82
 8001efc:	f000 f8c4 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 8001f00:	2027      	movs	r0, #39	; 0x27
 8001f02:	f000 f8c1 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 8001f06:	20f2      	movs	r0, #242	; 0xf2
 8001f08:	f000 f89a 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	f000 f8bb 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8001f12:	202a      	movs	r0, #42	; 0x2a
 8001f14:	f000 f894 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f000 f8b5 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f000 f8b2 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f000 f8af 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 8001f2a:	20ef      	movs	r0, #239	; 0xef
 8001f2c:	f000 f8ac 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8001f30:	202b      	movs	r0, #43	; 0x2b
 8001f32:	f000 f885 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 f8a6 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f8a3 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 f8a0 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 8001f48:	203f      	movs	r0, #63	; 0x3f
 8001f4a:	f000 f89d 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8001f4e:	2026      	movs	r0, #38	; 0x26
 8001f50:	f000 f876 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8001f54:	2001      	movs	r0, #1
 8001f56:	f000 f897 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8001f5a:	20e0      	movs	r0, #224	; 0xe0
 8001f5c:	f000 f870 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8001f60:	200f      	movs	r0, #15
 8001f62:	f000 f891 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8001f66:	2031      	movs	r0, #49	; 0x31
 8001f68:	f000 f88e 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 8001f6c:	202b      	movs	r0, #43	; 0x2b
 8001f6e:	f000 f88b 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8001f72:	200c      	movs	r0, #12
 8001f74:	f000 f888 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001f78:	200e      	movs	r0, #14
 8001f7a:	f000 f885 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8001f7e:	2008      	movs	r0, #8
 8001f80:	f000 f882 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8001f84:	204e      	movs	r0, #78	; 0x4e
 8001f86:	f000 f87f 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 8001f8a:	20f1      	movs	r0, #241	; 0xf1
 8001f8c:	f000 f87c 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 8001f90:	2037      	movs	r0, #55	; 0x37
 8001f92:	f000 f879 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8001f96:	2007      	movs	r0, #7
 8001f98:	f000 f876 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 8001f9c:	2010      	movs	r0, #16
 8001f9e:	f000 f873 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	f000 f870 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001fa8:	200e      	movs	r0, #14
 8001faa:	f000 f86d 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8001fae:	2009      	movs	r0, #9
 8001fb0:	f000 f86a 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f000 f867 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 8001fba:	20e1      	movs	r0, #225	; 0xe1
 8001fbc:	f000 f840 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f000 f861 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001fc6:	200e      	movs	r0, #14
 8001fc8:	f000 f85e 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 8001fcc:	2014      	movs	r0, #20
 8001fce:	f000 f85b 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8001fd2:	2003      	movs	r0, #3
 8001fd4:	f000 f858 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8001fd8:	2011      	movs	r0, #17
 8001fda:	f000 f855 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8001fde:	2007      	movs	r0, #7
 8001fe0:	f000 f852 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8001fe4:	2031      	movs	r0, #49	; 0x31
 8001fe6:	f000 f84f 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 8001fea:	20c1      	movs	r0, #193	; 0xc1
 8001fec:	f000 f84c 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 8001ff0:	2048      	movs	r0, #72	; 0x48
 8001ff2:	f000 f849 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8001ff6:	2008      	movs	r0, #8
 8001ff8:	f000 f846 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8001ffc:	200f      	movs	r0, #15
 8001ffe:	f000 f843 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8002002:	200c      	movs	r0, #12
 8002004:	f000 f840 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8002008:	2031      	movs	r0, #49	; 0x31
 800200a:	f000 f83d 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 800200e:	2036      	movs	r0, #54	; 0x36
 8002010:	f000 f83a 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8002014:	200f      	movs	r0, #15
 8002016:	f000 f837 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 800201a:	2011      	movs	r0, #17
 800201c:	f000 f810 	bl	8002040 <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 8002020:	4806      	ldr	r0, [pc, #24]	; (800203c <TM_ILI9341_InitLCD+0x274>)
 8002022:	f000 f97f 	bl	8002324 <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8002026:	2029      	movs	r0, #41	; 0x29
 8002028:	f000 f80a 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800202c:	202c      	movs	r0, #44	; 0x2c
 800202e:	f000 f807 	bl	8002040 <TM_ILI9341_SendCommand>
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40020c00 	.word	0x40020c00
 800203c:	000f4240 	.word	0x000f4240

08002040 <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 800204a:	2200      	movs	r2, #0
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	480b      	ldr	r0, [pc, #44]	; (800207c <TM_ILI9341_SendCommand+0x3c>)
 8002050:	f001 ff62 	bl	8003f18 <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 8002054:	2200      	movs	r2, #0
 8002056:	2110      	movs	r1, #16
 8002058:	4809      	ldr	r0, [pc, #36]	; (8002080 <TM_ILI9341_SendCommand+0x40>)
 800205a:	f001 ff5d 	bl	8003f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
 800205e:	1dfb      	adds	r3, r7, #7
 8002060:	2201      	movs	r2, #1
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <TM_ILI9341_SendCommand+0x44>)
 8002066:	f003 fa75 	bl	8005554 <HAL_SPI_Transmit_DMA>
	ILI9341_CS_SET;
 800206a:	2201      	movs	r2, #1
 800206c:	2110      	movs	r1, #16
 800206e:	4804      	ldr	r0, [pc, #16]	; (8002080 <TM_ILI9341_SendCommand+0x40>)
 8002070:	f001 ff52 	bl	8003f18 <HAL_GPIO_WritePin>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40020000 	.word	0x40020000
 8002084:	20004cdc 	.word	0x20004cdc

08002088 <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 8002092:	2201      	movs	r2, #1
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	480b      	ldr	r0, [pc, #44]	; (80020c4 <TM_ILI9341_SendData+0x3c>)
 8002098:	f001 ff3e 	bl	8003f18 <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 800209c:	2200      	movs	r2, #0
 800209e:	2110      	movs	r1, #16
 80020a0:	4809      	ldr	r0, [pc, #36]	; (80020c8 <TM_ILI9341_SendData+0x40>)
 80020a2:	f001 ff39 	bl	8003f18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	2201      	movs	r2, #1
 80020aa:	4619      	mov	r1, r3
 80020ac:	4807      	ldr	r0, [pc, #28]	; (80020cc <TM_ILI9341_SendData+0x44>)
 80020ae:	f003 fa51 	bl	8005554 <HAL_SPI_Transmit_DMA>
	ILI9341_CS_SET;
 80020b2:	2201      	movs	r2, #1
 80020b4:	2110      	movs	r1, #16
 80020b6:	4804      	ldr	r0, [pc, #16]	; (80020c8 <TM_ILI9341_SendData+0x40>)
 80020b8:	f001 ff2e 	bl	8003f18 <HAL_GPIO_WritePin>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40020c00 	.word	0x40020c00
 80020c8:	40020000 	.word	0x40020000
 80020cc:	20004cdc 	.word	0x20004cdc

080020d0 <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	603a      	str	r2, [r7, #0]
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	460b      	mov	r3, r1
 80020de:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 80020e0:	88bb      	ldrh	r3, [r7, #4]
 80020e2:	88fa      	ldrh	r2, [r7, #6]
 80020e4:	88b9      	ldrh	r1, [r7, #4]
 80020e6:	88f8      	ldrh	r0, [r7, #6]
 80020e8:	f000 f812 	bl	8002110 <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80020ec:	202c      	movs	r0, #44	; 0x2c
 80020ee:	f7ff ffa7 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	0a1b      	lsrs	r3, r3, #8
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ffc5 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff ffc0 	bl	8002088 <TM_ILI9341_SendData>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4604      	mov	r4, r0
 8002118:	4608      	mov	r0, r1
 800211a:	4611      	mov	r1, r2
 800211c:	461a      	mov	r2, r3
 800211e:	4623      	mov	r3, r4
 8002120:	80fb      	strh	r3, [r7, #6]
 8002122:	4603      	mov	r3, r0
 8002124:	80bb      	strh	r3, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	807b      	strh	r3, [r7, #2]
 800212a:	4613      	mov	r3, r2
 800212c:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800212e:	202a      	movs	r0, #42	; 0x2a
 8002130:	f7ff ff86 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	b29b      	uxth	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ffa3 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff9e 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 800214c:	887b      	ldrh	r3, [r7, #2]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b29b      	uxth	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff97 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff ff92 	bl	8002088 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8002164:	202b      	movs	r0, #43	; 0x2b
 8002166:	f7ff ff6b 	bl	8002040 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 800216a:	88bb      	ldrh	r3, [r7, #4]
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	b29b      	uxth	r3, r3
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff88 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 8002178:	88bb      	ldrh	r3, [r7, #4]
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff83 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 8002182:	883b      	ldrh	r3, [r7, #0]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	b29b      	uxth	r3, r3
 8002188:	b2db      	uxtb	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff7c 	bl	8002088 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 8002190:	883b      	ldrh	r3, [r7, #0]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff ff77 	bl	8002088 <TM_ILI9341_SendData>
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd90      	pop	{r4, r7, pc}
	...

080021a4 <TM_ILI9341_Fill>:

void TM_ILI9341_Fill(uint32_t color) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
	/* Fill entire screen */
	TM_ILI9341_INT_Fill(0, 0, ILI9341_Opts.width, ILI9341_Opts.height, color);
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <TM_ILI9341_Fill+0x28>)
 80021ae:	881a      	ldrh	r2, [r3, #0]
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <TM_ILI9341_Fill+0x28>)
 80021b2:	8859      	ldrh	r1, [r3, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	460b      	mov	r3, r1
 80021bc:	2100      	movs	r1, #0
 80021be:	2000      	movs	r0, #0
 80021c0:	f000 f806 	bl	80021d0 <TM_ILI9341_INT_Fill>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20004df0 	.word	0x20004df0

080021d0 <TM_ILI9341_INT_Fill>:

void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b087      	sub	sp, #28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4604      	mov	r4, r0
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4623      	mov	r3, r4
 80021e0:	80fb      	strh	r3, [r7, #6]
 80021e2:	4603      	mov	r3, r0
 80021e4:	80bb      	strh	r3, [r7, #4]
 80021e6:	460b      	mov	r3, r1
 80021e8:	807b      	strh	r3, [r7, #2]
 80021ea:	4613      	mov	r3, r2
 80021ec:	803b      	strh	r3, [r7, #0]
	uint32_t pixels_count;
	uint16_t *temp;
	uint32_t i;

	/* Calculate pixels count */
	pixels_count = (x1 - x0) * (y1 - y0);
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	8839      	ldrh	r1, [r7, #0]
 80021f6:	88ba      	ldrh	r2, [r7, #4]
 80021f8:	1a8a      	subs	r2, r1, r2
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	617b      	str	r3, [r7, #20]

	if (pixels_count > 1024) {
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002206:	d919      	bls.n	800223c <TM_ILI9341_INT_Fill+0x6c>
		temp = malloc(1024 * sizeof(uint16_t));
 8002208:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800220c:	f007 ff1a 	bl	800a044 <malloc>
 8002210:	4603      	mov	r3, r0
 8002212:	613b      	str	r3, [r7, #16]
		if (!temp) return;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d078      	beq.n	800230c <TM_ILI9341_INT_Fill+0x13c>
		for (i=0 ; i < 1024 ; i++) {
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	e008      	b.n	8002232 <TM_ILI9341_INT_Fill+0x62>
	        temp[i] = color;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800222a:	801a      	strh	r2, [r3, #0]
		for (i=0 ; i < 1024 ; i++) {
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3301      	adds	r3, #1
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002238:	d3f2      	bcc.n	8002220 <TM_ILI9341_INT_Fill+0x50>
 800223a:	e017      	b.n	800226c <TM_ILI9341_INT_Fill+0x9c>
		}
	}
	else{
		temp = malloc(pixels_count);
 800223c:	6978      	ldr	r0, [r7, #20]
 800223e:	f007 ff01 	bl	800a044 <malloc>
 8002242:	4603      	mov	r3, r0
 8002244:	613b      	str	r3, [r7, #16]
		if (!temp) return;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d061      	beq.n	8002310 <TM_ILI9341_INT_Fill+0x140>
		for (i=0 ; i < pixels_count ; i++) {
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e008      	b.n	8002264 <TM_ILI9341_INT_Fill+0x94>
	        temp[i] = color;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4413      	add	r3, r2
 800225a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800225c:	801a      	strh	r2, [r3, #0]
		for (i=0 ; i < pixels_count ; i++) {
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	3301      	adds	r3, #1
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	d3f2      	bcc.n	8002252 <TM_ILI9341_INT_Fill+0x82>
		}
	}

	/* Set cursor position */
	TM_ILI9341_SetCursorPosition(x0, y0, x1, y1);
 800226c:	883b      	ldrh	r3, [r7, #0]
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	88b9      	ldrh	r1, [r7, #4]
 8002272:	88f8      	ldrh	r0, [r7, #6]
 8002274:	f7ff ff4c 	bl	8002110 <TM_ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8002278:	202c      	movs	r0, #44	; 0x2c
 800227a:	f7ff fee1 	bl	8002040 <TM_ILI9341_SendCommand>
	
	/* Send everything */
	ILI9341_WRX_SET;
 800227e:	2201      	movs	r2, #1
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	4825      	ldr	r0, [pc, #148]	; (8002318 <TM_ILI9341_INT_Fill+0x148>)
 8002284:	f001 fe48 	bl	8003f18 <HAL_GPIO_WritePin>
	
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <TM_ILI9341_INT_Fill+0x14c>)
 800228a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800228e:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 8002290:	4822      	ldr	r0, [pc, #136]	; (800231c <TM_ILI9341_INT_Fill+0x14c>)
 8002292:	f002 fdf8 	bl	8004e86 <HAL_SPI_Init>

	while (pixels_count) {
 8002296:	e02c      	b.n	80022f2 <TM_ILI9341_INT_Fill+0x122>
		if (pixels_count > 1024) {
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229e:	d915      	bls.n	80022cc <TM_ILI9341_INT_Fill+0xfc>
			ILI9341_CS_RESET;
 80022a0:	2200      	movs	r2, #0
 80022a2:	2110      	movs	r1, #16
 80022a4:	481e      	ldr	r0, [pc, #120]	; (8002320 <TM_ILI9341_INT_Fill+0x150>)
 80022a6:	f001 fe37 	bl	8003f18 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)temp, 1024, 5);
 80022aa:	2305      	movs	r3, #5
 80022ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b0:	6939      	ldr	r1, [r7, #16]
 80022b2:	481a      	ldr	r0, [pc, #104]	; (800231c <TM_ILI9341_INT_Fill+0x14c>)
 80022b4:	f002 fe70 	bl	8004f98 <HAL_SPI_Transmit>
			//HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)temp, 1024);
			pixels_count -= 1024;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80022be:	617b      	str	r3, [r7, #20]
			ILI9341_CS_SET;
 80022c0:	2201      	movs	r2, #1
 80022c2:	2110      	movs	r1, #16
 80022c4:	4816      	ldr	r0, [pc, #88]	; (8002320 <TM_ILI9341_INT_Fill+0x150>)
 80022c6:	f001 fe27 	bl	8003f18 <HAL_GPIO_WritePin>
 80022ca:	e012      	b.n	80022f2 <TM_ILI9341_INT_Fill+0x122>
		}
		else {
			ILI9341_CS_RESET;
 80022cc:	2200      	movs	r2, #0
 80022ce:	2110      	movs	r1, #16
 80022d0:	4813      	ldr	r0, [pc, #76]	; (8002320 <TM_ILI9341_INT_Fill+0x150>)
 80022d2:	f001 fe21 	bl	8003f18 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)temp, pixels_count, 5);
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	2305      	movs	r3, #5
 80022dc:	6939      	ldr	r1, [r7, #16]
 80022de:	480f      	ldr	r0, [pc, #60]	; (800231c <TM_ILI9341_INT_Fill+0x14c>)
 80022e0:	f002 fe5a 	bl	8004f98 <HAL_SPI_Transmit>
			//HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)temp, pixels_count);
			pixels_count = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
			ILI9341_CS_SET;
 80022e8:	2201      	movs	r2, #1
 80022ea:	2110      	movs	r1, #16
 80022ec:	480c      	ldr	r0, [pc, #48]	; (8002320 <TM_ILI9341_INT_Fill+0x150>)
 80022ee:	f001 fe13 	bl	8003f18 <HAL_GPIO_WritePin>
	while (pixels_count) {
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1cf      	bne.n	8002298 <TM_ILI9341_INT_Fill+0xc8>
		}
	}

	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <TM_ILI9341_INT_Fill+0x14c>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 80022fe:	4807      	ldr	r0, [pc, #28]	; (800231c <TM_ILI9341_INT_Fill+0x14c>)
 8002300:	f002 fdc1 	bl	8004e86 <HAL_SPI_Init>

	free(temp);
 8002304:	6938      	ldr	r0, [r7, #16]
 8002306:	f007 fea5 	bl	800a054 <free>
 800230a:	e002      	b.n	8002312 <TM_ILI9341_INT_Fill+0x142>
		if (!temp) return;
 800230c:	bf00      	nop
 800230e:	e000      	b.n	8002312 <TM_ILI9341_INT_Fill+0x142>
		if (!temp) return;
 8002310:	bf00      	nop
}
 8002312:	371c      	adds	r7, #28
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	40020c00 	.word	0x40020c00
 800231c:	20004cdc 	.word	0x20004cdc
 8002320:	40020000 	.word	0x40020000

08002324 <TM_ILI9341_Delay>:

void TM_ILI9341_Delay(volatile unsigned int delay) {
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 800232c:	e002      	b.n	8002334 <TM_ILI9341_Delay+0x10>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	3b01      	subs	r3, #1
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f9      	bne.n	800232e <TM_ILI9341_Delay+0xa>
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <TM_ILI9341_Rotate>:

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8002352:	2036      	movs	r0, #54	; 0x36
 8002354:	f7ff fe74 	bl	8002040 <TM_ILI9341_SendCommand>
	if (orientation == TM_ILI9341_Orientation_Portrait_1) {
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d103      	bne.n	8002366 <TM_ILI9341_Rotate+0x1e>
		TM_ILI9341_SendData(0x58);
 800235e:	2058      	movs	r0, #88	; 0x58
 8002360:	f7ff fe92 	bl	8002088 <TM_ILI9341_SendData>
 8002364:	e013      	b.n	800238e <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Portrait_2) {
 8002366:	79fb      	ldrb	r3, [r7, #7]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d103      	bne.n	8002374 <TM_ILI9341_Rotate+0x2c>
		TM_ILI9341_SendData(0x88);
 800236c:	2088      	movs	r0, #136	; 0x88
 800236e:	f7ff fe8b 	bl	8002088 <TM_ILI9341_SendData>
 8002372:	e00c      	b.n	800238e <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_1) {
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d103      	bne.n	8002382 <TM_ILI9341_Rotate+0x3a>
		TM_ILI9341_SendData(0x28);
 800237a:	2028      	movs	r0, #40	; 0x28
 800237c:	f7ff fe84 	bl	8002088 <TM_ILI9341_SendData>
 8002380:	e005      	b.n	800238e <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_2) {
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d102      	bne.n	800238e <TM_ILI9341_Rotate+0x46>
		TM_ILI9341_SendData(0xE8);
 8002388:	20e8      	movs	r0, #232	; 0xe8
 800238a:	f7ff fe7d 	bl	8002088 <TM_ILI9341_SendData>
	}
	
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <TM_ILI9341_Rotate+0x52>
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d10a      	bne.n	80023b0 <TM_ILI9341_Rotate+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <TM_ILI9341_Rotate+0x88>)
 800239c:	22f0      	movs	r2, #240	; 0xf0
 800239e:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <TM_ILI9341_Rotate+0x88>)
 80023a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023a6:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 80023a8:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <TM_ILI9341_Rotate+0x88>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	711a      	strb	r2, [r3, #4]
 80023ae:	e00a      	b.n	80023c6 <TM_ILI9341_Rotate+0x7e>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <TM_ILI9341_Rotate+0x88>)
 80023b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80023b6:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <TM_ILI9341_Rotate+0x88>)
 80023ba:	22f0      	movs	r2, #240	; 0xf0
 80023bc:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Landscape;
 80023be:	4b04      	ldr	r3, [pc, #16]	; (80023d0 <TM_ILI9341_Rotate+0x88>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	711a      	strb	r2, [r3, #4]
	}
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20004df0 	.word	0x20004df0

080023d4 <TM_ILI9341_Puts>:

void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b088      	sub	sp, #32
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60ba      	str	r2, [r7, #8]
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	4603      	mov	r3, r0
 80023e0:	81fb      	strh	r3, [r7, #14]
 80023e2:	460b      	mov	r3, r1
 80023e4:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	82fb      	strh	r3, [r7, #22]
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 80023ea:	4a24      	ldr	r2, [pc, #144]	; (800247c <TM_ILI9341_Puts+0xa8>)
 80023ec:	89fb      	ldrh	r3, [r7, #14]
 80023ee:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 80023f0:	4a23      	ldr	r2, [pc, #140]	; (8002480 <TM_ILI9341_Puts+0xac>)
 80023f2:	89bb      	ldrh	r3, [r7, #12]
 80023f4:	8013      	strh	r3, [r2, #0]
	
	while (*str) {
 80023f6:	e038      	b.n	800246a <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b0a      	cmp	r3, #10
 80023fe:	d11d      	bne.n	800243c <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <TM_ILI9341_Puts+0xac>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	3301      	adds	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <TM_ILI9341_Puts+0xac>)
 8002414:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	3301      	adds	r3, #1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b0d      	cmp	r3, #13
 800241e:	d106      	bne.n	800242e <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <TM_ILI9341_Puts+0xa8>)
 8002422:	2200      	movs	r2, #0
 8002424:	801a      	strh	r2, [r3, #0]
				str++;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	3301      	adds	r3, #1
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	e002      	b.n	8002434 <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 800242e:	4a13      	ldr	r2, [pc, #76]	; (800247c <TM_ILI9341_Puts+0xa8>)
 8002430:	8afb      	ldrh	r3, [r7, #22]
 8002432:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	3301      	adds	r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
			continue;
 800243a:	e016      	b.n	800246a <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b0d      	cmp	r3, #13
 8002442:	d103      	bne.n	800244c <TM_ILI9341_Puts+0x78>
			str++;
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	3301      	adds	r3, #1
 8002448:	60bb      	str	r3, [r7, #8]
			continue;
 800244a:	e00e      	b.n	800246a <TM_ILI9341_Puts+0x96>
		}
		
		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <TM_ILI9341_Puts+0xa8>)
 800244e:	8818      	ldrh	r0, [r3, #0]
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <TM_ILI9341_Puts+0xac>)
 8002452:	8819      	ldrh	r1, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	1c5a      	adds	r2, r3, #1
 8002458:	60ba      	str	r2, [r7, #8]
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f000 f80d 	bl	8002484 <TM_ILI9341_Putc>
	while (*str) {
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1c2      	bne.n	80023f8 <TM_ILI9341_Puts+0x24>
	}
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20004dec 	.word	0x20004dec
 8002480:	20004df6 	.word	0x20004df6

08002484 <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	af02      	add	r7, sp, #8
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	4603      	mov	r3, r0
 800248e:	81fb      	strh	r3, [r7, #14]
 8002490:	460b      	mov	r3, r1
 8002492:	81bb      	strh	r3, [r7, #12]
 8002494:	4613      	mov	r3, r2
 8002496:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 8002498:	4a40      	ldr	r2, [pc, #256]	; (800259c <TM_ILI9341_Putc+0x118>)
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 800249e:	4a40      	ldr	r2, [pc, #256]	; (80025a0 <TM_ILI9341_Putc+0x11c>)
 80024a0:	89bb      	ldrh	r3, [r7, #12]
 80024a2:	8013      	strh	r3, [r2, #0]
	
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 80024a4:	4b3d      	ldr	r3, [pc, #244]	; (800259c <TM_ILI9341_Putc+0x118>)
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a3c      	ldr	r2, [pc, #240]	; (80025a4 <TM_ILI9341_Putc+0x120>)
 80024b2:	8812      	ldrh	r2, [r2, #0]
 80024b4:	4293      	cmp	r3, r2
 80024b6:	dd0b      	ble.n	80024d0 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	785b      	ldrb	r3, [r3, #1]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <TM_ILI9341_Putc+0x11c>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <TM_ILI9341_Putc+0x11c>)
 80024c8:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 80024ca:	4b34      	ldr	r3, [pc, #208]	; (800259c <TM_ILI9341_Putc+0x118>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 80024d0:	4b32      	ldr	r3, [pc, #200]	; (800259c <TM_ILI9341_Putc+0x118>)
 80024d2:	8818      	ldrh	r0, [r3, #0]
 80024d4:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <TM_ILI9341_Putc+0x11c>)
 80024d6:	8819      	ldrh	r1, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b2f      	ldr	r3, [pc, #188]	; (800259c <TM_ILI9341_Putc+0x118>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	b29c      	uxth	r4, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	785b      	ldrb	r3, [r3, #1]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b2c      	ldr	r3, [pc, #176]	; (80025a0 <TM_ILI9341_Putc+0x11c>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	4613      	mov	r3, r2
 80024fc:	4622      	mov	r2, r4
 80024fe:	f7ff fe67 	bl	80021d0 <TM_ILI9341_INT_Fill>
	
	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
 8002506:	e035      	b.n	8002574 <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	7afb      	ldrb	r3, [r7, #11]
 800250e:	3b20      	subs	r3, #32
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	7849      	ldrb	r1, [r1, #1]
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4619      	mov	r1, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	440b      	add	r3, r1
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	e01a      	b.n	8002562 <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00f      	beq.n	800255c <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b16      	ldr	r3, [pc, #88]	; (800259c <TM_ILI9341_Putc+0x118>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	4413      	add	r3, r2
 8002546:	b298      	uxth	r0, r3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	b29a      	uxth	r2, r3
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <TM_ILI9341_Putc+0x11c>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	4413      	add	r3, r2
 8002552:	b29b      	uxth	r3, r3
 8002554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002556:	4619      	mov	r1, r3
 8002558:	f7ff fdba 	bl	80020d0 <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	3301      	adds	r3, #1
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	4293      	cmp	r3, r2
 800256c:	d3de      	bcc.n	800252c <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	461a      	mov	r2, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4293      	cmp	r3, r2
 800257e:	d3c3      	bcc.n	8002508 <TM_ILI9341_Putc+0x84>
			}
		}
	}
	
	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	b29a      	uxth	r2, r3
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <TM_ILI9341_Putc+0x118>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	4413      	add	r3, r2
 800258c:	b29a      	uxth	r2, r3
 800258e:	4b03      	ldr	r3, [pc, #12]	; (800259c <TM_ILI9341_Putc+0x118>)
 8002590:	801a      	strh	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop
 800259c:	20004dec 	.word	0x20004dec
 80025a0:	20004df6 	.word	0x20004df6
 80025a4:	20004df0 	.word	0x20004df0

080025a8 <TM_ILI9341_DrawFilledRectangle>:
	TM_ILI9341_DrawLine(x0, y0, x0, y1, color);	//Left
	TM_ILI9341_DrawLine(x1, y0, x1, y1, color);	//Right
	TM_ILI9341_DrawLine(x0, y1, x1, y1, color);	//Bottom
}

void TM_ILI9341_DrawFilledRectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {	
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	4604      	mov	r4, r0
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	80fb      	strh	r3, [r7, #6]
 80025ba:	4603      	mov	r3, r0
 80025bc:	80bb      	strh	r3, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
 80025c2:	4613      	mov	r3, r2
 80025c4:	803b      	strh	r3, [r7, #0]
	uint16_t tmp;
	
	/* Check correction */
	if (x0 > x1) {
 80025c6:	88fa      	ldrh	r2, [r7, #6]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d905      	bls.n	80025da <TM_ILI9341_DrawFilledRectangle+0x32>
		tmp = x0;
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	81fb      	strh	r3, [r7, #14]
		x0 = x1;
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 80025d6:	89fb      	ldrh	r3, [r7, #14]
 80025d8:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 80025da:	88ba      	ldrh	r2, [r7, #4]
 80025dc:	883b      	ldrh	r3, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d905      	bls.n	80025ee <TM_ILI9341_DrawFilledRectangle+0x46>
		tmp = y0;
 80025e2:	88bb      	ldrh	r3, [r7, #4]
 80025e4:	81fb      	strh	r3, [r7, #14]
		y0 = y1;
 80025e6:	883b      	ldrh	r3, [r7, #0]
 80025e8:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	803b      	strh	r3, [r7, #0]
	}
	
	/* Fill rectangle */
	TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
 80025ee:	6a3b      	ldr	r3, [r7, #32]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	883c      	ldrh	r4, [r7, #0]
 80025f4:	887a      	ldrh	r2, [r7, #2]
 80025f6:	88b9      	ldrh	r1, [r7, #4]
 80025f8:	88f8      	ldrh	r0, [r7, #6]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	4623      	mov	r3, r4
 80025fe:	f7ff fde7 	bl	80021d0 <TM_ILI9341_INT_Fill>
	
	/* CS HIGH back */
	ILI9341_CS_SET;
 8002602:	2201      	movs	r2, #1
 8002604:	2110      	movs	r1, #16
 8002606:	4803      	ldr	r0, [pc, #12]	; (8002614 <TM_ILI9341_DrawFilledRectangle+0x6c>)
 8002608:	f001 fc86 	bl	8003f18 <HAL_GPIO_WritePin>
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}
 8002614:	40020000 	.word	0x40020000

08002618 <TM_ILI9341_DrawImage>:
        TM_ILI9341_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
        TM_ILI9341_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
    }
}

void TM_ILI9341_DrawImage(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t imgId) {
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4604      	mov	r4, r0
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4623      	mov	r3, r4
 8002628:	80fb      	strh	r3, [r7, #6]
 800262a:	4603      	mov	r3, r0
 800262c:	80bb      	strh	r3, [r7, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	807b      	strh	r3, [r7, #2]
 8002632:	4613      	mov	r3, r2
 8002634:	803b      	strh	r3, [r7, #0]

	TM_ILI9341_SetCursorPosition(x0, y0, x0+x1-1, y0+y1-1);
 8002636:	88fa      	ldrh	r2, [r7, #6]
 8002638:	887b      	ldrh	r3, [r7, #2]
 800263a:	4413      	add	r3, r2
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29c      	uxth	r4, r3
 8002642:	88ba      	ldrh	r2, [r7, #4]
 8002644:	883b      	ldrh	r3, [r7, #0]
 8002646:	4413      	add	r3, r2
 8002648:	b29b      	uxth	r3, r3
 800264a:	3b01      	subs	r3, #1
 800264c:	b29b      	uxth	r3, r3
 800264e:	88b9      	ldrh	r1, [r7, #4]
 8002650:	88f8      	ldrh	r0, [r7, #6]
 8002652:	4622      	mov	r2, r4
 8002654:	f7ff fd5c 	bl	8002110 <TM_ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8002658:	202c      	movs	r0, #44	; 0x2c
 800265a:	f7ff fcf1 	bl	8002040 <TM_ILI9341_SendCommand>

	/* Send everything */
	ILI9341_WRX_SET;
 800265e:	2201      	movs	r2, #1
 8002660:	2180      	movs	r1, #128	; 0x80
 8002662:	480f      	ldr	r0, [pc, #60]	; (80026a0 <TM_ILI9341_DrawImage+0x88>)
 8002664:	f001 fc58 	bl	8003f18 <HAL_GPIO_WritePin>

	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002668:	4b0e      	ldr	r3, [pc, #56]	; (80026a4 <TM_ILI9341_DrawImage+0x8c>)
 800266a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800266e:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <TM_ILI9341_DrawImage+0x8c>)
 8002672:	f002 fc08 	bl	8004e86 <HAL_SPI_Init>
	ILI9341_CS_RESET;
 8002676:	2200      	movs	r2, #0
 8002678:	2110      	movs	r1, #16
 800267a:	480b      	ldr	r0, [pc, #44]	; (80026a8 <TM_ILI9341_DrawImage+0x90>)
 800267c:	f001 fc4c 	bl	8003f18 <HAL_GPIO_WritePin>
	 	case ERR:
	 	    HAL_SPI_Transmit(&hspi1, &error, 36*30, 100);
	 		break;
	}
	*/
	ILI9341_CS_SET;
 8002680:	2201      	movs	r2, #1
 8002682:	2110      	movs	r1, #16
 8002684:	4808      	ldr	r0, [pc, #32]	; (80026a8 <TM_ILI9341_DrawImage+0x90>)
 8002686:	f001 fc47 	bl	8003f18 <HAL_GPIO_WritePin>

	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <TM_ILI9341_DrawImage+0x8c>)
 800268c:	2200      	movs	r2, #0
 800268e:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 8002690:	4804      	ldr	r0, [pc, #16]	; (80026a4 <TM_ILI9341_DrawImage+0x8c>)
 8002692:	f002 fbf8 	bl	8004e86 <HAL_SPI_Init>

}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bd90      	pop	{r4, r7, pc}
 800269e:	bf00      	nop
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	20004cdc 	.word	0x20004cdc
 80026a8:	40020000 	.word	0x40020000

080026ac <sensorATaskEntry>:
	#endif
}
//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void sensorATaskEntry(void const * argument)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	uint8_t	Ds18b20TryToFind=5;
 80026b4:	2305      	movs	r3, #5
 80026b6:	73fb      	strb	r3, [r7, #15]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 80026b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026bc:	4969      	ldr	r1, [pc, #420]	; (8002864 <sensorATaskEntry+0x1b8>)
 80026be:	486a      	ldr	r0, [pc, #424]	; (8002868 <sensorATaskEntry+0x1bc>)
 80026c0:	f000 fb60 	bl	8002d84 <OneWire_Init>
		TempSensorCount = 0;
 80026c4:	4b69      	ldr	r3, [pc, #420]	; (800286c <sensorATaskEntry+0x1c0>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 80026ca:	e002      	b.n	80026d2 <sensorATaskEntry+0x26>
			Ds18b20Delay(100);
 80026cc:	2064      	movs	r0, #100	; 0x64
 80026ce:	f004 fdf3 	bl	80072b8 <osDelay>
		while(HAL_GetTick() < 3000)
 80026d2:	f000 fdeb 	bl	80032ac <HAL_GetTick>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80026dc:	4293      	cmp	r3, r2
 80026de:	d9f5      	bls.n	80026cc <sensorATaskEntry+0x20>
		OneWireDevices = OneWire_First(&OneWire);
 80026e0:	4861      	ldr	r0, [pc, #388]	; (8002868 <sensorATaskEntry+0x1bc>)
 80026e2:	f000 fc42 	bl	8002f6a <OneWire_First>
 80026e6:	4603      	mov	r3, r0
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b61      	ldr	r3, [pc, #388]	; (8002870 <sensorATaskEntry+0x1c4>)
 80026ec:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80026ee:	e019      	b.n	8002724 <sensorATaskEntry+0x78>
		{
			Ds18b20Delay(100);
 80026f0:	2064      	movs	r0, #100	; 0x64
 80026f2:	f004 fde1 	bl	80072b8 <osDelay>
			TempSensorCount++;
 80026f6:	4b5d      	ldr	r3, [pc, #372]	; (800286c <sensorATaskEntry+0x1c0>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	3301      	adds	r3, #1
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <sensorATaskEntry+0x1c0>)
 8002700:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8002702:	4b5a      	ldr	r3, [pc, #360]	; (800286c <sensorATaskEntry+0x1c0>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	3b01      	subs	r3, #1
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	4a5a      	ldr	r2, [pc, #360]	; (8002874 <sensorATaskEntry+0x1c8>)
 800270c:	4413      	add	r3, r2
 800270e:	4619      	mov	r1, r3
 8002710:	4855      	ldr	r0, [pc, #340]	; (8002868 <sensorATaskEntry+0x1bc>)
 8002712:	f000 fd3f 	bl	8003194 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8002716:	4854      	ldr	r0, [pc, #336]	; (8002868 <sensorATaskEntry+0x1bc>)
 8002718:	f000 fc37 	bl	8002f8a <OneWire_Next>
 800271c:	4603      	mov	r3, r0
 800271e:	461a      	mov	r2, r3
 8002720:	4b53      	ldr	r3, [pc, #332]	; (8002870 <sensorATaskEntry+0x1c4>)
 8002722:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002724:	4b52      	ldr	r3, [pc, #328]	; (8002870 <sensorATaskEntry+0x1c4>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e1      	bne.n	80026f0 <sensorATaskEntry+0x44>
		}
		if(TempSensorCount>0)
 800272c:	4b4f      	ldr	r3, [pc, #316]	; (800286c <sensorATaskEntry+0x1c0>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d106      	bne.n	8002742 <sensorATaskEntry+0x96>
			break;
		Ds18b20TryToFind--;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	3b01      	subs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
	}while(Ds18b20TryToFind>0);
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1bb      	bne.n	80026b8 <sensorATaskEntry+0xc>
 8002740:	e000      	b.n	8002744 <sensorATaskEntry+0x98>
			break;
 8002742:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <sensorATaskEntry+0xa8>
		vTaskDelete(Ds18b20Handle);
 800274a:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <sensorATaskEntry+0x1cc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f005 fee4 	bl	800851c <vTaskDelete>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	73bb      	strb	r3, [r7, #14]
 8002758:	e019      	b.n	800278e <sensorATaskEntry+0xe2>
	{
		Ds18b20Delay(50);
 800275a:	2032      	movs	r0, #50	; 0x32
 800275c:	f004 fdac 	bl	80072b8 <osDelay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8002760:	7bbb      	ldrb	r3, [r7, #14]
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	4a43      	ldr	r2, [pc, #268]	; (8002874 <sensorATaskEntry+0x1c8>)
 8002766:	4413      	add	r3, r2
 8002768:	220c      	movs	r2, #12
 800276a:	4619      	mov	r1, r3
 800276c:	483e      	ldr	r0, [pc, #248]	; (8002868 <sensorATaskEntry+0x1bc>)
 800276e:	f000 f99d 	bl	8002aac <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8002772:	2032      	movs	r0, #50	; 0x32
 8002774:	f004 fda0 	bl	80072b8 <osDelay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 8002778:	7bbb      	ldrb	r3, [r7, #14]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4a3d      	ldr	r2, [pc, #244]	; (8002874 <sensorATaskEntry+0x1c8>)
 800277e:	4413      	add	r3, r2
 8002780:	4619      	mov	r1, r3
 8002782:	4839      	ldr	r0, [pc, #228]	; (8002868 <sensorATaskEntry+0x1bc>)
 8002784:	f000 fa2b 	bl	8002bde <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002788:	7bbb      	ldrb	r3, [r7, #14]
 800278a:	3301      	adds	r3, #1
 800278c:	73bb      	strb	r3, [r7, #14]
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <sensorATaskEntry+0x1c0>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	7bba      	ldrb	r2, [r7, #14]
 8002794:	429a      	cmp	r2, r3
 8002796:	d3e0      	bcc.n	800275a <sensorATaskEntry+0xae>
  }
	for(;;)
	{
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 8002798:	bf00      	nop
		{
			if(Ds18b20StartConvert==1)
				break;
			Ds18b20Delay(10);
		}
		Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 800279a:	4b38      	ldr	r3, [pc, #224]	; (800287c <sensorATaskEntry+0x1d0>)
 800279c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80027a0:	801a      	strh	r2, [r3, #0]
		DS18B20_StartAll(&OneWire);
 80027a2:	4831      	ldr	r0, [pc, #196]	; (8002868 <sensorATaskEntry+0x1bc>)
 80027a4:	f000 f86e 	bl	8002884 <DS18B20_StartAll>
		osDelay(100);
 80027a8:	2064      	movs	r0, #100	; 0x64
 80027aa:	f004 fd85 	bl	80072b8 <osDelay>
    while (!DS18B20_AllDone(&OneWire))
 80027ae:	e00c      	b.n	80027ca <sensorATaskEntry+0x11e>
		{
			osDelay(10);
 80027b0:	200a      	movs	r0, #10
 80027b2:	f004 fd81 	bl	80072b8 <osDelay>
			Ds18b20Timeout-=1;
 80027b6:	4b31      	ldr	r3, [pc, #196]	; (800287c <sensorATaskEntry+0x1d0>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <sensorATaskEntry+0x1d0>)
 80027c0:	801a      	strh	r2, [r3, #0]
			if(Ds18b20Timeout==0)
 80027c2:	4b2e      	ldr	r3, [pc, #184]	; (800287c <sensorATaskEntry+0x1d0>)
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <sensorATaskEntry+0x12c>
    while (!DS18B20_AllDone(&OneWire))
 80027ca:	4827      	ldr	r0, [pc, #156]	; (8002868 <sensorATaskEntry+0x1bc>)
 80027cc:	f000 fa62 	bl	8002c94 <DS18B20_AllDone>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ec      	beq.n	80027b0 <sensorATaskEntry+0x104>
 80027d6:	e000      	b.n	80027da <sensorATaskEntry+0x12e>
				break;
 80027d8:	bf00      	nop
		}
		if(Ds18b20Timeout>0)
 80027da:	4b28      	ldr	r3, [pc, #160]	; (800287c <sensorATaskEntry+0x1d0>)
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d025      	beq.n	800282e <sensorATaskEntry+0x182>
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	737b      	strb	r3, [r7, #13]
 80027e6:	e01c      	b.n	8002822 <sensorATaskEntry+0x176>
			{
				Ds18b20Delay(1000);
 80027e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ec:	f004 fd64 	bl	80072b8 <osDelay>
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 80027f0:	7b7b      	ldrb	r3, [r7, #13]
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <sensorATaskEntry+0x1c8>)
 80027f6:	1899      	adds	r1, r3, r2
 80027f8:	7b7b      	ldrb	r3, [r7, #13]
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	3308      	adds	r3, #8
 80027fe:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <sensorATaskEntry+0x1c8>)
 8002800:	4413      	add	r3, r2
 8002802:	7b7c      	ldrb	r4, [r7, #13]
 8002804:	461a      	mov	r2, r3
 8002806:	4818      	ldr	r0, [pc, #96]	; (8002868 <sensorATaskEntry+0x1bc>)
 8002808:	f000 f850 	bl	80028ac <DS18B20_Read>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	4a18      	ldr	r2, [pc, #96]	; (8002874 <sensorATaskEntry+0x1c8>)
 8002812:	0123      	lsls	r3, r4, #4
 8002814:	4413      	add	r3, r2
 8002816:	330c      	adds	r3, #12
 8002818:	460a      	mov	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800281c:	7b7b      	ldrb	r3, [r7, #13]
 800281e:	3301      	adds	r3, #1
 8002820:	737b      	strb	r3, [r7, #13]
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <sensorATaskEntry+0x1c0>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	7b7a      	ldrb	r2, [r7, #13]
 8002828:	429a      	cmp	r2, r3
 800282a:	d3dd      	bcc.n	80027e8 <sensorATaskEntry+0x13c>
 800282c:	e011      	b.n	8002852 <sensorATaskEntry+0x1a6>
			}
		}
		else
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 800282e:	2300      	movs	r3, #0
 8002830:	733b      	strb	r3, [r7, #12]
 8002832:	e009      	b.n	8002848 <sensorATaskEntry+0x19c>
				ds18b20[i].DataIsValid = false;
 8002834:	7b3b      	ldrb	r3, [r7, #12]
 8002836:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <sensorATaskEntry+0x1c8>)
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	4413      	add	r3, r2
 800283c:	330c      	adds	r3, #12
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8002842:	7b3b      	ldrb	r3, [r7, #12]
 8002844:	3301      	adds	r3, #1
 8002846:	733b      	strb	r3, [r7, #12]
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <sensorATaskEntry+0x1c0>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	7b3a      	ldrb	r2, [r7, #12]
 800284e:	429a      	cmp	r2, r3
 8002850:	d3f0      	bcc.n	8002834 <sensorATaskEntry+0x188>
		}
		Ds18b20StartConvert=0;
 8002852:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <sensorATaskEntry+0x1d4>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
    osDelay(_DS18B20_UPDATE_INTERVAL_MS);
 8002858:	f241 3088 	movw	r0, #5000	; 0x1388
 800285c:	f004 fd2c 	bl	80072b8 <osDelay>
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 8002860:	e79a      	b.n	8002798 <sensorATaskEntry+0xec>
 8002862:	bf00      	nop
 8002864:	40020c00 	.word	0x40020c00
 8002868:	20004e10 	.word	0x20004e10
 800286c:	200000a9 	.word	0x200000a9
 8002870:	20004df8 	.word	0x20004df8
 8002874:	20004dfc 	.word	0x20004dfc
 8002878:	20004e0c 	.word	0x20004e0c
 800287c:	200000ac 	.word	0x200000ac
 8002880:	200000aa 	.word	0x200000aa

08002884 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 faa7 	bl	8002de0 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002892:	21cc      	movs	r1, #204	; 0xcc
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fb29 	bl	8002eec <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800289a:	2144      	movs	r1, #68	; 0x44
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fb25 	bl	8002eec <OneWire_WriteByte>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b08b      	sub	sp, #44	; 0x2c
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 80028c2:	68b8      	ldr	r0, [r7, #8]
 80028c4:	f000 f97a 	bl	8002bbc <DS18B20_Is>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <DS18B20_Read+0x26>
		return false;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e0e1      	b.n	8002a96 <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fae0 	bl	8002e98 <OneWire_ReadBit>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 80028de:	2300      	movs	r3, #0
 80028e0:	e0d9      	b.n	8002a96 <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa7c 	bl	8002de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fc33 	bl	8003156 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80028f0:	21be      	movs	r1, #190	; 0xbe
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fafa 	bl	8002eec <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 80028f8:	2300      	movs	r3, #0
 80028fa:	77fb      	strb	r3, [r7, #31]
 80028fc:	e00d      	b.n	800291a <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 80028fe:	7ffc      	ldrb	r4, [r7, #31]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 fb11 	bl	8002f28 <OneWire_ReadByte>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800290e:	4423      	add	r3, r4
 8002910:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8002914:	7ffb      	ldrb	r3, [r7, #31]
 8002916:	3301      	adds	r3, #1
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	7ffb      	ldrb	r3, [r7, #31]
 800291c:	2b08      	cmp	r3, #8
 800291e:	d9ee      	bls.n	80028fe <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2108      	movs	r1, #8
 8002926:	4618      	mov	r0, r3
 8002928:	f000 fc51 	bl	80031ce <OneWire_CRC8>
 800292c:	4603      	mov	r3, r0
 800292e:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8002930:	7f3b      	ldrb	r3, [r7, #28]
 8002932:	7fba      	ldrb	r2, [r7, #30]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 8002938:	2300      	movs	r3, #0
 800293a:	e0ac      	b.n	8002a96 <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 800293c:	7d3b      	ldrb	r3, [r7, #20]
 800293e:	b21a      	sxth	r2, r3
 8002940:	7d7b      	ldrb	r3, [r7, #21]
 8002942:	021b      	lsls	r3, r3, #8
 8002944:	b21b      	sxth	r3, r3
 8002946:	4313      	orrs	r3, r2
 8002948:	b21b      	sxth	r3, r3
 800294a:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fa47 	bl	8002de0 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002952:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002956:	2b00      	cmp	r3, #0
 8002958:	da05      	bge.n	8002966 <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 800295a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800295c:	425b      	negs	r3, r3
 800295e:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 8002966:	7e3b      	ldrb	r3, [r7, #24]
 8002968:	115b      	asrs	r3, r3, #5
 800296a:	b2db      	uxtb	r3, r3
 800296c:	f003 0303 	and.w	r3, r3, #3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	3309      	adds	r3, #9
 8002974:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 8002976:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	b29b      	uxth	r3, r3
 800297c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002980:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	b29b      	uxth	r3, r3
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	b25b      	sxtb	r3, r3
 800298a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800298e:	b25a      	sxtb	r2, r3
 8002990:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002994:	4313      	orrs	r3, r2
 8002996:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 800299a:	7f7b      	ldrb	r3, [r7, #29]
 800299c:	3b09      	subs	r3, #9
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d858      	bhi.n	8002a54 <DS18B20_Read+0x1a8>
 80029a2:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <DS18B20_Read+0xfc>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029e1 	.word	0x080029e1
 80029b0:	08002a09 	.word	0x08002a09
 80029b4:	08002a31 	.word	0x08002a31
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 80029b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029ba:	08db      	lsrs	r3, r3, #3
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	ee07 3a90 	vmov	s15, r3
 80029c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ca:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 80029ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80029d2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029da:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 80029de:	e03e      	b.n	8002a5e <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 80029e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029e2:	089b      	lsrs	r3, r3, #2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	ee07 3a90 	vmov	s15, r3
 80029ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f2:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 80029f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80029fa:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 80029fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a02:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002a06:	e02a      	b.n	8002a5e <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 8002a08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a1a:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002a1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a22:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2a:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002a2e:	e016      	b.n	8002a5e <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002a30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	ee07 3a90 	vmov	s15, r3
 8002a3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a3e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002a42:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a46:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002aa0 <DS18B20_Read+0x1f4>
 8002a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a4e:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002a52:	e004      	b.n	8002a5e <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002a54:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <DS18B20_Read+0x1f8>)
 8002a56:	623b      	str	r3, [r7, #32]
			digit = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002a5e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a72:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 8002a76:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002a7e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002aa8 <DS18B20_Read+0x1fc>
 8002a82:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a8a:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	372c      	adds	r7, #44	; 0x2c
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	3d800000 	.word	0x3d800000
 8002aa4:	437f0000 	.word	0x437f0000
 8002aa8:	00000000 	.word	0x00000000

08002aac <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 8002aba:	68b8      	ldr	r0, [r7, #8]
 8002abc:	f000 f87e 	bl	8002bbc <DS18B20_Is>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <DS18B20_SetResolution+0x1e>
		return 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e074      	b.n	8002bb4 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f988 	bl	8002de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fb3f 	bl	8003156 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002ad8:	21be      	movs	r1, #190	; 0xbe
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa06 	bl	8002eec <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 fa21 	bl	8002f28 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa1e 	bl	8002f28 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fa1b 	bl	8002f28 <OneWire_ReadByte>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fa16 	bl	8002f28 <OneWire_ReadByte>
 8002afc:	4603      	mov	r3, r0
 8002afe:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f000 fa11 	bl	8002f28 <OneWire_ReadByte>
 8002b06:	4603      	mov	r3, r0
 8002b08:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	2b09      	cmp	r3, #9
 8002b0e:	d108      	bne.n	8002b22 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b16:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002b18:	7dfb      	ldrb	r3, [r7, #23]
 8002b1a:	f023 0320 	bic.w	r3, r3, #32
 8002b1e:	75fb      	strb	r3, [r7, #23]
 8002b20:	e022      	b.n	8002b68 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	2b0a      	cmp	r3, #10
 8002b26:	d108      	bne.n	8002b3a <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002b28:	7dfb      	ldrb	r3, [r7, #23]
 8002b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b2e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002b30:	7dfb      	ldrb	r3, [r7, #23]
 8002b32:	f043 0320 	orr.w	r3, r3, #32
 8002b36:	75fb      	strb	r3, [r7, #23]
 8002b38:	e016      	b.n	8002b68 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	2b0b      	cmp	r3, #11
 8002b3e:	d108      	bne.n	8002b52 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002b40:	7dfb      	ldrb	r3, [r7, #23]
 8002b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b46:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	f023 0320 	bic.w	r3, r3, #32
 8002b4e:	75fb      	strb	r3, [r7, #23]
 8002b50:	e00a      	b.n	8002b68 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b0c      	cmp	r3, #12
 8002b56:	d107      	bne.n	8002b68 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b5e:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	f043 0320 	orr.w	r3, r3, #32
 8002b66:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f939 	bl	8002de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002b6e:	68b9      	ldr	r1, [r7, #8]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 faf0 	bl	8003156 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002b76:	214e      	movs	r1, #78	; 0x4e
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f9b7 	bl	8002eec <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002b7e:	7dbb      	ldrb	r3, [r7, #22]
 8002b80:	4619      	mov	r1, r3
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f9b2 	bl	8002eec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002b88:	7d7b      	ldrb	r3, [r7, #21]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 f9ad 	bl	8002eec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002b92:	7dfb      	ldrb	r3, [r7, #23]
 8002b94:	4619      	mov	r1, r3
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f9a8 	bl	8002eec <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f91f 	bl	8002de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fad6 	bl	8003156 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002baa:	2148      	movs	r1, #72	; 0x48
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f99d 	bl	8002eec <OneWire_WriteByte>

	return 1;
 8002bb2:	2301      	movs	r3, #1
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b28      	cmp	r3, #40	; 0x28
 8002bca:	d101      	bne.n	8002bd0 <DS18B20_Is+0x14>
		return 1;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e000      	b.n	8002bd2 <DS18B20_Is+0x16>

	return 0;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr

08002bde <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002be8:	6838      	ldr	r0, [r7, #0]
 8002bea:	f7ff ffe7 	bl	8002bbc <DS18B20_Is>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e049      	b.n	8002c8c <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f8f1 	bl	8002de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002bfe:	6839      	ldr	r1, [r7, #0]
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 faa8 	bl	8003156 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002c06:	21be      	movs	r1, #190	; 0xbe
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f96f 	bl	8002eec <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f98a 	bl	8002f28 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f987 	bl	8002f28 <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f984 	bl	8002f28 <OneWire_ReadByte>
 8002c20:	4603      	mov	r3, r0
 8002c22:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f97f 	bl	8002f28 <OneWire_ReadByte>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f97a 	bl	8002f28 <OneWire_ReadByte>
 8002c34:	4603      	mov	r3, r0
 8002c36:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002c38:	237d      	movs	r3, #125	; 0x7d
 8002c3a:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002c3c:	23c9      	movs	r3, #201	; 0xc9
 8002c3e:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8cd 	bl	8002de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c46:	6839      	ldr	r1, [r7, #0]
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fa84 	bl	8003156 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002c4e:	214e      	movs	r1, #78	; 0x4e
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f94b 	bl	8002eec <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	4619      	mov	r1, r3
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f946 	bl	8002eec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f941 	bl	8002eec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002c6a:	7b7b      	ldrb	r3, [r7, #13]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f93c 	bl	8002eec <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f8b3 	bl	8002de0 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fa6a 	bl	8003156 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002c82:	2148      	movs	r1, #72	; 0x48
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f931 	bl	8002eec <OneWire_WriteByte>

	return 1;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f8fb 	bl	8002e98 <OneWire_ReadBit>
 8002ca2:	4603      	mov	r3, r0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <ONEWIRE_DELAY>:
#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef htim5;

void ONEWIRE_DELAY(uint16_t time_us)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	80fb      	strh	r3, [r7, #6]
	htim5.Instance->CNT = 0;
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <ONEWIRE_DELAY+0x30>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim5.Instance->CNT <= time_us);
 8002cbe:	bf00      	nop
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <ONEWIRE_DELAY+0x30>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc6:	88fb      	ldrh	r3, [r7, #6]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d9f9      	bls.n	8002cc0 <ONEWIRE_DELAY+0x14>
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20004b80 	.word	0x20004b80

08002ce0 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	889b      	ldrh	r3, [r3, #4]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	619a      	str	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	889a      	ldrh	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	619a      	str	r2, [r3, #24]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b088      	sub	sp, #32
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	889b      	ldrh	r3, [r3, #4]
 8002d36:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f107 020c 	add.w	r2, r7, #12
 8002d40:	4611      	mov	r1, r2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 ff34 	bl	8003bb0 <HAL_GPIO_Init>
}
 8002d48:	bf00      	nop
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8002d58:	2311      	movs	r3, #17
 8002d5a:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	889b      	ldrh	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f107 020c 	add.w	r2, r7, #12
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 ff1b 	bl	8003bb0 <HAL_GPIO_Init>

}
 8002d7a:	bf00      	nop
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&htim5);
 8002d92:	4812      	ldr	r0, [pc, #72]	; (8002ddc <OneWire_Init+0x58>)
 8002d94:	f002 fe4e 	bl	8005a34 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	88fa      	ldrh	r2, [r7, #6]
 8002da2:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f7ff ffd3 	bl	8002d50 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f7ff ffa8 	bl	8002d00 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8002db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002db4:	f000 fa86 	bl	80032c4 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff ff91 	bl	8002ce0 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8002dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dc2:	f000 fa7f 	bl	80032c4 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f7ff ff9a 	bl	8002d00 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8002dcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002dd0:	f000 fa78 	bl	80032c4 <HAL_Delay>
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20004b80 	.word	0x20004b80

08002de0 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff79 	bl	8002ce0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ffae 	bl	8002d50 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8002df4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002df8:	f7ff ff58 	bl	8002cac <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8002dfc:	2014      	movs	r0, #20
 8002dfe:	f7ff ff55 	bl	8002cac <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ff8b 	bl	8002d1e <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8002e08:	2046      	movs	r0, #70	; 0x46
 8002e0a:	f7ff ff4f 	bl	8002cac <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	889b      	ldrh	r3, [r3, #4]
 8002e16:	4619      	mov	r1, r3
 8002e18:	4610      	mov	r0, r2
 8002e1a:	f001 f865 	bl	8003ee8 <HAL_GPIO_ReadPin>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8002e22:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002e26:	f7ff ff41 	bl	8002cac <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d012      	beq.n	8002e6c <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ff4a 	bl	8002ce0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff ff7f 	bl	8002d50 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8002e52:	200a      	movs	r0, #10
 8002e54:	f7ff ff2a 	bl	8002cac <ONEWIRE_DELAY>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff60 	bl	8002d1e <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8002e5e:	2037      	movs	r0, #55	; 0x37
 8002e60:	f7ff ff24 	bl	8002cac <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff5a 	bl	8002d1e <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8002e6a:	e011      	b.n	8002e90 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff37 	bl	8002ce0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ff6c 	bl	8002d50 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8002e78:	2041      	movs	r0, #65	; 0x41
 8002e7a:	f7ff ff17 	bl	8002cac <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ff4d 	bl	8002d1e <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8002e84:	2005      	movs	r0, #5
 8002e86:	f7ff ff11 	bl	8002cac <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ff47 	bl	8002d1e <ONEWIRE_INPUT>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff1b 	bl	8002ce0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ff50 	bl	8002d50 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f7ff fefb 	bl	8002cac <ONEWIRE_DELAY>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff31 	bl	8002d1e <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8002ebc:	200a      	movs	r0, #10
 8002ebe:	f7ff fef5 	bl	8002cac <ONEWIRE_DELAY>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	889b      	ldrh	r3, [r3, #4]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4610      	mov	r0, r2
 8002ece:	f001 f80b 	bl	8003ee8 <HAL_GPIO_ReadPin>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8002edc:	2032      	movs	r0, #50	; 0x32
 8002ede:	f7ff fee5 	bl	8002cac <ONEWIRE_DELAY>

	/* Return bit value */
	return bit;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002ef8:	2308      	movs	r3, #8
 8002efa:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8002efc:	e00a      	b.n	8002f14 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff93 	bl	8002e34 <OneWire_WriteBit>
		byte >>= 1;
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	085b      	lsrs	r3, r3, #1
 8002f12:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	73fa      	strb	r2, [r7, #15]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ef      	bne.n	8002efe <OneWire_WriteByte+0x12>
	}
}
 8002f1e:	bf00      	nop
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8002f30:	2308      	movs	r3, #8
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	2300      	movs	r3, #0
 8002f36:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8002f38:	e00d      	b.n	8002f56 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8002f3a:	7bbb      	ldrb	r3, [r7, #14]
 8002f3c:	085b      	lsrs	r3, r3, #1
 8002f3e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ffa9 	bl	8002e98 <OneWire_ReadBit>
 8002f46:	4603      	mov	r3, r0
 8002f48:	01db      	lsls	r3, r3, #7
 8002f4a:	b25a      	sxtb	r2, r3
 8002f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	b25b      	sxtb	r3, r3
 8002f54:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	1e5a      	subs	r2, r3, #1
 8002f5a:	73fa      	strb	r2, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1ec      	bne.n	8002f3a <OneWire_ReadByte+0x12>
	}

	return byte;
 8002f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f816 	bl	8002fa4 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002f78:	21f0      	movs	r1, #240	; 0xf0
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f825 	bl	8002fca <OneWire_Search>
 8002f80:	4603      	mov	r3, r0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002f92:	21f0      	movs	r1, #240	; 0xf0
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f818 	bl	8002fca <OneWire_Search>
 8002f9a:	4603      	mov	r3, r0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	71da      	strb	r2, [r3, #7]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7a1b      	ldrb	r3, [r3, #8]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 809a 	bne.w	8003128 <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fef3 	bl	8002de0 <OneWire_Reset>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	71da      	strb	r2, [r3, #7]
			return 0;
 8003012:	2300      	movs	r3, #0
 8003014:	e09b      	b.n	800314e <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff66 	bl	8002eec <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff ff39 	bl	8002e98 <OneWire_ReadBit>
 8003026:	4603      	mov	r3, r0
 8003028:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff ff34 	bl	8002e98 <OneWire_ReadBit>
 8003030:	4603      	mov	r3, r0
 8003032:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8003034:	7a7b      	ldrb	r3, [r7, #9]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d102      	bne.n	8003040 <OneWire_Search+0x76>
 800303a:	7a3b      	ldrb	r3, [r7, #8]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d064      	beq.n	800310a <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8003040:	7a7a      	ldrb	r2, [r7, #9]
 8003042:	7a3b      	ldrb	r3, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	d002      	beq.n	800304e <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8003048:	7a7b      	ldrb	r3, [r7, #9]
 800304a:	72bb      	strb	r3, [r7, #10]
 800304c:	e026      	b.n	800309c <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	799b      	ldrb	r3, [r3, #6]
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	429a      	cmp	r2, r3
 8003056:	d20d      	bcs.n	8003074 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8003058:	7b7b      	ldrb	r3, [r7, #13]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	7a5a      	ldrb	r2, [r3, #9]
 8003060:	7afb      	ldrb	r3, [r7, #11]
 8003062:	4013      	ands	r3, r2
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	bf14      	ite	ne
 800306a:	2301      	movne	r3, #1
 800306c:	2300      	moveq	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	72bb      	strb	r3, [r7, #10]
 8003072:	e008      	b.n	8003086 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	799b      	ldrb	r3, [r3, #6]
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	429a      	cmp	r2, r3
 800307c:	bf0c      	ite	eq
 800307e:	2301      	moveq	r3, #1
 8003080:	2300      	movne	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8003086:	7abb      	ldrb	r3, [r7, #10]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8003090:	7bbb      	ldrb	r3, [r7, #14]
 8003092:	2b08      	cmp	r3, #8
 8003094:	d802      	bhi.n	800309c <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7bba      	ldrb	r2, [r7, #14]
 800309a:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 800309c:	7abb      	ldrb	r3, [r7, #10]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10c      	bne.n	80030bc <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 80030a2:	7b7b      	ldrb	r3, [r7, #13]
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	7a59      	ldrb	r1, [r3, #9]
 80030aa:	7b7b      	ldrb	r3, [r7, #13]
 80030ac:	7afa      	ldrb	r2, [r7, #11]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	b2d1      	uxtb	r1, r2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	460a      	mov	r2, r1
 80030b8:	725a      	strb	r2, [r3, #9]
 80030ba:	e010      	b.n	80030de <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80030bc:	7b7b      	ldrb	r3, [r7, #13]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	7a5b      	ldrb	r3, [r3, #9]
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80030ca:	43db      	mvns	r3, r3
 80030cc:	b25b      	sxtb	r3, r3
 80030ce:	4013      	ands	r3, r2
 80030d0:	b25a      	sxtb	r2, r3
 80030d2:	7b7b      	ldrb	r3, [r7, #13]
 80030d4:	b2d1      	uxtb	r1, r2
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	460a      	mov	r2, r1
 80030dc:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 80030de:	7abb      	ldrb	r3, [r7, #10]
 80030e0:	4619      	mov	r1, r3
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7ff fea6 	bl	8002e34 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
 80030ea:	3301      	adds	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 80030ee:	7afb      	ldrb	r3, [r7, #11]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 80030f4:	7afb      	ldrb	r3, [r7, #11]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d104      	bne.n	8003104 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 80030fa:	7b7b      	ldrb	r3, [r7, #13]
 80030fc:	3301      	adds	r3, #1
 80030fe:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8003100:	2301      	movs	r3, #1
 8003102:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8003104:	7b7b      	ldrb	r3, [r7, #13]
 8003106:	2b07      	cmp	r3, #7
 8003108:	d98a      	bls.n	8003020 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d90b      	bls.n	8003128 <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7bba      	ldrb	r2, [r7, #14]
 8003114:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	799b      	ldrb	r3, [r3, #6]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8003124:	2301      	movs	r3, #1
 8003126:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8003128:	7b3b      	ldrb	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <OneWire_Search+0x16c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	7a5b      	ldrb	r3, [r3, #9]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8003148:	2300      	movs	r3, #0
 800314a:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 800314c:	7b3b      	ldrb	r3, [r7, #12]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003160:	2155      	movs	r1, #85	; 0x55
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff fec2 	bl	8002eec <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]
 800316c:	e00a      	b.n	8003184 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4413      	add	r3, r2
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff feb7 	bl	8002eec <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 800317e:	7bfb      	ldrb	r3, [r7, #15]
 8003180:	3301      	adds	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b07      	cmp	r3, #7
 8003188:	d9f1      	bls.n	800316e <OneWire_SelectWithPointer+0x18>
	}
}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800319e:	2300      	movs	r3, #0
 80031a0:	73fb      	strb	r3, [r7, #15]
 80031a2:	e00a      	b.n	80031ba <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80031a4:	7bfa      	ldrb	r2, [r7, #15]
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	6839      	ldr	r1, [r7, #0]
 80031aa:	440b      	add	r3, r1
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	440a      	add	r2, r1
 80031b0:	7a52      	ldrb	r2, [r2, #9]
 80031b2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	3301      	adds	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	2b07      	cmp	r3, #7
 80031be:	d9f1      	bls.n	80031a4 <OneWire_GetFullROM+0x10>
	}
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr

080031ce <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80031ce:	b480      	push	{r7}
 80031d0:	b085      	sub	sp, #20
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80031da:	2300      	movs	r3, #0
 80031dc:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 80031de:	e022      	b.n	8003226 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80031ea:	2308      	movs	r3, #8
 80031ec:	737b      	strb	r3, [r7, #13]
 80031ee:	e017      	b.n	8003220 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80031f0:	7bfa      	ldrb	r2, [r7, #15]
 80031f2:	7bbb      	ldrb	r3, [r7, #14]
 80031f4:	4053      	eors	r3, r2
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	085b      	lsrs	r3, r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8003204:	7b3b      	ldrb	r3, [r7, #12]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003210:	43db      	mvns	r3, r3
 8003212:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8003214:	7bbb      	ldrb	r3, [r7, #14]
 8003216:	085b      	lsrs	r3, r3, #1
 8003218:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800321a:	7b7b      	ldrb	r3, [r7, #13]
 800321c:	3b01      	subs	r3, #1
 800321e:	737b      	strb	r3, [r7, #13]
 8003220:	7b7b      	ldrb	r3, [r7, #13]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1e4      	bne.n	80031f0 <OneWire_CRC8+0x22>
	while (len--) {
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	70fa      	strb	r2, [r7, #3]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1d7      	bne.n	80031e0 <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003244:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <HAL_Init+0x40>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <HAL_Init+0x40>)
 800324a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800324e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003250:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_Init+0x40>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0a      	ldr	r2, [pc, #40]	; (8003280 <HAL_Init+0x40>)
 8003256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800325a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <HAL_Init+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a07      	ldr	r2, [pc, #28]	; (8003280 <HAL_Init+0x40>)
 8003262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003266:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003268:	2003      	movs	r0, #3
 800326a:	f000 f8fc 	bl	8003466 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800326e:	2000      	movs	r0, #0
 8003270:	f7fe fb0e 	bl	8001890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003274:	f7fe f856 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40023c00 	.word	0x40023c00

08003284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <HAL_IncTick+0x20>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <HAL_IncTick+0x24>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4413      	add	r3, r2
 8003294:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <HAL_IncTick+0x24>)
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000018 	.word	0x20000018
 80032a8:	20004e24 	.word	0x20004e24

080032ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return uwTick;
 80032b0:	4b03      	ldr	r3, [pc, #12]	; (80032c0 <HAL_GetTick+0x14>)
 80032b2:	681b      	ldr	r3, [r3, #0]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20004e24 	.word	0x20004e24

080032c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff ffee 	bl	80032ac <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032dc:	d005      	beq.n	80032ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032de:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <HAL_Delay+0x44>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ea:	bf00      	nop
 80032ec:	f7ff ffde 	bl	80032ac <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d8f7      	bhi.n	80032ec <HAL_Delay+0x28>
  {
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000018 	.word	0x20000018

0800330c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003328:	4013      	ands	r3, r2
 800332a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333e:	4a04      	ldr	r2, [pc, #16]	; (8003350 <__NVIC_SetPriorityGrouping+0x44>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	60d3      	str	r3, [r2, #12]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003358:	4b04      	ldr	r3, [pc, #16]	; (800336c <__NVIC_GetPriorityGrouping+0x18>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	0a1b      	lsrs	r3, r3, #8
 800335e:	f003 0307 	and.w	r3, r3, #7
}
 8003362:	4618      	mov	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	2b00      	cmp	r3, #0
 8003380:	db0b      	blt.n	800339a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	4907      	ldr	r1, [pc, #28]	; (80033a8 <__NVIC_EnableIRQ+0x38>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2001      	movs	r0, #1
 8003392:	fa00 f202 	lsl.w	r2, r0, r2
 8003396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
 80033a6:	bf00      	nop
 80033a8:	e000e100 	.word	0xe000e100

080033ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	6039      	str	r1, [r7, #0]
 80033b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	db0a      	blt.n	80033d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	490c      	ldr	r1, [pc, #48]	; (80033f8 <__NVIC_SetPriority+0x4c>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	0112      	lsls	r2, r2, #4
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	440b      	add	r3, r1
 80033d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033d4:	e00a      	b.n	80033ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	4908      	ldr	r1, [pc, #32]	; (80033fc <__NVIC_SetPriority+0x50>)
 80033dc:	79fb      	ldrb	r3, [r7, #7]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	3b04      	subs	r3, #4
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	440b      	add	r3, r1
 80033ea:	761a      	strb	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000e100 	.word	0xe000e100
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f1c3 0307 	rsb	r3, r3, #7
 800341a:	2b04      	cmp	r3, #4
 800341c:	bf28      	it	cs
 800341e:	2304      	movcs	r3, #4
 8003420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3304      	adds	r3, #4
 8003426:	2b06      	cmp	r3, #6
 8003428:	d902      	bls.n	8003430 <NVIC_EncodePriority+0x30>
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3b03      	subs	r3, #3
 800342e:	e000      	b.n	8003432 <NVIC_EncodePriority+0x32>
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	401a      	ands	r2, r3
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	43d9      	mvns	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003458:	4313      	orrs	r3, r2
         );
}
 800345a:	4618      	mov	r0, r3
 800345c:	3724      	adds	r7, #36	; 0x24
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff4c 	bl	800330c <__NVIC_SetPriorityGrouping>
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800348e:	f7ff ff61 	bl	8003354 <__NVIC_GetPriorityGrouping>
 8003492:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	68b9      	ldr	r1, [r7, #8]
 8003498:	6978      	ldr	r0, [r7, #20]
 800349a:	f7ff ffb1 	bl	8003400 <NVIC_EncodePriority>
 800349e:	4602      	mov	r2, r0
 80034a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a4:	4611      	mov	r1, r2
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff80 	bl	80033ac <__NVIC_SetPriority>
}
 80034ac:	bf00      	nop
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ff54 	bl	8003370 <__NVIC_EnableIRQ>
}
 80034c8:	bf00      	nop
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034dc:	f7ff fee6 	bl	80032ac <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e099      	b.n	8003620 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0201 	bic.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800350c:	e00f      	b.n	800352e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800350e:	f7ff fecd 	bl	80032ac <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b05      	cmp	r3, #5
 800351a:	d908      	bls.n	800352e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2203      	movs	r2, #3
 8003526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e078      	b.n	8003620 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e8      	bne.n	800350e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4b38      	ldr	r3, [pc, #224]	; (8003628 <HAL_DMA_Init+0x158>)
 8003548:	4013      	ands	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800355a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003566:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003572:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	2b04      	cmp	r3, #4
 8003586:	d107      	bne.n	8003598 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	4313      	orrs	r3, r2
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f023 0307 	bic.w	r3, r3, #7
 80035ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d117      	bne.n	80035f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00e      	beq.n	80035f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fa6f 	bl	8003ab8 <DMA_CheckFifoParam>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035ee:	2301      	movs	r3, #1
 80035f0:	e016      	b.n	8003620 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fa26 	bl	8003a4c <DMA_CalcBaseAndBitshift>
 8003600:	4603      	mov	r3, r0
 8003602:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003608:	223f      	movs	r2, #63	; 0x3f
 800360a:	409a      	lsls	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	f010803f 	.word	0xf010803f

0800362c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_DMA_Start_IT+0x26>
 800364e:	2302      	movs	r3, #2
 8003650:	e040      	b.n	80036d4 <HAL_DMA_Start_IT+0xa8>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b01      	cmp	r3, #1
 8003664:	d12f      	bne.n	80036c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f9b8 	bl	80039f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	223f      	movs	r2, #63	; 0x3f
 8003686:	409a      	lsls	r2, r3
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0216 	orr.w	r2, r2, #22
 800369a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0208 	orr.w	r2, r2, #8
 80036b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	e005      	b.n	80036d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80036ce:	2302      	movs	r3, #2
 80036d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3718      	adds	r7, #24
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80036e8:	4b92      	ldr	r3, [pc, #584]	; (8003934 <HAL_DMA_IRQHandler+0x258>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a92      	ldr	r2, [pc, #584]	; (8003938 <HAL_DMA_IRQHandler+0x25c>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	0a9b      	lsrs	r3, r3, #10
 80036f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	2208      	movs	r2, #8
 8003708:	409a      	lsls	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d01a      	beq.n	8003748 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0204 	bic.w	r2, r2, #4
 800372e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	2208      	movs	r2, #8
 8003736:	409a      	lsls	r2, r3
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800374c:	2201      	movs	r2, #1
 800374e:	409a      	lsls	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d012      	beq.n	800377e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	2201      	movs	r2, #1
 800376c:	409a      	lsls	r2, r3
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	f043 0202 	orr.w	r2, r3, #2
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	2204      	movs	r2, #4
 8003784:	409a      	lsls	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d012      	beq.n	80037b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a0:	2204      	movs	r2, #4
 80037a2:	409a      	lsls	r2, r3
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ac:	f043 0204 	orr.w	r2, r3, #4
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b8:	2210      	movs	r2, #16
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d043      	beq.n	800384c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d03c      	beq.n	800384c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d6:	2210      	movs	r2, #16
 80037d8:	409a      	lsls	r2, r3
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d018      	beq.n	800381e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d108      	bne.n	800380c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d024      	beq.n	800384c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
 800380a:	e01f      	b.n	800384c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01b      	beq.n	800384c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
 800381c:	e016      	b.n	800384c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d107      	bne.n	800383c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0208 	bic.w	r2, r2, #8
 800383a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	2220      	movs	r2, #32
 8003852:	409a      	lsls	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 808e 	beq.w	800397a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 8086 	beq.w	800397a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	2220      	movs	r2, #32
 8003874:	409a      	lsls	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b05      	cmp	r3, #5
 8003884:	d136      	bne.n	80038f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0216 	bic.w	r2, r2, #22
 8003894:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <HAL_DMA_IRQHandler+0x1da>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d007      	beq.n	80038c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0208 	bic.w	r2, r2, #8
 80038c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	223f      	movs	r2, #63	; 0x3f
 80038cc:	409a      	lsls	r2, r3
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d07d      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
        }
        return;
 80038f2:	e078      	b.n	80039e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d01c      	beq.n	800393c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	2b00      	cmp	r3, #0
 8003916:	d030      	beq.n	800397a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
 8003920:	e02b      	b.n	800397a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	2b00      	cmp	r3, #0
 8003928:	d027      	beq.n	800397a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	4798      	blx	r3
 8003932:	e022      	b.n	800397a <HAL_DMA_IRQHandler+0x29e>
 8003934:	20000000 	.word	0x20000000
 8003938:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0210 	bic.w	r2, r2, #16
 8003958:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	2b00      	cmp	r3, #0
 8003980:	d032      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b00      	cmp	r3, #0
 800398c:	d022      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2205      	movs	r2, #5
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	3301      	adds	r3, #1
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d307      	bcc.n	80039c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1f2      	bne.n	80039a6 <HAL_DMA_IRQHandler+0x2ca>
 80039c0:	e000      	b.n	80039c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039c2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e000      	b.n	80039e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80039e6:	bf00      	nop
    }
  }
}
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop

080039f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d108      	bne.n	8003a30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a2e:	e007      	b.n	8003a40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	60da      	str	r2, [r3, #12]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	3b10      	subs	r3, #16
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <DMA_CalcBaseAndBitshift+0x64>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a66:	4a13      	ldr	r2, [pc, #76]	; (8003ab4 <DMA_CalcBaseAndBitshift+0x68>)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d909      	bls.n	8003a8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a82:	f023 0303 	bic.w	r3, r3, #3
 8003a86:	1d1a      	adds	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003a8c:	e007      	b.n	8003a9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003a96:	f023 0303 	bic.w	r3, r3, #3
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	aaaaaaab 	.word	0xaaaaaaab
 8003ab4:	0800b9ac 	.word	0x0800b9ac

08003ab8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11f      	bne.n	8003b12 <DMA_CheckFifoParam+0x5a>
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b03      	cmp	r3, #3
 8003ad6:	d856      	bhi.n	8003b86 <DMA_CheckFifoParam+0xce>
 8003ad8:	a201      	add	r2, pc, #4	; (adr r2, 8003ae0 <DMA_CheckFifoParam+0x28>)
 8003ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ade:	bf00      	nop
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003b03 	.word	0x08003b03
 8003ae8:	08003af1 	.word	0x08003af1
 8003aec:	08003b87 	.word	0x08003b87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d046      	beq.n	8003b8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b00:	e043      	b.n	8003b8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b0a:	d140      	bne.n	8003b8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e03d      	b.n	8003b8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1a:	d121      	bne.n	8003b60 <DMA_CheckFifoParam+0xa8>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	d837      	bhi.n	8003b92 <DMA_CheckFifoParam+0xda>
 8003b22:	a201      	add	r2, pc, #4	; (adr r2, 8003b28 <DMA_CheckFifoParam+0x70>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b39 	.word	0x08003b39
 8003b2c:	08003b3f 	.word	0x08003b3f
 8003b30:	08003b39 	.word	0x08003b39
 8003b34:	08003b51 	.word	0x08003b51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b3c:	e030      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d025      	beq.n	8003b96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b4e:	e022      	b.n	8003b96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b58:	d11f      	bne.n	8003b9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b5e:	e01c      	b.n	8003b9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d903      	bls.n	8003b6e <DMA_CheckFifoParam+0xb6>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d003      	beq.n	8003b74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b6c:	e018      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
      break;
 8003b72:	e015      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00e      	beq.n	8003b9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      break;
 8003b84:	e00b      	b.n	8003b9e <DMA_CheckFifoParam+0xe6>
      break;
 8003b86:	bf00      	nop
 8003b88:	e00a      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e008      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8e:	bf00      	nop
 8003b90:	e006      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b92:	bf00      	nop
 8003b94:	e004      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b96:	bf00      	nop
 8003b98:	e002      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b9a:	bf00      	nop
 8003b9c:	e000      	b.n	8003ba0 <DMA_CheckFifoParam+0xe8>
      break;
 8003b9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop

08003bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	; 0x24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	e16b      	b.n	8003ea4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bcc:	2201      	movs	r2, #1
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	f040 815a 	bne.w	8003e9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d005      	beq.n	8003c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d130      	bne.n	8003c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c38:	2201      	movs	r2, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 0201 	and.w	r2, r3, #1
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d017      	beq.n	8003ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d123      	bne.n	8003cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	08da      	lsrs	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	220f      	movs	r2, #15
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	08da      	lsrs	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3208      	adds	r2, #8
 8003cee:	69b9      	ldr	r1, [r7, #24]
 8003cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	2203      	movs	r2, #3
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0203 	and.w	r2, r3, #3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80b4 	beq.w	8003e9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	4b60      	ldr	r3, [pc, #384]	; (8003ebc <HAL_GPIO_Init+0x30c>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3e:	4a5f      	ldr	r2, [pc, #380]	; (8003ebc <HAL_GPIO_Init+0x30c>)
 8003d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d44:	6453      	str	r3, [r2, #68]	; 0x44
 8003d46:	4b5d      	ldr	r3, [pc, #372]	; (8003ebc <HAL_GPIO_Init+0x30c>)
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d52:	4a5b      	ldr	r2, [pc, #364]	; (8003ec0 <HAL_GPIO_Init+0x310>)
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	3302      	adds	r3, #2
 8003d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	220f      	movs	r2, #15
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a52      	ldr	r2, [pc, #328]	; (8003ec4 <HAL_GPIO_Init+0x314>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d02b      	beq.n	8003dd6 <HAL_GPIO_Init+0x226>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a51      	ldr	r2, [pc, #324]	; (8003ec8 <HAL_GPIO_Init+0x318>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d025      	beq.n	8003dd2 <HAL_GPIO_Init+0x222>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a50      	ldr	r2, [pc, #320]	; (8003ecc <HAL_GPIO_Init+0x31c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d01f      	beq.n	8003dce <HAL_GPIO_Init+0x21e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a4f      	ldr	r2, [pc, #316]	; (8003ed0 <HAL_GPIO_Init+0x320>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d019      	beq.n	8003dca <HAL_GPIO_Init+0x21a>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a4e      	ldr	r2, [pc, #312]	; (8003ed4 <HAL_GPIO_Init+0x324>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_GPIO_Init+0x216>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a4d      	ldr	r2, [pc, #308]	; (8003ed8 <HAL_GPIO_Init+0x328>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00d      	beq.n	8003dc2 <HAL_GPIO_Init+0x212>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a4c      	ldr	r2, [pc, #304]	; (8003edc <HAL_GPIO_Init+0x32c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <HAL_GPIO_Init+0x20e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a4b      	ldr	r2, [pc, #300]	; (8003ee0 <HAL_GPIO_Init+0x330>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_GPIO_Init+0x20a>
 8003db6:	2307      	movs	r3, #7
 8003db8:	e00e      	b.n	8003dd8 <HAL_GPIO_Init+0x228>
 8003dba:	2308      	movs	r3, #8
 8003dbc:	e00c      	b.n	8003dd8 <HAL_GPIO_Init+0x228>
 8003dbe:	2306      	movs	r3, #6
 8003dc0:	e00a      	b.n	8003dd8 <HAL_GPIO_Init+0x228>
 8003dc2:	2305      	movs	r3, #5
 8003dc4:	e008      	b.n	8003dd8 <HAL_GPIO_Init+0x228>
 8003dc6:	2304      	movs	r3, #4
 8003dc8:	e006      	b.n	8003dd8 <HAL_GPIO_Init+0x228>
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e004      	b.n	8003dd8 <HAL_GPIO_Init+0x228>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e002      	b.n	8003dd8 <HAL_GPIO_Init+0x228>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e000      	b.n	8003dd8 <HAL_GPIO_Init+0x228>
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	f002 0203 	and.w	r2, r2, #3
 8003dde:	0092      	lsls	r2, r2, #2
 8003de0:	4093      	lsls	r3, r2
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003de8:	4935      	ldr	r1, [pc, #212]	; (8003ec0 <HAL_GPIO_Init+0x310>)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	089b      	lsrs	r3, r3, #2
 8003dee:	3302      	adds	r3, #2
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df6:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_GPIO_Init+0x334>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e1a:	4a32      	ldr	r2, [pc, #200]	; (8003ee4 <HAL_GPIO_Init+0x334>)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e20:	4b30      	ldr	r3, [pc, #192]	; (8003ee4 <HAL_GPIO_Init+0x334>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	43db      	mvns	r3, r3
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e44:	4a27      	ldr	r2, [pc, #156]	; (8003ee4 <HAL_GPIO_Init+0x334>)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e4a:	4b26      	ldr	r3, [pc, #152]	; (8003ee4 <HAL_GPIO_Init+0x334>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	43db      	mvns	r3, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4013      	ands	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e6e:	4a1d      	ldr	r2, [pc, #116]	; (8003ee4 <HAL_GPIO_Init+0x334>)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <HAL_GPIO_Init+0x334>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e98:	4a12      	ldr	r2, [pc, #72]	; (8003ee4 <HAL_GPIO_Init+0x334>)
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	f67f ae90 	bls.w	8003bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	3724      	adds	r7, #36	; 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	40013800 	.word	0x40013800
 8003ec4:	40020000 	.word	0x40020000
 8003ec8:	40020400 	.word	0x40020400
 8003ecc:	40020800 	.word	0x40020800
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40021400 	.word	0x40021400
 8003edc:	40021800 	.word	0x40021800
 8003ee0:	40021c00 	.word	0x40021c00
 8003ee4:	40013c00 	.word	0x40013c00

08003ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	887b      	ldrh	r3, [r7, #2]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f00:	2301      	movs	r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
 8003f04:	e001      	b.n	8003f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f06:	2300      	movs	r3, #0
 8003f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	807b      	strh	r3, [r7, #2]
 8003f24:	4613      	mov	r3, r2
 8003f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f28:	787b      	ldrb	r3, [r7, #1]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f2e:	887a      	ldrh	r2, [r7, #2]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f34:	e003      	b.n	8003f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f36:	887b      	ldrh	r3, [r7, #2]
 8003f38:	041a      	lsls	r2, r3, #16
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	619a      	str	r2, [r3, #24]
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f56:	4b08      	ldr	r3, [pc, #32]	; (8003f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d006      	beq.n	8003f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f62:	4a05      	ldr	r2, [pc, #20]	; (8003f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7fd f958 	bl	8001220 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f70:	bf00      	nop
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40013c00 	.word	0x40013c00

08003f7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e12b      	b.n	80041e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d106      	bne.n	8003fa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7fd f9ea 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2224      	movs	r2, #36	; 0x24
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fe0:	f000 fd30 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8003fe4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	4a81      	ldr	r2, [pc, #516]	; (80041f0 <HAL_I2C_Init+0x274>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d807      	bhi.n	8004000 <HAL_I2C_Init+0x84>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a80      	ldr	r2, [pc, #512]	; (80041f4 <HAL_I2C_Init+0x278>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	bf94      	ite	ls
 8003ff8:	2301      	movls	r3, #1
 8003ffa:	2300      	movhi	r3, #0
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	e006      	b.n	800400e <HAL_I2C_Init+0x92>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a7d      	ldr	r2, [pc, #500]	; (80041f8 <HAL_I2C_Init+0x27c>)
 8004004:	4293      	cmp	r3, r2
 8004006:	bf94      	ite	ls
 8004008:	2301      	movls	r3, #1
 800400a:	2300      	movhi	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e0e7      	b.n	80041e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a78      	ldr	r2, [pc, #480]	; (80041fc <HAL_I2C_Init+0x280>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0c9b      	lsrs	r3, r3, #18
 8004020:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	4a6a      	ldr	r2, [pc, #424]	; (80041f0 <HAL_I2C_Init+0x274>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d802      	bhi.n	8004050 <HAL_I2C_Init+0xd4>
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3301      	adds	r3, #1
 800404e:	e009      	b.n	8004064 <HAL_I2C_Init+0xe8>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004056:	fb02 f303 	mul.w	r3, r2, r3
 800405a:	4a69      	ldr	r2, [pc, #420]	; (8004200 <HAL_I2C_Init+0x284>)
 800405c:	fba2 2303 	umull	r2, r3, r2, r3
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	3301      	adds	r3, #1
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	430b      	orrs	r3, r1
 800406a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004076:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	495c      	ldr	r1, [pc, #368]	; (80041f0 <HAL_I2C_Init+0x274>)
 8004080:	428b      	cmp	r3, r1
 8004082:	d819      	bhi.n	80040b8 <HAL_I2C_Init+0x13c>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1e59      	subs	r1, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004098:	400b      	ands	r3, r1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_I2C_Init+0x138>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1e59      	subs	r1, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ac:	3301      	adds	r3, #1
 80040ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b2:	e051      	b.n	8004158 <HAL_I2C_Init+0x1dc>
 80040b4:	2304      	movs	r3, #4
 80040b6:	e04f      	b.n	8004158 <HAL_I2C_Init+0x1dc>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d111      	bne.n	80040e4 <HAL_I2C_Init+0x168>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1e58      	subs	r0, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	440b      	add	r3, r1
 80040ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d2:	3301      	adds	r3, #1
 80040d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bf0c      	ite	eq
 80040dc:	2301      	moveq	r3, #1
 80040de:	2300      	movne	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e012      	b.n	800410a <HAL_I2C_Init+0x18e>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1e58      	subs	r0, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	0099      	lsls	r1, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_Init+0x196>
 800410e:	2301      	movs	r3, #1
 8004110:	e022      	b.n	8004158 <HAL_I2C_Init+0x1dc>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10e      	bne.n	8004138 <HAL_I2C_Init+0x1bc>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	1e58      	subs	r0, r3, #1
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	460b      	mov	r3, r1
 8004124:	005b      	lsls	r3, r3, #1
 8004126:	440b      	add	r3, r1
 8004128:	fbb0 f3f3 	udiv	r3, r0, r3
 800412c:	3301      	adds	r3, #1
 800412e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004136:	e00f      	b.n	8004158 <HAL_I2C_Init+0x1dc>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1e58      	subs	r0, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	0099      	lsls	r1, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	fbb0 f3f3 	udiv	r3, r0, r3
 800414e:	3301      	adds	r3, #1
 8004150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	6809      	ldr	r1, [r1, #0]
 800415c:	4313      	orrs	r3, r2
 800415e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	431a      	orrs	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6911      	ldr	r1, [r2, #16]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	68d2      	ldr	r2, [r2, #12]
 8004192:	4311      	orrs	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	430b      	orrs	r3, r1
 800419a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f042 0201 	orr.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2220      	movs	r2, #32
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	000186a0 	.word	0x000186a0
 80041f4:	001e847f 	.word	0x001e847f
 80041f8:	003d08ff 	.word	0x003d08ff
 80041fc:	431bde83 	.word	0x431bde83
 8004200:	10624dd3 	.word	0x10624dd3

08004204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e264      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d075      	beq.n	800430e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004222:	4ba3      	ldr	r3, [pc, #652]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b04      	cmp	r3, #4
 800422c:	d00c      	beq.n	8004248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800422e:	4ba0      	ldr	r3, [pc, #640]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004236:	2b08      	cmp	r3, #8
 8004238:	d112      	bne.n	8004260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423a:	4b9d      	ldr	r3, [pc, #628]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004246:	d10b      	bne.n	8004260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004248:	4b99      	ldr	r3, [pc, #612]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d05b      	beq.n	800430c <HAL_RCC_OscConfig+0x108>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d157      	bne.n	800430c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e23f      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004268:	d106      	bne.n	8004278 <HAL_RCC_OscConfig+0x74>
 800426a:	4b91      	ldr	r3, [pc, #580]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a90      	ldr	r2, [pc, #576]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e01d      	b.n	80042b4 <HAL_RCC_OscConfig+0xb0>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x98>
 8004282:	4b8b      	ldr	r3, [pc, #556]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a8a      	ldr	r2, [pc, #552]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a87      	ldr	r2, [pc, #540]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e00b      	b.n	80042b4 <HAL_RCC_OscConfig+0xb0>
 800429c:	4b84      	ldr	r3, [pc, #528]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a83      	ldr	r2, [pc, #524]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b81      	ldr	r3, [pc, #516]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a80      	ldr	r2, [pc, #512]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80042ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d013      	beq.n	80042e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fe fff6 	bl	80032ac <HAL_GetTick>
 80042c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	e008      	b.n	80042d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c4:	f7fe fff2 	bl	80032ac <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	2b64      	cmp	r3, #100	; 0x64
 80042d0:	d901      	bls.n	80042d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e204      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b76      	ldr	r3, [pc, #472]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d0f0      	beq.n	80042c4 <HAL_RCC_OscConfig+0xc0>
 80042e2:	e014      	b.n	800430e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fe ffe2 	bl	80032ac <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ec:	f7fe ffde 	bl	80032ac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b64      	cmp	r3, #100	; 0x64
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e1f0      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fe:	4b6c      	ldr	r3, [pc, #432]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0xe8>
 800430a:	e000      	b.n	800430e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800430c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d063      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800431a:	4b65      	ldr	r3, [pc, #404]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 030c 	and.w	r3, r3, #12
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004326:	4b62      	ldr	r3, [pc, #392]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432e:	2b08      	cmp	r3, #8
 8004330:	d11c      	bne.n	800436c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004332:	4b5f      	ldr	r3, [pc, #380]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d116      	bne.n	800436c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	4b5c      	ldr	r3, [pc, #368]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0302 	and.w	r3, r3, #2
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <HAL_RCC_OscConfig+0x152>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d001      	beq.n	8004356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e1c4      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004356:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4952      	ldr	r1, [pc, #328]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004366:	4313      	orrs	r3, r2
 8004368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	e03a      	b.n	80043e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d020      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004374:	4b4f      	ldr	r3, [pc, #316]	; (80044b4 <HAL_RCC_OscConfig+0x2b0>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437a:	f7fe ff97 	bl	80032ac <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004382:	f7fe ff93 	bl	80032ac <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e1a5      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004394:	4b46      	ldr	r3, [pc, #280]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0302 	and.w	r3, r3, #2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a0:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4940      	ldr	r1, [pc, #256]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]
 80043b4:	e015      	b.n	80043e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <HAL_RCC_OscConfig+0x2b0>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043bc:	f7fe ff76 	bl	80032ac <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043c4:	f7fe ff72 	bl	80032ac <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e184      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d6:	4b36      	ldr	r3, [pc, #216]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0308 	and.w	r3, r3, #8
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d030      	beq.n	8004450 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043f6:	4b30      	ldr	r3, [pc, #192]	; (80044b8 <HAL_RCC_OscConfig+0x2b4>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fc:	f7fe ff56 	bl	80032ac <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004404:	f7fe ff52 	bl	80032ac <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e164      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004416:	4b26      	ldr	r3, [pc, #152]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d0f0      	beq.n	8004404 <HAL_RCC_OscConfig+0x200>
 8004422:	e015      	b.n	8004450 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004424:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_RCC_OscConfig+0x2b4>)
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442a:	f7fe ff3f 	bl	80032ac <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004432:	f7fe ff3b 	bl	80032ac <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e14d      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	4b1a      	ldr	r3, [pc, #104]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1f0      	bne.n	8004432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80a0 	beq.w	800459e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	60bb      	str	r3, [r7, #8]
 8004472:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	4a0e      	ldr	r2, [pc, #56]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800447c:	6413      	str	r3, [r2, #64]	; 0x40
 800447e:	4b0c      	ldr	r3, [pc, #48]	; (80044b0 <HAL_RCC_OscConfig+0x2ac>)
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004486:	60bb      	str	r3, [r7, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_OscConfig+0x2b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004496:	2b00      	cmp	r3, #0
 8004498:	d121      	bne.n	80044de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800449a:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_RCC_OscConfig+0x2b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a07      	ldr	r2, [pc, #28]	; (80044bc <HAL_RCC_OscConfig+0x2b8>)
 80044a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a6:	f7fe ff01 	bl	80032ac <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ac:	e011      	b.n	80044d2 <HAL_RCC_OscConfig+0x2ce>
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	42470000 	.word	0x42470000
 80044b8:	42470e80 	.word	0x42470e80
 80044bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c0:	f7fe fef4 	bl	80032ac <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e106      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b85      	ldr	r3, [pc, #532]	; (80046e8 <HAL_RCC_OscConfig+0x4e4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d0f0      	beq.n	80044c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d106      	bne.n	80044f4 <HAL_RCC_OscConfig+0x2f0>
 80044e6:	4b81      	ldr	r3, [pc, #516]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	4a80      	ldr	r2, [pc, #512]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6713      	str	r3, [r2, #112]	; 0x70
 80044f2:	e01c      	b.n	800452e <HAL_RCC_OscConfig+0x32a>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	d10c      	bne.n	8004516 <HAL_RCC_OscConfig+0x312>
 80044fc:	4b7b      	ldr	r3, [pc, #492]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004500:	4a7a      	ldr	r2, [pc, #488]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004502:	f043 0304 	orr.w	r3, r3, #4
 8004506:	6713      	str	r3, [r2, #112]	; 0x70
 8004508:	4b78      	ldr	r3, [pc, #480]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	4a77      	ldr	r2, [pc, #476]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6713      	str	r3, [r2, #112]	; 0x70
 8004514:	e00b      	b.n	800452e <HAL_RCC_OscConfig+0x32a>
 8004516:	4b75      	ldr	r3, [pc, #468]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	4a74      	ldr	r2, [pc, #464]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6713      	str	r3, [r2, #112]	; 0x70
 8004522:	4b72      	ldr	r3, [pc, #456]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	4a71      	ldr	r2, [pc, #452]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004528:	f023 0304 	bic.w	r3, r3, #4
 800452c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d015      	beq.n	8004562 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004536:	f7fe feb9 	bl	80032ac <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7fe feb5 	bl	80032ac <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0c5      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	4b65      	ldr	r3, [pc, #404]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0ee      	beq.n	800453e <HAL_RCC_OscConfig+0x33a>
 8004560:	e014      	b.n	800458c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004562:	f7fe fea3 	bl	80032ac <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe fe9f 	bl	80032ac <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0af      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004580:	4b5a      	ldr	r3, [pc, #360]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ee      	bne.n	800456a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800458c:	7dfb      	ldrb	r3, [r7, #23]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d105      	bne.n	800459e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004592:	4b56      	ldr	r3, [pc, #344]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	4a55      	ldr	r2, [pc, #340]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	699b      	ldr	r3, [r3, #24]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 809b 	beq.w	80046de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a8:	4b50      	ldr	r3, [pc, #320]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d05c      	beq.n	800466e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d141      	bne.n	8004640 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045bc:	4b4c      	ldr	r3, [pc, #304]	; (80046f0 <HAL_RCC_OscConfig+0x4ec>)
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c2:	f7fe fe73 	bl	80032ac <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fe fe6f 	bl	80032ac <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e081      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045dc:	4b43      	ldr	r3, [pc, #268]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1f0      	bne.n	80045ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	019b      	lsls	r3, r3, #6
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	4937      	ldr	r1, [pc, #220]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004612:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCC_OscConfig+0x4ec>)
 8004614:	2201      	movs	r2, #1
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fe fe48 	bl	80032ac <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004620:	f7fe fe44 	bl	80032ac <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e056      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004632:	4b2e      	ldr	r3, [pc, #184]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x41c>
 800463e:	e04e      	b.n	80046de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCC_OscConfig+0x4ec>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fe fe31 	bl	80032ac <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464e:	f7fe fe2d 	bl	80032ac <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e03f      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004660:	4b22      	ldr	r3, [pc, #136]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x44a>
 800466c:	e037      	b.n	80046de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e032      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800467a:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <HAL_RCC_OscConfig+0x4e8>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d028      	beq.n	80046da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d121      	bne.n	80046da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d11a      	bne.n	80046da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046aa:	4013      	ands	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d111      	bne.n	80046da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	085b      	lsrs	r3, r3, #1
 80046c2:	3b01      	subs	r3, #1
 80046c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d107      	bne.n	80046da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40007000 	.word	0x40007000
 80046ec:	40023800 	.word	0x40023800
 80046f0:	42470060 	.word	0x42470060

080046f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e0cc      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004708:	4b68      	ldr	r3, [pc, #416]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0307 	and.w	r3, r3, #7
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	429a      	cmp	r2, r3
 8004714:	d90c      	bls.n	8004730 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004716:	4b65      	ldr	r3, [pc, #404]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	b2d2      	uxtb	r2, r2
 800471c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b63      	ldr	r3, [pc, #396]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0b8      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d020      	beq.n	800477e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004748:	4b59      	ldr	r3, [pc, #356]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a58      	ldr	r2, [pc, #352]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004752:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004760:	4b53      	ldr	r3, [pc, #332]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	4a52      	ldr	r2, [pc, #328]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800476a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800476c:	4b50      	ldr	r3, [pc, #320]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	494d      	ldr	r1, [pc, #308]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	4313      	orrs	r3, r2
 800477c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d044      	beq.n	8004814 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d119      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e07f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d003      	beq.n	80047b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d107      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c2:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e067      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047d2:	4b37      	ldr	r3, [pc, #220]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f023 0203 	bic.w	r2, r3, #3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	4934      	ldr	r1, [pc, #208]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047e4:	f7fe fd62 	bl	80032ac <HAL_GetTick>
 80047e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	e00a      	b.n	8004802 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ec:	f7fe fd5e 	bl	80032ac <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e04f      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004802:	4b2b      	ldr	r3, [pc, #172]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 020c 	and.w	r2, r3, #12
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	429a      	cmp	r2, r3
 8004812:	d1eb      	bne.n	80047ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004814:	4b25      	ldr	r3, [pc, #148]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d20c      	bcs.n	800483c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b22      	ldr	r3, [pc, #136]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b20      	ldr	r3, [pc, #128]	; (80048ac <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e032      	b.n	80048a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4916      	ldr	r1, [pc, #88]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	2b00      	cmp	r3, #0
 8004864:	d009      	beq.n	800487a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	490e      	ldr	r1, [pc, #56]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	4313      	orrs	r3, r2
 8004878:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800487a:	f000 f821 	bl	80048c0 <HAL_RCC_GetSysClockFreq>
 800487e:	4602      	mov	r2, r0
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	490a      	ldr	r1, [pc, #40]	; (80048b4 <HAL_RCC_ClockConfig+0x1c0>)
 800488c:	5ccb      	ldrb	r3, [r1, r3]
 800488e:	fa22 f303 	lsr.w	r3, r2, r3
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004896:	4b09      	ldr	r3, [pc, #36]	; (80048bc <HAL_RCC_ClockConfig+0x1c8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4618      	mov	r0, r3
 800489c:	f7fc fff8 	bl	8001890 <HAL_InitTick>

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023c00 	.word	0x40023c00
 80048b0:	40023800 	.word	0x40023800
 80048b4:	0800a4cc 	.word	0x0800a4cc
 80048b8:	20000000 	.word	0x20000000
 80048bc:	20000014 	.word	0x20000014

080048c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048c0:	b5b0      	push	{r4, r5, r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048c6:	2100      	movs	r1, #0
 80048c8:	6079      	str	r1, [r7, #4]
 80048ca:	2100      	movs	r1, #0
 80048cc:	60f9      	str	r1, [r7, #12]
 80048ce:	2100      	movs	r1, #0
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048d2:	2100      	movs	r1, #0
 80048d4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d6:	4952      	ldr	r1, [pc, #328]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x160>)
 80048d8:	6889      	ldr	r1, [r1, #8]
 80048da:	f001 010c 	and.w	r1, r1, #12
 80048de:	2908      	cmp	r1, #8
 80048e0:	d00d      	beq.n	80048fe <HAL_RCC_GetSysClockFreq+0x3e>
 80048e2:	2908      	cmp	r1, #8
 80048e4:	f200 8094 	bhi.w	8004a10 <HAL_RCC_GetSysClockFreq+0x150>
 80048e8:	2900      	cmp	r1, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x32>
 80048ec:	2904      	cmp	r1, #4
 80048ee:	d003      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x38>
 80048f0:	e08e      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f2:	4b4c      	ldr	r3, [pc, #304]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x164>)
 80048f4:	60bb      	str	r3, [r7, #8]
       break;
 80048f6:	e08e      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f8:	4b4b      	ldr	r3, [pc, #300]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x168>)
 80048fa:	60bb      	str	r3, [r7, #8]
      break;
 80048fc:	e08b      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048fe:	4948      	ldr	r1, [pc, #288]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004900:	6849      	ldr	r1, [r1, #4]
 8004902:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004906:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004908:	4945      	ldr	r1, [pc, #276]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x160>)
 800490a:	6849      	ldr	r1, [r1, #4]
 800490c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004910:	2900      	cmp	r1, #0
 8004912:	d024      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004914:	4942      	ldr	r1, [pc, #264]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004916:	6849      	ldr	r1, [r1, #4]
 8004918:	0989      	lsrs	r1, r1, #6
 800491a:	4608      	mov	r0, r1
 800491c:	f04f 0100 	mov.w	r1, #0
 8004920:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004924:	f04f 0500 	mov.w	r5, #0
 8004928:	ea00 0204 	and.w	r2, r0, r4
 800492c:	ea01 0305 	and.w	r3, r1, r5
 8004930:	493d      	ldr	r1, [pc, #244]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x168>)
 8004932:	fb01 f003 	mul.w	r0, r1, r3
 8004936:	2100      	movs	r1, #0
 8004938:	fb01 f102 	mul.w	r1, r1, r2
 800493c:	1844      	adds	r4, r0, r1
 800493e:	493a      	ldr	r1, [pc, #232]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x168>)
 8004940:	fba2 0101 	umull	r0, r1, r2, r1
 8004944:	1863      	adds	r3, r4, r1
 8004946:	4619      	mov	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	461a      	mov	r2, r3
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	f7fb fc3e 	bl	80001d0 <__aeabi_uldivmod>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4613      	mov	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e04a      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495e:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x160>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	099b      	lsrs	r3, r3, #6
 8004964:	461a      	mov	r2, r3
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800496e:	f04f 0100 	mov.w	r1, #0
 8004972:	ea02 0400 	and.w	r4, r2, r0
 8004976:	ea03 0501 	and.w	r5, r3, r1
 800497a:	4620      	mov	r0, r4
 800497c:	4629      	mov	r1, r5
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	014b      	lsls	r3, r1, #5
 8004988:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800498c:	0142      	lsls	r2, r0, #5
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	1b00      	subs	r0, r0, r4
 8004994:	eb61 0105 	sbc.w	r1, r1, r5
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	018b      	lsls	r3, r1, #6
 80049a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049a6:	0182      	lsls	r2, r0, #6
 80049a8:	1a12      	subs	r2, r2, r0
 80049aa:	eb63 0301 	sbc.w	r3, r3, r1
 80049ae:	f04f 0000 	mov.w	r0, #0
 80049b2:	f04f 0100 	mov.w	r1, #0
 80049b6:	00d9      	lsls	r1, r3, #3
 80049b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049bc:	00d0      	lsls	r0, r2, #3
 80049be:	4602      	mov	r2, r0
 80049c0:	460b      	mov	r3, r1
 80049c2:	1912      	adds	r2, r2, r4
 80049c4:	eb45 0303 	adc.w	r3, r5, r3
 80049c8:	f04f 0000 	mov.w	r0, #0
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	0299      	lsls	r1, r3, #10
 80049d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049d6:	0290      	lsls	r0, r2, #10
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	f7fb fbf2 	bl	80001d0 <__aeabi_uldivmod>
 80049ec:	4602      	mov	r2, r0
 80049ee:	460b      	mov	r3, r1
 80049f0:	4613      	mov	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x160>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	3301      	adds	r3, #1
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a0c:	60bb      	str	r3, [r7, #8]
      break;
 8004a0e:	e002      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x164>)
 8004a12:	60bb      	str	r3, [r7, #8]
      break;
 8004a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a16:	68bb      	ldr	r3, [r7, #8]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a20:	40023800 	.word	0x40023800
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	00b71b00 	.word	0x00b71b00

08004a2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a32:	681b      	ldr	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000000 	.word	0x20000000

08004a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a48:	f7ff fff0 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0a9b      	lsrs	r3, r3, #10
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4903      	ldr	r1, [pc, #12]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	0800a4dc 	.word	0x0800a4dc

08004a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a70:	f7ff ffdc 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	0b5b      	lsrs	r3, r3, #13
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	4903      	ldr	r1, [pc, #12]	; (8004a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	0800a4dc 	.word	0x0800a4dc

08004a94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	220f      	movs	r2, #15
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004aa4:	4b12      	ldr	r3, [pc, #72]	; (8004af0 <HAL_RCC_GetClockConfig+0x5c>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0203 	and.w	r2, r3, #3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <HAL_RCC_GetClockConfig+0x5c>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_GetClockConfig+0x5c>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	08db      	lsrs	r3, r3, #3
 8004ace:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ad6:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <HAL_RCC_GetClockConfig+0x60>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0207 	and.w	r2, r3, #7
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	601a      	str	r2, [r3, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40023c00 	.word	0x40023c00

08004af8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d035      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b20:	4b62      	ldr	r3, [pc, #392]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b26:	f7fe fbc1 	bl	80032ac <HAL_GetTick>
 8004b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b2e:	f7fe fbbd 	bl	80032ac <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0b0      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b40:	4b5b      	ldr	r3, [pc, #364]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f0      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	019a      	lsls	r2, r3, #6
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	071b      	lsls	r3, r3, #28
 8004b58:	4955      	ldr	r1, [pc, #340]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b60:	4b52      	ldr	r3, [pc, #328]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b62:	2201      	movs	r2, #1
 8004b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b66:	f7fe fba1 	bl	80032ac <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b6c:	e008      	b.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b6e:	f7fe fb9d 	bl	80032ac <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e090      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b80:	4b4b      	ldr	r3, [pc, #300]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0f0      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8083 	beq.w	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	4b44      	ldr	r3, [pc, #272]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	4a43      	ldr	r2, [pc, #268]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8004baa:	4b41      	ldr	r3, [pc, #260]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bb6:	4b3f      	ldr	r3, [pc, #252]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a3e      	ldr	r2, [pc, #248]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc2:	f7fe fb73 	bl	80032ac <HAL_GetTick>
 8004bc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bca:	f7fe fb6f 	bl	80032ac <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e062      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004be8:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d02f      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d028      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c06:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c10:	4b29      	ldr	r3, [pc, #164]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c16:	4b28      	ldr	r3, [pc, #160]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c1c:	4a24      	ldr	r2, [pc, #144]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c22:	4b23      	ldr	r3, [pc, #140]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d114      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c2e:	f7fe fb3d 	bl	80032ac <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7fe fb39 	bl	80032ac <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e02a      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4c:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ee      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c64:	d10d      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7a:	490d      	ldr	r1, [pc, #52]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	608b      	str	r3, [r1, #8]
 8004c80:	e005      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c82:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c8c:	6093      	str	r3, [r2, #8]
 8004c8e:	4b08      	ldr	r3, [pc, #32]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9a:	4905      	ldr	r1, [pc, #20]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	42470068 	.word	0x42470068
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	42470e40 	.word	0x42470e40

08004cbc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e083      	b.n	8004dd6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	7f5b      	ldrb	r3, [r3, #29]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d105      	bne.n	8004ce4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f7fc fbc8 	bl	8001474 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	22ca      	movs	r2, #202	; 0xca
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2253      	movs	r2, #83	; 0x53
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f897 	bl	8004e2e <RTC_EnterInitMode>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	22ff      	movs	r2, #255	; 0xff
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2204      	movs	r2, #4
 8004d12:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e05e      	b.n	8004dd6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6899      	ldr	r1, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	695b      	ldr	r3, [r3, #20]
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68d2      	ldr	r2, [r2, #12]
 8004d52:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6919      	ldr	r1, [r3, #16]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	041a      	lsls	r2, r3, #16
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10e      	bne.n	8004da4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f829 	bl	8004dde <HAL_RTC_WaitForSynchro>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	22ff      	movs	r2, #255	; 0xff
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e018      	b.n	8004dd6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	22ff      	movs	r2, #255	; 0xff
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3708      	adds	r7, #8
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004df8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dfa:	f7fe fa57 	bl	80032ac <HAL_GetTick>
 8004dfe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004e00:	e009      	b.n	8004e16 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e02:	f7fe fa53 	bl	80032ac <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e10:	d901      	bls.n	8004e16 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e007      	b.n	8004e26 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0ee      	beq.n	8004e02 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d119      	bne.n	8004e7c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e50:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e52:	f7fe fa2b 	bl	80032ac <HAL_GetTick>
 8004e56:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e58:	e009      	b.n	8004e6e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004e5a:	f7fe fa27 	bl	80032ac <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e68:	d901      	bls.n	8004e6e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e007      	b.n	8004e7e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ee      	beq.n	8004e5a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e07b      	b.n	8004f90 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d108      	bne.n	8004eb2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ea8:	d009      	beq.n	8004ebe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	61da      	str	r2, [r3, #28]
 8004eb0:	e005      	b.n	8004ebe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fc faf5 	bl	80014c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	695b      	ldr	r3, [r3, #20]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	69db      	ldr	r3, [r3, #28]
 8004f34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f42:	ea42 0103 	orr.w	r1, r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	f003 0104 	and.w	r1, r3, #4
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f003 0210 	and.w	r2, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	69da      	ldr	r2, [r3, #28]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_SPI_Transmit+0x22>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e126      	b.n	8005208 <HAL_SPI_Transmit+0x270>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fc2:	f7fe f973 	bl	80032ac <HAL_GetTick>
 8004fc6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004fc8:	88fb      	ldrh	r3, [r7, #6]
 8004fca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d002      	beq.n	8004fde <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fdc:	e10b      	b.n	80051f6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_SPI_Transmit+0x52>
 8004fe4:	88fb      	ldrh	r3, [r7, #6]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d102      	bne.n	8004ff0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004fee:	e102      	b.n	80051f6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2203      	movs	r2, #3
 8004ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	88fa      	ldrh	r2, [r7, #6]
 8005008:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	88fa      	ldrh	r2, [r7, #6]
 800500e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005036:	d10f      	bne.n	8005058 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005056:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005062:	2b40      	cmp	r3, #64	; 0x40
 8005064:	d007      	beq.n	8005076 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005074:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800507e:	d14b      	bne.n	8005118 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <HAL_SPI_Transmit+0xf6>
 8005088:	8afb      	ldrh	r3, [r7, #22]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d13e      	bne.n	800510c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	881a      	ldrh	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509e:	1c9a      	adds	r2, r3, #2
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050b2:	e02b      	b.n	800510c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d112      	bne.n	80050e8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c6:	881a      	ldrh	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	1c9a      	adds	r2, r3, #2
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80050e6:	e011      	b.n	800510c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050e8:	f7fe f8e0 	bl	80032ac <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d803      	bhi.n	8005100 <HAL_SPI_Transmit+0x168>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fe:	d102      	bne.n	8005106 <HAL_SPI_Transmit+0x16e>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d102      	bne.n	800510c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	77fb      	strb	r3, [r7, #31]
          goto error;
 800510a:	e074      	b.n	80051f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1ce      	bne.n	80050b4 <HAL_SPI_Transmit+0x11c>
 8005116:	e04c      	b.n	80051b2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_SPI_Transmit+0x18e>
 8005120:	8afb      	ldrh	r3, [r7, #22]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d140      	bne.n	80051a8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	7812      	ldrb	r2, [r2, #0]
 8005132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800514c:	e02c      	b.n	80051a8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b02      	cmp	r3, #2
 800515a:	d113      	bne.n	8005184 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	330c      	adds	r3, #12
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	86da      	strh	r2, [r3, #54]	; 0x36
 8005182:	e011      	b.n	80051a8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005184:	f7fe f892 	bl	80032ac <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	429a      	cmp	r2, r3
 8005192:	d803      	bhi.n	800519c <HAL_SPI_Transmit+0x204>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800519a:	d102      	bne.n	80051a2 <HAL_SPI_Transmit+0x20a>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d102      	bne.n	80051a8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051a6:	e026      	b.n	80051f6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1cd      	bne.n	800514e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	6839      	ldr	r1, [r7, #0]
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 fbaa 	bl	8005910 <SPI_EndRxTxTransaction>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2220      	movs	r2, #32
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10a      	bne.n	80051e6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	613b      	str	r3, [r7, #16]
 80051e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	77fb      	strb	r3, [r7, #31]
 80051f2:	e000      	b.n	80051f6 <HAL_SPI_Transmit+0x25e>
  }

error:
 80051f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005206:	7ffb      	ldrb	r3, [r7, #31]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08c      	sub	sp, #48	; 0x30
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800521e:	2301      	movs	r3, #1
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x26>
 8005232:	2302      	movs	r3, #2
 8005234:	e18a      	b.n	800554c <HAL_SPI_TransmitReceive+0x33c>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523e:	f7fe f835 	bl	80032ac <HAL_GetTick>
 8005242:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800525c:	2b01      	cmp	r3, #1
 800525e:	d00f      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x70>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005266:	d107      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x68>
 8005270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005274:	2b04      	cmp	r3, #4
 8005276:	d003      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005278:	2302      	movs	r3, #2
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800527e:	e15b      	b.n	8005538 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_SPI_TransmitReceive+0x82>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_SPI_TransmitReceive+0x82>
 800528c:	887b      	ldrh	r3, [r7, #2]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005298:	e14e      	b.n	8005538 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d003      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2205      	movs	r2, #5
 80052aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	887a      	ldrh	r2, [r7, #2]
 80052c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	887a      	ldrh	r2, [r7, #2]
 80052d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	887a      	ldrh	r2, [r7, #2]
 80052d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b40      	cmp	r3, #64	; 0x40
 80052f0:	d007      	beq.n	8005302 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d178      	bne.n	80053fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_SPI_TransmitReceive+0x10a>
 8005314:	8b7b      	ldrh	r3, [r7, #26]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d166      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	881a      	ldrh	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	1c9a      	adds	r2, r3, #2
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533e:	e053      	b.n	80053e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b02      	cmp	r3, #2
 800534c:	d11b      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x176>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d016      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x176>
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d113      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	881a      	ldrh	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	1c9a      	adds	r2, r3, #2
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d119      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x1b8>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d014      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	b292      	uxth	r2, r2
 80053aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	1c9a      	adds	r2, r3, #2
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053c4:	2301      	movs	r3, #1
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053c8:	f7fd ff70 	bl	80032ac <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d807      	bhi.n	80053e8 <HAL_SPI_TransmitReceive+0x1d8>
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053de:	d003      	beq.n	80053e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80053e6:	e0a7      	b.n	8005538 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d1a6      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x130>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1a1      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x130>
 80053fc:	e07c      	b.n	80054f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d002      	beq.n	800540c <HAL_SPI_TransmitReceive+0x1fc>
 8005406:	8b7b      	ldrh	r3, [r7, #26]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d16b      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005428:	b29b      	uxth	r3, r3
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005432:	e057      	b.n	80054e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d11c      	bne.n	800547c <HAL_SPI_TransmitReceive+0x26c>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d017      	beq.n	800547c <HAL_SPI_TransmitReceive+0x26c>
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	2b01      	cmp	r3, #1
 8005450:	d114      	bne.n	800547c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	7812      	ldrb	r2, [r2, #0]
 800545e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	1c5a      	adds	r2, r3, #1
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d119      	bne.n	80054be <HAL_SPI_TransmitReceive+0x2ae>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548e:	b29b      	uxth	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d014      	beq.n	80054be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	b2d2      	uxtb	r2, r2
 80054a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	1c5a      	adds	r2, r3, #1
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054ba:	2301      	movs	r3, #1
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054be:	f7fd fef5 	bl	80032ac <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d803      	bhi.n	80054d6 <HAL_SPI_TransmitReceive+0x2c6>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d4:	d102      	bne.n	80054dc <HAL_SPI_TransmitReceive+0x2cc>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d103      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80054e2:	e029      	b.n	8005538 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1a2      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x224>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d19d      	bne.n	8005434 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fa07 	bl	8005910 <SPI_EndRxTxTransaction>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d006      	beq.n	8005516 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005514:	e010      	b.n	8005538 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	e000      	b.n	8005538 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005536:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005548:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800554c:	4618      	mov	r0, r3
 800554e:	3730      	adds	r7, #48	; 0x30
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4613      	mov	r3, r2
 8005560:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_SPI_Transmit_DMA+0x20>
 8005570:	2302      	movs	r3, #2
 8005572:	e09b      	b.n	80056ac <HAL_SPI_Transmit_DMA+0x158>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	d002      	beq.n	800558e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005588:	2302      	movs	r3, #2
 800558a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800558c:	e089      	b.n	80056a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_SPI_Transmit_DMA+0x46>
 8005594:	88fb      	ldrh	r3, [r7, #6]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800559e:	e080      	b.n	80056a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2203      	movs	r2, #3
 80055a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e6:	d10f      	bne.n	8005608 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005606:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560c:	4a29      	ldr	r2, [pc, #164]	; (80056b4 <HAL_SPI_Transmit_DMA+0x160>)
 800560e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005614:	4a28      	ldr	r2, [pc, #160]	; (80056b8 <HAL_SPI_Transmit_DMA+0x164>)
 8005616:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561c:	4a27      	ldr	r2, [pc, #156]	; (80056bc <HAL_SPI_Transmit_DMA+0x168>)
 800561e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005624:	2200      	movs	r2, #0
 8005626:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	4619      	mov	r1, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	330c      	adds	r3, #12
 8005638:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800563e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005640:	f7fd fff4 	bl	800362c <HAL_DMA_Start_IT>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	f043 0210 	orr.w	r2, r3, #16
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005662:	e01e      	b.n	80056a2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566e:	2b40      	cmp	r3, #64	; 0x40
 8005670:	d007      	beq.n	8005682 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005680:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f042 0220 	orr.w	r2, r2, #32
 8005690:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f042 0202 	orr.w	r2, r2, #2
 80056a0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3718      	adds	r7, #24
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	080057a5 	.word	0x080057a5
 80056b8:	080056fd 	.word	0x080056fd
 80056bc:	080057c1 	.word	0x080057c1

080056c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800570a:	f7fd fdcf 	bl	80032ac <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571e:	d03b      	beq.n	8005798 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0220 	bic.w	r2, r2, #32
 800572e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f022 0202 	bic.w	r2, r2, #2
 800573e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	2164      	movs	r1, #100	; 0x64
 8005744:	6978      	ldr	r0, [r7, #20]
 8005746:	f000 f8e3 	bl	8005910 <SPI_EndRxTxTransaction>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d005      	beq.n	800575c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005754:	f043 0220 	orr.w	r2, r3, #32
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60fb      	str	r3, [r7, #12]
 8005778:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2200      	movs	r2, #0
 800577e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005790:	6978      	ldr	r0, [r7, #20]
 8005792:	f7ff ffa9 	bl	80056e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005796:	e002      	b.n	800579e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005798:	6978      	ldr	r0, [r7, #20]
 800579a:	f7ff ff91 	bl	80056c0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff ff8e 	bl	80056d4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057b8:	bf00      	nop
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0203 	bic.w	r2, r2, #3
 80057dc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e2:	f043 0210 	orr.w	r2, r3, #16
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff ff78 	bl	80056e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	4613      	mov	r3, r2
 800580e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005810:	f7fd fd4c 	bl	80032ac <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	4413      	add	r3, r2
 800581e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005820:	f7fd fd44 	bl	80032ac <HAL_GetTick>
 8005824:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005826:	4b39      	ldr	r3, [pc, #228]	; (800590c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	015b      	lsls	r3, r3, #5
 800582c:	0d1b      	lsrs	r3, r3, #20
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	fb02 f303 	mul.w	r3, r2, r3
 8005834:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005836:	e054      	b.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583e:	d050      	beq.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005840:	f7fd fd34 	bl	80032ac <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	69fa      	ldr	r2, [r7, #28]
 800584c:	429a      	cmp	r2, r3
 800584e:	d902      	bls.n	8005856 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d13d      	bne.n	80058d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005864:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586e:	d111      	bne.n	8005894 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005878:	d004      	beq.n	8005884 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005882:	d107      	bne.n	8005894 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005892:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589c:	d10f      	bne.n	80058be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e017      	b.n	8005902 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	3b01      	subs	r3, #1
 80058e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	4013      	ands	r3, r2
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	461a      	mov	r2, r3
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d19b      	bne.n	8005838 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3720      	adds	r7, #32
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20000000 	.word	0x20000000

08005910 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <SPI_EndRxTxTransaction+0x7c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1b      	ldr	r2, [pc, #108]	; (8005990 <SPI_EndRxTxTransaction+0x80>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0d5b      	lsrs	r3, r3, #21
 8005928:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800592c:	fb02 f303 	mul.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800593a:	d112      	bne.n	8005962 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2200      	movs	r2, #0
 8005944:	2180      	movs	r1, #128	; 0x80
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f7ff ff5a 	bl	8005800 <SPI_WaitFlagStateUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005956:	f043 0220 	orr.w	r2, r3, #32
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e00f      	b.n	8005982 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3b01      	subs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005978:	2b80      	cmp	r3, #128	; 0x80
 800597a:	d0f2      	beq.n	8005962 <SPI_EndRxTxTransaction+0x52>
 800597c:	e000      	b.n	8005980 <SPI_EndRxTxTransaction+0x70>
        break;
 800597e:	bf00      	nop
  }

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	20000000 	.word	0x20000000
 8005990:	165e9f81 	.word	0x165e9f81

08005994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e041      	b.n	8005a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fb fe56 	bl	800166c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2202      	movs	r2, #2
 80059c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4619      	mov	r1, r3
 80059d2:	4610      	mov	r0, r2
 80059d4:	f000 fe34 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d001      	beq.n	8005a4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e046      	b.n	8005ada <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a23      	ldr	r2, [pc, #140]	; (8005ae8 <HAL_TIM_Base_Start+0xb4>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d022      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x70>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a66:	d01d      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x70>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <HAL_TIM_Base_Start+0xb8>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d018      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x70>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <HAL_TIM_Base_Start+0xbc>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x70>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1c      	ldr	r2, [pc, #112]	; (8005af4 <HAL_TIM_Base_Start+0xc0>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00e      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x70>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1b      	ldr	r2, [pc, #108]	; (8005af8 <HAL_TIM_Base_Start+0xc4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d009      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x70>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a19      	ldr	r2, [pc, #100]	; (8005afc <HAL_TIM_Base_Start+0xc8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d004      	beq.n	8005aa4 <HAL_TIM_Base_Start+0x70>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a18      	ldr	r2, [pc, #96]	; (8005b00 <HAL_TIM_Base_Start+0xcc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d111      	bne.n	8005ac8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b06      	cmp	r3, #6
 8005ab4:	d010      	beq.n	8005ad8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0201 	orr.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac6:	e007      	b.n	8005ad8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0201 	orr.w	r2, r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop
 8005ae8:	40010000 	.word	0x40010000
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800
 8005af4:	40000c00 	.word	0x40000c00
 8005af8:	40010400 	.word	0x40010400
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40001800 	.word	0x40001800

08005b04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d001      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e04e      	b.n	8005bba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68da      	ldr	r2, [r3, #12]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a23      	ldr	r2, [pc, #140]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d022      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x80>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b46:	d01d      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x80>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <HAL_TIM_Base_Start_IT+0xc8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d018      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x80>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1e      	ldr	r2, [pc, #120]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d013      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x80>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a1c      	ldr	r2, [pc, #112]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d00e      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x80>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a1b      	ldr	r2, [pc, #108]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d009      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x80>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a19      	ldr	r2, [pc, #100]	; (8005bdc <HAL_TIM_Base_Start_IT+0xd8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d004      	beq.n	8005b84 <HAL_TIM_Base_Start_IT+0x80>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a18      	ldr	r2, [pc, #96]	; (8005be0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d111      	bne.n	8005ba8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b06      	cmp	r3, #6
 8005b94:	d010      	beq.n	8005bb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba6:	e007      	b.n	8005bb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0201 	orr.w	r2, r2, #1
 8005bb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40010400 	.word	0x40010400
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40001800 	.word	0x40001800

08005be4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e041      	b.n	8005c7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fb fd74 	bl	80016f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	3304      	adds	r3, #4
 8005c20:	4619      	mov	r1, r3
 8005c22:	4610      	mov	r0, r2
 8005c24:	f000 fd0c 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <HAL_TIM_PWM_Start+0x24>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e022      	b.n	8005cee <HAL_TIM_PWM_Start+0x6a>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d109      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0x3e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	bf14      	ite	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	2300      	moveq	r3, #0
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	e015      	b.n	8005cee <HAL_TIM_PWM_Start+0x6a>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d109      	bne.n	8005cdc <HAL_TIM_PWM_Start+0x58>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	e008      	b.n	8005cee <HAL_TIM_PWM_Start+0x6a>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e07c      	b.n	8005df0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_PWM_Start+0x82>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d04:	e013      	b.n	8005d2e <HAL_TIM_PWM_Start+0xaa>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d104      	bne.n	8005d16 <HAL_TIM_PWM_Start+0x92>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d14:	e00b      	b.n	8005d2e <HAL_TIM_PWM_Start+0xaa>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b08      	cmp	r3, #8
 8005d1a:	d104      	bne.n	8005d26 <HAL_TIM_PWM_Start+0xa2>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d24:	e003      	b.n	8005d2e <HAL_TIM_PWM_Start+0xaa>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2201      	movs	r2, #1
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 f896 	bl	8006e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <HAL_TIM_PWM_Start+0x174>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d004      	beq.n	8005d50 <HAL_TIM_PWM_Start+0xcc>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <HAL_TIM_PWM_Start+0x178>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d101      	bne.n	8005d54 <HAL_TIM_PWM_Start+0xd0>
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <HAL_TIM_PWM_Start+0xd2>
 8005d54:	2300      	movs	r3, #0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d007      	beq.n	8005d6a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a22      	ldr	r2, [pc, #136]	; (8005df8 <HAL_TIM_PWM_Start+0x174>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d022      	beq.n	8005dba <HAL_TIM_PWM_Start+0x136>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d7c:	d01d      	beq.n	8005dba <HAL_TIM_PWM_Start+0x136>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <HAL_TIM_PWM_Start+0x17c>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d018      	beq.n	8005dba <HAL_TIM_PWM_Start+0x136>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_TIM_PWM_Start+0x180>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIM_PWM_Start+0x136>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_TIM_PWM_Start+0x184>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIM_PWM_Start+0x136>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a16      	ldr	r2, [pc, #88]	; (8005dfc <HAL_TIM_PWM_Start+0x178>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIM_PWM_Start+0x136>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <HAL_TIM_PWM_Start+0x188>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIM_PWM_Start+0x136>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a16      	ldr	r2, [pc, #88]	; (8005e10 <HAL_TIM_PWM_Start+0x18c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d111      	bne.n	8005dde <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b06      	cmp	r3, #6
 8005dca:	d010      	beq.n	8005dee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ddc:	e007      	b.n	8005dee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40010400 	.word	0x40010400
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40014000 	.word	0x40014000
 8005e10:	40001800 	.word	0x40001800

08005e14 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2200      	movs	r2, #0
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f81e 	bl	8006e68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a2e      	ldr	r2, [pc, #184]	; (8005eec <HAL_TIM_PWM_Stop+0xd8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_TIM_PWM_Stop+0x2c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2d      	ldr	r2, [pc, #180]	; (8005ef0 <HAL_TIM_PWM_Stop+0xdc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIM_PWM_Stop+0x30>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e000      	b.n	8005e46 <HAL_TIM_PWM_Stop+0x32>
 8005e44:	2300      	movs	r3, #0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d017      	beq.n	8005e7a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10f      	bne.n	8005e7a <HAL_TIM_PWM_Stop+0x66>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a1a      	ldr	r2, [r3, #32]
 8005e60:	f240 4344 	movw	r3, #1092	; 0x444
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d107      	bne.n	8005e7a <HAL_TIM_PWM_Stop+0x66>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6a1a      	ldr	r2, [r3, #32]
 8005e80:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e84:	4013      	ands	r3, r2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <HAL_TIM_PWM_Stop+0x96>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	f240 4344 	movw	r3, #1092	; 0x444
 8005e94:	4013      	ands	r3, r2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d107      	bne.n	8005eaa <HAL_TIM_PWM_Stop+0x96>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0201 	bic.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Stop+0xa6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb8:	e013      	b.n	8005ee2 <HAL_TIM_PWM_Stop+0xce>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Stop+0xb6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec8:	e00b      	b.n	8005ee2 <HAL_TIM_PWM_Stop+0xce>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Stop+0xc6>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed8:	e003      	b.n	8005ee2 <HAL_TIM_PWM_Stop+0xce>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e041      	b.n	8005f8a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fb fc0e 	bl	800173c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4619      	mov	r1, r3
 8005f32:	4610      	mov	r0, r2
 8005f34:	f000 fb84 	bl	8006640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b082      	sub	sp, #8
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d122      	bne.n	8005fee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d11b      	bne.n	8005fee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f06f 0202 	mvn.w	r2, #2
 8005fbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fb14 	bl	8006602 <HAL_TIM_IC_CaptureCallback>
 8005fda:	e005      	b.n	8005fe8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fb06 	bl	80065ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fb17 	bl	8006616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f003 0304 	and.w	r3, r3, #4
 8005ff8:	2b04      	cmp	r3, #4
 8005ffa:	d122      	bne.n	8006042 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b04      	cmp	r3, #4
 8006008:	d11b      	bne.n	8006042 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f06f 0204 	mvn.w	r2, #4
 8006012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	699b      	ldr	r3, [r3, #24]
 8006020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 faea 	bl	8006602 <HAL_TIM_IC_CaptureCallback>
 800602e:	e005      	b.n	800603c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fadc 	bl	80065ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 faed 	bl	8006616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f003 0308 	and.w	r3, r3, #8
 800604c:	2b08      	cmp	r3, #8
 800604e:	d122      	bne.n	8006096 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b08      	cmp	r3, #8
 800605c:	d11b      	bne.n	8006096 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f06f 0208 	mvn.w	r2, #8
 8006066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2204      	movs	r2, #4
 800606c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69db      	ldr	r3, [r3, #28]
 8006074:	f003 0303 	and.w	r3, r3, #3
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fac0 	bl	8006602 <HAL_TIM_IC_CaptureCallback>
 8006082:	e005      	b.n	8006090 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fab2 	bl	80065ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fac3 	bl	8006616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d122      	bne.n	80060ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0310 	and.w	r3, r3, #16
 80060ae:	2b10      	cmp	r3, #16
 80060b0:	d11b      	bne.n	80060ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f06f 0210 	mvn.w	r2, #16
 80060ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2208      	movs	r2, #8
 80060c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fa96 	bl	8006602 <HAL_TIM_IC_CaptureCallback>
 80060d6:	e005      	b.n	80060e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fa88 	bl	80065ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa99 	bl	8006616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d10e      	bne.n	8006116 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b01      	cmp	r3, #1
 8006104:	d107      	bne.n	8006116 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f06f 0201 	mvn.w	r2, #1
 800610e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7fb f8ef 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b80      	cmp	r3, #128	; 0x80
 8006122:	d10e      	bne.n	8006142 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d107      	bne.n	8006142 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800613a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 ff91 	bl	8007064 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614c:	2b40      	cmp	r3, #64	; 0x40
 800614e:	d10e      	bne.n	800616e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d107      	bne.n	800616e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa5e 	bl	800662a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	f003 0320 	and.w	r3, r3, #32
 8006178:	2b20      	cmp	r3, #32
 800617a:	d10e      	bne.n	800619a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f003 0320 	and.w	r3, r3, #32
 8006186:	2b20      	cmp	r3, #32
 8006188:	d107      	bne.n	800619a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f06f 0220 	mvn.w	r2, #32
 8006192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 ff5b 	bl	8007050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	60f8      	str	r0, [r7, #12]
 80061aa:	60b9      	str	r1, [r7, #8]
 80061ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80061bc:	2302      	movs	r3, #2
 80061be:	e088      	b.n	80062d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d11b      	bne.n	8006206 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6819      	ldr	r1, [r3, #0]
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f000 fc7f 	bl	8006ae0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 020c 	bic.w	r2, r2, #12
 80061f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6999      	ldr	r1, [r3, #24]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	619a      	str	r2, [r3, #24]
 8006204:	e060      	b.n	80062c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b04      	cmp	r3, #4
 800620a:	d11c      	bne.n	8006246 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f000 fd03 	bl	8006c26 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800622e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6999      	ldr	r1, [r3, #24]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	021a      	lsls	r2, r3, #8
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	619a      	str	r2, [r3, #24]
 8006244:	e040      	b.n	80062c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d11b      	bne.n	8006284 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f000 fd50 	bl	8006d00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 020c 	bic.w	r2, r2, #12
 800626e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69d9      	ldr	r1, [r3, #28]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	61da      	str	r2, [r3, #28]
 8006282:	e021      	b.n	80062c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b0c      	cmp	r3, #12
 8006288:	d11c      	bne.n	80062c4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f000 fd6d 	bl	8006d78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80062ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69d9      	ldr	r1, [r3, #28]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	021a      	lsls	r2, r3, #8
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	61da      	str	r2, [r3, #28]
 80062c2:	e001      	b.n	80062c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e0ae      	b.n	8006458 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b0c      	cmp	r3, #12
 8006306:	f200 809f 	bhi.w	8006448 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006345 	.word	0x08006345
 8006314:	08006449 	.word	0x08006449
 8006318:	08006449 	.word	0x08006449
 800631c:	08006449 	.word	0x08006449
 8006320:	08006385 	.word	0x08006385
 8006324:	08006449 	.word	0x08006449
 8006328:	08006449 	.word	0x08006449
 800632c:	08006449 	.word	0x08006449
 8006330:	080063c7 	.word	0x080063c7
 8006334:	08006449 	.word	0x08006449
 8006338:	08006449 	.word	0x08006449
 800633c:	08006449 	.word	0x08006449
 8006340:	08006407 	.word	0x08006407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fa18 	bl	8006780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699a      	ldr	r2, [r3, #24]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0208 	orr.w	r2, r2, #8
 800635e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699a      	ldr	r2, [r3, #24]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0204 	bic.w	r2, r2, #4
 800636e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6999      	ldr	r1, [r3, #24]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	691a      	ldr	r2, [r3, #16]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	619a      	str	r2, [r3, #24]
      break;
 8006382:	e064      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	4618      	mov	r0, r3
 800638c:	f000 fa68 	bl	8006860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800639e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6999      	ldr	r1, [r3, #24]
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	021a      	lsls	r2, r3, #8
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	619a      	str	r2, [r3, #24]
      break;
 80063c4:	e043      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68b9      	ldr	r1, [r7, #8]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 fabd 	bl	800694c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f042 0208 	orr.w	r2, r2, #8
 80063e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	69da      	ldr	r2, [r3, #28]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0204 	bic.w	r2, r2, #4
 80063f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69d9      	ldr	r1, [r3, #28]
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	430a      	orrs	r2, r1
 8006402:	61da      	str	r2, [r3, #28]
      break;
 8006404:	e023      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	4618      	mov	r0, r3
 800640e:	f000 fb11 	bl	8006a34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69da      	ldr	r2, [r3, #28]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69d9      	ldr	r1, [r3, #28]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	021a      	lsls	r2, r3, #8
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	430a      	orrs	r2, r1
 8006444:	61da      	str	r2, [r3, #28]
      break;
 8006446:	e002      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
      break;
 800644c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006456:	7dfb      	ldrb	r3, [r7, #23]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3718      	adds	r7, #24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_TIM_ConfigClockSource+0x1c>
 8006478:	2302      	movs	r3, #2
 800647a:	e0b4      	b.n	80065e6 <HAL_TIM_ConfigClockSource+0x186>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800649a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b4:	d03e      	beq.n	8006534 <HAL_TIM_ConfigClockSource+0xd4>
 80064b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ba:	f200 8087 	bhi.w	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c2:	f000 8086 	beq.w	80065d2 <HAL_TIM_ConfigClockSource+0x172>
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ca:	d87f      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064cc:	2b70      	cmp	r3, #112	; 0x70
 80064ce:	d01a      	beq.n	8006506 <HAL_TIM_ConfigClockSource+0xa6>
 80064d0:	2b70      	cmp	r3, #112	; 0x70
 80064d2:	d87b      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b60      	cmp	r3, #96	; 0x60
 80064d6:	d050      	beq.n	800657a <HAL_TIM_ConfigClockSource+0x11a>
 80064d8:	2b60      	cmp	r3, #96	; 0x60
 80064da:	d877      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b50      	cmp	r3, #80	; 0x50
 80064de:	d03c      	beq.n	800655a <HAL_TIM_ConfigClockSource+0xfa>
 80064e0:	2b50      	cmp	r3, #80	; 0x50
 80064e2:	d873      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b40      	cmp	r3, #64	; 0x40
 80064e6:	d058      	beq.n	800659a <HAL_TIM_ConfigClockSource+0x13a>
 80064e8:	2b40      	cmp	r3, #64	; 0x40
 80064ea:	d86f      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b30      	cmp	r3, #48	; 0x30
 80064ee:	d064      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x15a>
 80064f0:	2b30      	cmp	r3, #48	; 0x30
 80064f2:	d86b      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	d060      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d867      	bhi.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d05c      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b10      	cmp	r3, #16
 8006502:	d05a      	beq.n	80065ba <HAL_TIM_ConfigClockSource+0x15a>
 8006504:	e062      	b.n	80065cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	6899      	ldr	r1, [r3, #8]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	f000 fc87 	bl	8006e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	609a      	str	r2, [r3, #8]
      break;
 8006532:	e04f      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6818      	ldr	r0, [r3, #0]
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	6899      	ldr	r1, [r3, #8]
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f000 fc70 	bl	8006e28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689a      	ldr	r2, [r3, #8]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006556:	609a      	str	r2, [r3, #8]
      break;
 8006558:	e03c      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6859      	ldr	r1, [r3, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	461a      	mov	r2, r3
 8006568:	f000 fb2e 	bl	8006bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2150      	movs	r1, #80	; 0x50
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fc3d 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 8006578:	e02c      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6859      	ldr	r1, [r3, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	461a      	mov	r2, r3
 8006588:	f000 fb8a 	bl	8006ca0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2160      	movs	r1, #96	; 0x60
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fc2d 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 8006598:	e01c      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6859      	ldr	r1, [r3, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	461a      	mov	r2, r3
 80065a8:	f000 fb0e 	bl	8006bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2140      	movs	r1, #64	; 0x40
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fc1d 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 80065b8:	e00c      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4619      	mov	r1, r3
 80065c4:	4610      	mov	r0, r2
 80065c6:	f000 fc14 	bl	8006df2 <TIM_ITRx_SetConfig>
      break;
 80065ca:	e003      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	73fb      	strb	r3, [r7, #15]
      break;
 80065d0:	e000      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr

08006602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006602:	b480      	push	{r7}
 8006604:	b083      	sub	sp, #12
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr

08006616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006616:	b480      	push	{r7}
 8006618:	b083      	sub	sp, #12
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a40      	ldr	r2, [pc, #256]	; (8006754 <TIM_Base_SetConfig+0x114>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d013      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665e:	d00f      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a3d      	ldr	r2, [pc, #244]	; (8006758 <TIM_Base_SetConfig+0x118>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00b      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a3c      	ldr	r2, [pc, #240]	; (800675c <TIM_Base_SetConfig+0x11c>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d007      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a3b      	ldr	r2, [pc, #236]	; (8006760 <TIM_Base_SetConfig+0x120>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a3a      	ldr	r2, [pc, #232]	; (8006764 <TIM_Base_SetConfig+0x124>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d108      	bne.n	8006692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	4313      	orrs	r3, r2
 8006690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a2f      	ldr	r2, [pc, #188]	; (8006754 <TIM_Base_SetConfig+0x114>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d02b      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066a0:	d027      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a2c      	ldr	r2, [pc, #176]	; (8006758 <TIM_Base_SetConfig+0x118>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d023      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a2b      	ldr	r2, [pc, #172]	; (800675c <TIM_Base_SetConfig+0x11c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d01f      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <TIM_Base_SetConfig+0x120>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01b      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a29      	ldr	r2, [pc, #164]	; (8006764 <TIM_Base_SetConfig+0x124>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d017      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a28      	ldr	r2, [pc, #160]	; (8006768 <TIM_Base_SetConfig+0x128>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a27      	ldr	r2, [pc, #156]	; (800676c <TIM_Base_SetConfig+0x12c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00f      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a26      	ldr	r2, [pc, #152]	; (8006770 <TIM_Base_SetConfig+0x130>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00b      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a25      	ldr	r2, [pc, #148]	; (8006774 <TIM_Base_SetConfig+0x134>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d007      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a24      	ldr	r2, [pc, #144]	; (8006778 <TIM_Base_SetConfig+0x138>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d003      	beq.n	80066f2 <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a23      	ldr	r2, [pc, #140]	; (800677c <TIM_Base_SetConfig+0x13c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d108      	bne.n	8006704 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	4313      	orrs	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	689a      	ldr	r2, [r3, #8]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a0a      	ldr	r2, [pc, #40]	; (8006754 <TIM_Base_SetConfig+0x114>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d003      	beq.n	8006738 <TIM_Base_SetConfig+0xf8>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a0c      	ldr	r2, [pc, #48]	; (8006764 <TIM_Base_SetConfig+0x124>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d103      	bne.n	8006740 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	615a      	str	r2, [r3, #20]
}
 8006746:	bf00      	nop
 8006748:	3714      	adds	r7, #20
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	40010000 	.word	0x40010000
 8006758:	40000400 	.word	0x40000400
 800675c:	40000800 	.word	0x40000800
 8006760:	40000c00 	.word	0x40000c00
 8006764:	40010400 	.word	0x40010400
 8006768:	40014000 	.word	0x40014000
 800676c:	40014400 	.word	0x40014400
 8006770:	40014800 	.word	0x40014800
 8006774:	40001800 	.word	0x40001800
 8006778:	40001c00 	.word	0x40001c00
 800677c:	40002000 	.word	0x40002000

08006780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006780:	b480      	push	{r7}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a1b      	ldr	r3, [r3, #32]
 800678e:	f023 0201 	bic.w	r2, r3, #1
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0303 	bic.w	r3, r3, #3
 80067b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f023 0302 	bic.w	r3, r3, #2
 80067c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a20      	ldr	r2, [pc, #128]	; (8006858 <TIM_OC1_SetConfig+0xd8>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d003      	beq.n	80067e4 <TIM_OC1_SetConfig+0x64>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a1f      	ldr	r2, [pc, #124]	; (800685c <TIM_OC1_SetConfig+0xdc>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d10c      	bne.n	80067fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f023 0308 	bic.w	r3, r3, #8
 80067ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	697a      	ldr	r2, [r7, #20]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f023 0304 	bic.w	r3, r3, #4
 80067fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a15      	ldr	r2, [pc, #84]	; (8006858 <TIM_OC1_SetConfig+0xd8>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_OC1_SetConfig+0x8e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a14      	ldr	r2, [pc, #80]	; (800685c <TIM_OC1_SetConfig+0xdc>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d111      	bne.n	8006832 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800681c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	621a      	str	r2, [r3, #32]
}
 800684c:	bf00      	nop
 800684e:	371c      	adds	r7, #28
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	40010000 	.word	0x40010000
 800685c:	40010400 	.word	0x40010400

08006860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	f023 0210 	bic.w	r2, r3, #16
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	021b      	lsls	r3, r3, #8
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f023 0320 	bic.w	r3, r3, #32
 80068aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a22      	ldr	r2, [pc, #136]	; (8006944 <TIM_OC2_SetConfig+0xe4>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d003      	beq.n	80068c8 <TIM_OC2_SetConfig+0x68>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a21      	ldr	r2, [pc, #132]	; (8006948 <TIM_OC2_SetConfig+0xe8>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d10d      	bne.n	80068e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a17      	ldr	r2, [pc, #92]	; (8006944 <TIM_OC2_SetConfig+0xe4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_OC2_SetConfig+0x94>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a16      	ldr	r2, [pc, #88]	; (8006948 <TIM_OC2_SetConfig+0xe8>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d113      	bne.n	800691c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000
 8006948:	40010400 	.word	0x40010400

0800694c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a1b      	ldr	r3, [r3, #32]
 8006966:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <TIM_OC3_SetConfig+0xe0>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d003      	beq.n	80069b2 <TIM_OC3_SetConfig+0x66>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a20      	ldr	r2, [pc, #128]	; (8006a30 <TIM_OC3_SetConfig+0xe4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d10d      	bne.n	80069ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a16      	ldr	r2, [pc, #88]	; (8006a2c <TIM_OC3_SetConfig+0xe0>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d003      	beq.n	80069de <TIM_OC3_SetConfig+0x92>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <TIM_OC3_SetConfig+0xe4>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d113      	bne.n	8006a06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	621a      	str	r2, [r3, #32]
}
 8006a20:	bf00      	nop
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40010400 	.word	0x40010400

08006a34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	031b      	lsls	r3, r3, #12
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a12      	ldr	r2, [pc, #72]	; (8006ad8 <TIM_OC4_SetConfig+0xa4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_OC4_SetConfig+0x68>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a11      	ldr	r2, [pc, #68]	; (8006adc <TIM_OC4_SetConfig+0xa8>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d109      	bne.n	8006ab0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	019b      	lsls	r3, r3, #6
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40010000 	.word	0x40010000
 8006adc:	40010400 	.word	0x40010400

08006ae0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	f023 0201 	bic.w	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	4a28      	ldr	r2, [pc, #160]	; (8006bac <TIM_TI1_SetConfig+0xcc>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d01b      	beq.n	8006b46 <TIM_TI1_SetConfig+0x66>
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b14:	d017      	beq.n	8006b46 <TIM_TI1_SetConfig+0x66>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	4a25      	ldr	r2, [pc, #148]	; (8006bb0 <TIM_TI1_SetConfig+0xd0>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <TIM_TI1_SetConfig+0x66>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	4a24      	ldr	r2, [pc, #144]	; (8006bb4 <TIM_TI1_SetConfig+0xd4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00f      	beq.n	8006b46 <TIM_TI1_SetConfig+0x66>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <TIM_TI1_SetConfig+0xd8>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d00b      	beq.n	8006b46 <TIM_TI1_SetConfig+0x66>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4a22      	ldr	r2, [pc, #136]	; (8006bbc <TIM_TI1_SetConfig+0xdc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d007      	beq.n	8006b46 <TIM_TI1_SetConfig+0x66>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <TIM_TI1_SetConfig+0xe0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d003      	beq.n	8006b46 <TIM_TI1_SetConfig+0x66>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a20      	ldr	r2, [pc, #128]	; (8006bc4 <TIM_TI1_SetConfig+0xe4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d101      	bne.n	8006b4a <TIM_TI1_SetConfig+0x6a>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <TIM_TI1_SetConfig+0x6c>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e003      	b.n	8006b6a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f043 0301 	orr.w	r3, r3, #1
 8006b68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	f023 030a 	bic.w	r3, r3, #10
 8006b84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	f003 030a 	and.w	r3, r3, #10
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40010400 	.word	0x40010400
 8006bc0:	40014000 	.word	0x40014000
 8006bc4:	40001800 	.word	0x40001800

08006bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b087      	sub	sp, #28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0201 	bic.w	r2, r3, #1
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 030a 	bic.w	r3, r3, #10
 8006c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	621a      	str	r2, [r3, #32]
}
 8006c1a:	bf00      	nop
 8006c1c:	371c      	adds	r7, #28
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b087      	sub	sp, #28
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	607a      	str	r2, [r7, #4]
 8006c32:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f023 0210 	bic.w	r2, r3, #16
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c52:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	031b      	lsls	r3, r3, #12
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c78:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	011b      	lsls	r3, r3, #4
 8006c7e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	621a      	str	r2, [r3, #32]
}
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	f023 0210 	bic.w	r2, r3, #16
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	031b      	lsls	r3, r3, #12
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cdc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	621a      	str	r2, [r3, #32]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
 8006d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f023 0303 	bic.w	r3, r3, #3
 8006d2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	621a      	str	r2, [r3, #32]
}
 8006d6c:	bf00      	nop
 8006d6e:	371c      	adds	r7, #28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	021b      	lsls	r3, r3, #8
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006db6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	031b      	lsls	r3, r3, #12
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	031b      	lsls	r3, r3, #12
 8006dd0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	621a      	str	r2, [r3, #32]
}
 8006de6:	bf00      	nop
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	f043 0307 	orr.w	r3, r3, #7
 8006e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	609a      	str	r2, [r3, #8]
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
 8006e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	021a      	lsls	r2, r3, #8
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	609a      	str	r2, [r3, #8]
}
 8006e5c:	bf00      	nop
 8006e5e:	371c      	adds	r7, #28
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6a1a      	ldr	r2, [r3, #32]
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	43db      	mvns	r3, r3
 8006e8a:	401a      	ands	r2, r3
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6a1a      	ldr	r2, [r3, #32]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f003 031f 	and.w	r3, r3, #31
 8006e9a:	6879      	ldr	r1, [r7, #4]
 8006e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	621a      	str	r2, [r3, #32]
}
 8006ea6:	bf00      	nop
 8006ea8:	371c      	adds	r7, #28
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
	...

08006eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e05a      	b.n	8006f82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a21      	ldr	r2, [pc, #132]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d022      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f18:	d01d      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1d      	ldr	r2, [pc, #116]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d018      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a1b      	ldr	r2, [pc, #108]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1a      	ldr	r2, [pc, #104]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00e      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a18      	ldr	r2, [pc, #96]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d009      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d004      	beq.n	8006f56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a15      	ldr	r2, [pc, #84]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d10c      	bne.n	8006f70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3714      	adds	r7, #20
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40000400 	.word	0x40000400
 8006f98:	40000800 	.word	0x40000800
 8006f9c:	40000c00 	.word	0x40000c00
 8006fa0:	40010400 	.word	0x40010400
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	40001800 	.word	0x40001800

08006fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e03d      	b.n	8007044 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <__NVIC_SetPriority>:
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	6039      	str	r1, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007088:	2b00      	cmp	r3, #0
 800708a:	db0a      	blt.n	80070a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	490c      	ldr	r1, [pc, #48]	; (80070c4 <__NVIC_SetPriority+0x4c>)
 8007092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007096:	0112      	lsls	r2, r2, #4
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	440b      	add	r3, r1
 800709c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070a0:	e00a      	b.n	80070b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	b2da      	uxtb	r2, r3
 80070a6:	4908      	ldr	r1, [pc, #32]	; (80070c8 <__NVIC_SetPriority+0x50>)
 80070a8:	79fb      	ldrb	r3, [r7, #7]
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	3b04      	subs	r3, #4
 80070b0:	0112      	lsls	r2, r2, #4
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	440b      	add	r3, r1
 80070b6:	761a      	strb	r2, [r3, #24]
}
 80070b8:	bf00      	nop
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	e000e100 	.word	0xe000e100
 80070c8:	e000ed00 	.word	0xe000ed00

080070cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <SysTick_Handler+0x1c>)
 80070d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80070d4:	f001 ff24 	bl	8008f20 <xTaskGetSchedulerState>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d001      	beq.n	80070e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80070de:	f002 fd0b 	bl	8009af8 <xPortSysTickHandler>
  }
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	e000e010 	.word	0xe000e010

080070ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80070f0:	2100      	movs	r1, #0
 80070f2:	f06f 0004 	mvn.w	r0, #4
 80070f6:	f7ff ffbf 	bl	8007078 <__NVIC_SetPriority>
#endif
}
 80070fa:	bf00      	nop
 80070fc:	bd80      	pop	{r7, pc}
	...

08007100 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007106:	f3ef 8305 	mrs	r3, IPSR
 800710a:	603b      	str	r3, [r7, #0]
  return(result);
 800710c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007112:	f06f 0305 	mvn.w	r3, #5
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	e00c      	b.n	8007134 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800711a:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <osKernelInitialize+0x44>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d105      	bne.n	800712e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007122:	4b08      	ldr	r3, [pc, #32]	; (8007144 <osKernelInitialize+0x44>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007128:	2300      	movs	r3, #0
 800712a:	607b      	str	r3, [r7, #4]
 800712c:	e002      	b.n	8007134 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800712e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007132:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007134:	687b      	ldr	r3, [r7, #4]
}
 8007136:	4618      	mov	r0, r3
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	200000b0 	.word	0x200000b0

08007148 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	603b      	str	r3, [r7, #0]
  return(result);
 8007154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007156:	2b00      	cmp	r3, #0
 8007158:	d003      	beq.n	8007162 <osKernelStart+0x1a>
    stat = osErrorISR;
 800715a:	f06f 0305 	mvn.w	r3, #5
 800715e:	607b      	str	r3, [r7, #4]
 8007160:	e010      	b.n	8007184 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007162:	4b0b      	ldr	r3, [pc, #44]	; (8007190 <osKernelStart+0x48>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2b01      	cmp	r3, #1
 8007168:	d109      	bne.n	800717e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800716a:	f7ff ffbf 	bl	80070ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800716e:	4b08      	ldr	r3, [pc, #32]	; (8007190 <osKernelStart+0x48>)
 8007170:	2202      	movs	r2, #2
 8007172:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007174:	f001 fa78 	bl	8008668 <vTaskStartScheduler>
      stat = osOK;
 8007178:	2300      	movs	r3, #0
 800717a:	607b      	str	r3, [r7, #4]
 800717c:	e002      	b.n	8007184 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800717e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007182:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007184:	687b      	ldr	r3, [r7, #4]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3708      	adds	r7, #8
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	200000b0 	.word	0x200000b0

08007194 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007194:	b580      	push	{r7, lr}
 8007196:	b08e      	sub	sp, #56	; 0x38
 8007198:	af04      	add	r7, sp, #16
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071a4:	f3ef 8305 	mrs	r3, IPSR
 80071a8:	617b      	str	r3, [r7, #20]
  return(result);
 80071aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d17e      	bne.n	80072ae <osThreadNew+0x11a>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d07b      	beq.n	80072ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80071b6:	2380      	movs	r3, #128	; 0x80
 80071b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80071ba:	2318      	movs	r3, #24
 80071bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d045      	beq.n	800725a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d002      	beq.n	80071dc <osThreadNew+0x48>
        name = attr->name;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <osThreadNew+0x6e>
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	2b38      	cmp	r3, #56	; 0x38
 80071f4:	d805      	bhi.n	8007202 <osThreadNew+0x6e>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f003 0301 	and.w	r3, r3, #1
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d001      	beq.n	8007206 <osThreadNew+0x72>
        return (NULL);
 8007202:	2300      	movs	r3, #0
 8007204:	e054      	b.n	80072b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d003      	beq.n	8007216 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	089b      	lsrs	r3, r3, #2
 8007214:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00e      	beq.n	800723c <osThreadNew+0xa8>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	2bbb      	cmp	r3, #187	; 0xbb
 8007224:	d90a      	bls.n	800723c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800722a:	2b00      	cmp	r3, #0
 800722c:	d006      	beq.n	800723c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <osThreadNew+0xa8>
        mem = 1;
 8007236:	2301      	movs	r3, #1
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	e010      	b.n	800725e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10c      	bne.n	800725e <osThreadNew+0xca>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d108      	bne.n	800725e <osThreadNew+0xca>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <osThreadNew+0xca>
          mem = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	e001      	b.n	800725e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800725a:	2300      	movs	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d110      	bne.n	8007286 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	9301      	str	r3, [sp, #4]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6a3a      	ldr	r2, [r7, #32]
 8007278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 ff96 	bl	80081ac <xTaskCreateStatic>
 8007280:	4603      	mov	r3, r0
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	e013      	b.n	80072ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d110      	bne.n	80072ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800728c:	6a3b      	ldr	r3, [r7, #32]
 800728e:	b29a      	uxth	r2, r3
 8007290:	f107 0310 	add.w	r3, r7, #16
 8007294:	9301      	str	r3, [sp, #4]
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f000 ffe1 	bl	8008266 <xTaskCreate>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d001      	beq.n	80072ae <osThreadNew+0x11a>
            hTask = NULL;
 80072aa:	2300      	movs	r3, #0
 80072ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80072ae:	693b      	ldr	r3, [r7, #16]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3728      	adds	r7, #40	; 0x28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072c0:	f3ef 8305 	mrs	r3, IPSR
 80072c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80072c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <osDelay+0x1c>
    stat = osErrorISR;
 80072cc:	f06f 0305 	mvn.w	r3, #5
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	e007      	b.n	80072e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f001 f98e 	bl	8008600 <vTaskDelay>
    }
  }

  return (stat);
 80072e4:	68fb      	ldr	r3, [r7, #12]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b08a      	sub	sp, #40	; 0x28
 80072f2:	af02      	add	r7, sp, #8
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80072fa:	2300      	movs	r3, #0
 80072fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072fe:	f3ef 8305 	mrs	r3, IPSR
 8007302:	613b      	str	r3, [r7, #16]
  return(result);
 8007304:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007306:	2b00      	cmp	r3, #0
 8007308:	d15f      	bne.n	80073ca <osMessageQueueNew+0xdc>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d05c      	beq.n	80073ca <osMessageQueueNew+0xdc>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d059      	beq.n	80073ca <osMessageQueueNew+0xdc>
    mem = -1;
 8007316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800731a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d029      	beq.n	8007376 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d012      	beq.n	8007350 <osMessageQueueNew+0x62>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	2b4f      	cmp	r3, #79	; 0x4f
 8007330:	d90e      	bls.n	8007350 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695a      	ldr	r2, [r3, #20]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	fb01 f303 	mul.w	r3, r1, r3
 8007346:	429a      	cmp	r2, r3
 8007348:	d302      	bcc.n	8007350 <osMessageQueueNew+0x62>
        mem = 1;
 800734a:	2301      	movs	r3, #1
 800734c:	61bb      	str	r3, [r7, #24]
 800734e:	e014      	b.n	800737a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d110      	bne.n	800737a <osMessageQueueNew+0x8c>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10c      	bne.n	800737a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007364:	2b00      	cmp	r3, #0
 8007366:	d108      	bne.n	800737a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d104      	bne.n	800737a <osMessageQueueNew+0x8c>
          mem = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	e001      	b.n	800737a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d10b      	bne.n	8007398 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691a      	ldr	r2, [r3, #16]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	2100      	movs	r1, #0
 800738a:	9100      	str	r1, [sp, #0]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f9ce 	bl	8007730 <xQueueGenericCreateStatic>
 8007394:	61f8      	str	r0, [r7, #28]
 8007396:	e008      	b.n	80073aa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d105      	bne.n	80073aa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800739e:	2200      	movs	r2, #0
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fa3c 	bl	8007820 <xQueueGenericCreate>
 80073a8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00c      	beq.n	80073ca <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <osMessageQueueNew+0xd0>
        name = attr->name;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e001      	b.n	80073c2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80073c2:	6979      	ldr	r1, [r7, #20]
 80073c4:	69f8      	ldr	r0, [r7, #28]
 80073c6:	f000 fe93 	bl	80080f0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80073ca:	69fb      	ldr	r3, [r7, #28]
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3720      	adds	r7, #32
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ea:	f3ef 8305 	mrs	r3, IPSR
 80073ee:	617b      	str	r3, [r7, #20]
  return(result);
 80073f0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d028      	beq.n	8007448 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <osMessageQueueGet+0x34>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <osMessageQueueGet+0x34>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d003      	beq.n	8007410 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007408:	f06f 0303 	mvn.w	r3, #3
 800740c:	61fb      	str	r3, [r7, #28]
 800740e:	e037      	b.n	8007480 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007410:	2300      	movs	r3, #0
 8007412:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007414:	f107 0310 	add.w	r3, r7, #16
 8007418:	461a      	mov	r2, r3
 800741a:	68b9      	ldr	r1, [r7, #8]
 800741c:	69b8      	ldr	r0, [r7, #24]
 800741e:	f000 fcd7 	bl	8007dd0 <xQueueReceiveFromISR>
 8007422:	4603      	mov	r3, r0
 8007424:	2b01      	cmp	r3, #1
 8007426:	d003      	beq.n	8007430 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007428:	f06f 0302 	mvn.w	r3, #2
 800742c:	61fb      	str	r3, [r7, #28]
 800742e:	e027      	b.n	8007480 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d024      	beq.n	8007480 <osMessageQueueGet+0xac>
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <osMessageQueueGet+0xb8>)
 8007438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	e01b      	b.n	8007480 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <osMessageQueueGet+0x80>
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8007454:	f06f 0303 	mvn.w	r3, #3
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	e011      	b.n	8007480 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	68b9      	ldr	r1, [r7, #8]
 8007460:	69b8      	ldr	r0, [r7, #24]
 8007462:	f000 fbd5 	bl	8007c10 <xQueueReceive>
 8007466:	4603      	mov	r3, r0
 8007468:	2b01      	cmp	r3, #1
 800746a:	d009      	beq.n	8007480 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8007472:	f06f 0301 	mvn.w	r3, #1
 8007476:	61fb      	str	r3, [r7, #28]
 8007478:	e002      	b.n	8007480 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800747a:	f06f 0302 	mvn.w	r3, #2
 800747e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8007480:	69fb      	ldr	r3, [r7, #28]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3720      	adds	r7, #32
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	e000ed04 	.word	0xe000ed04

08007490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a07      	ldr	r2, [pc, #28]	; (80074bc <vApplicationGetIdleTaskMemory+0x2c>)
 80074a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	4a06      	ldr	r2, [pc, #24]	; (80074c0 <vApplicationGetIdleTaskMemory+0x30>)
 80074a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2280      	movs	r2, #128	; 0x80
 80074ac:	601a      	str	r2, [r3, #0]
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	200000b4 	.word	0x200000b4
 80074c0:	20000170 	.word	0x20000170

080074c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a07      	ldr	r2, [pc, #28]	; (80074f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80074d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	4a06      	ldr	r2, [pc, #24]	; (80074f4 <vApplicationGetTimerTaskMemory+0x30>)
 80074da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	20000370 	.word	0x20000370
 80074f4:	2000042c 	.word	0x2000042c

080074f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f103 0208 	add.w	r2, r3, #8
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007510:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f103 0208 	add.w	r2, r3, #8
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f103 0208 	add.w	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007546:	bf00      	nop
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	bf00      	nop
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800759a:	b480      	push	{r7}
 800759c:	b085      	sub	sp, #20
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075b0:	d103      	bne.n	80075ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	60fb      	str	r3, [r7, #12]
 80075b8:	e00c      	b.n	80075d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3308      	adds	r3, #8
 80075be:	60fb      	str	r3, [r7, #12]
 80075c0:	e002      	b.n	80075c8 <vListInsert+0x2e>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d2f6      	bcs.n	80075c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	683a      	ldr	r2, [r7, #0]
 80075e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	601a      	str	r2, [r3, #0]
}
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr

0800760c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6892      	ldr	r2, [r2, #8]
 8007622:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6852      	ldr	r2, [r2, #4]
 800762c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	429a      	cmp	r2, r3
 8007636:	d103      	bne.n	8007640 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	1e5a      	subs	r2, r3, #1
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007686:	bf00      	nop
 8007688:	e7fe      	b.n	8007688 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800768a:	f002 f9a3 	bl	80099d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007696:	68f9      	ldr	r1, [r7, #12]
 8007698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	441a      	add	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ba:	3b01      	subs	r3, #1
 80076bc:	68f9      	ldr	r1, [r7, #12]
 80076be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80076c0:	fb01 f303 	mul.w	r3, r1, r3
 80076c4:	441a      	add	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	22ff      	movs	r2, #255	; 0xff
 80076ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	22ff      	movs	r2, #255	; 0xff
 80076d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d114      	bne.n	800770a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d01a      	beq.n	800771e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3310      	adds	r3, #16
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 fa55 	bl	8008b9c <xTaskRemoveFromEventList>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d012      	beq.n	800771e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076f8:	4b0c      	ldr	r3, [pc, #48]	; (800772c <xQueueGenericReset+0xcc>)
 80076fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	e009      	b.n	800771e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	3310      	adds	r3, #16
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fef2 	bl	80074f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3324      	adds	r3, #36	; 0x24
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff feed 	bl	80074f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800771e:	f002 f989 	bl	8009a34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007722:	2301      	movs	r3, #1
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	e000ed04 	.word	0xe000ed04

08007730 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08e      	sub	sp, #56	; 0x38
 8007734:	af02      	add	r7, sp, #8
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10a      	bne.n	800775a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007756:	bf00      	nop
 8007758:	e7fe      	b.n	8007758 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <xQueueGenericCreateStatic+0x52>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <xQueueGenericCreateStatic+0x56>
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <xQueueGenericCreateStatic+0x58>
 8007786:	2300      	movs	r3, #0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10a      	bne.n	80077a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	623b      	str	r3, [r7, #32]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d102      	bne.n	80077ae <xQueueGenericCreateStatic+0x7e>
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <xQueueGenericCreateStatic+0x82>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <xQueueGenericCreateStatic+0x84>
 80077b2:	2300      	movs	r3, #0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	61fb      	str	r3, [r7, #28]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80077ce:	2350      	movs	r3, #80	; 0x50
 80077d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b50      	cmp	r3, #80	; 0x50
 80077d6:	d00a      	beq.n	80077ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80077d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077dc:	f383 8811 	msr	BASEPRI, r3
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	f3bf 8f4f 	dsb	sy
 80077e8:	61bb      	str	r3, [r7, #24]
}
 80077ea:	bf00      	nop
 80077ec:	e7fe      	b.n	80077ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80077f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00d      	beq.n	8007816 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007802:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	4613      	mov	r3, r2
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	68b9      	ldr	r1, [r7, #8]
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f000 f83f 	bl	8007894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007818:	4618      	mov	r0, r3
 800781a:	3730      	adds	r7, #48	; 0x30
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d10a      	bne.n	800784a <xQueueGenericCreate+0x2a>
	__asm volatile
 8007834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007838:	f383 8811 	msr	BASEPRI, r3
 800783c:	f3bf 8f6f 	isb	sy
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	613b      	str	r3, [r7, #16]
}
 8007846:	bf00      	nop
 8007848:	e7fe      	b.n	8007848 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	fb02 f303 	mul.w	r3, r2, r3
 8007852:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3350      	adds	r3, #80	; 0x50
 8007858:	4618      	mov	r0, r3
 800785a:	f002 f9dd 	bl	8009c18 <pvPortMalloc>
 800785e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d011      	beq.n	800788a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	3350      	adds	r3, #80	; 0x50
 800786e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007878:	79fa      	ldrb	r2, [r7, #7]
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4613      	mov	r3, r2
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 f805 	bl	8007894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800788a:	69bb      	ldr	r3, [r7, #24]
	}
 800788c:	4618      	mov	r0, r3
 800788e:	3720      	adds	r7, #32
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
 80078a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d103      	bne.n	80078b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	69ba      	ldr	r2, [r7, #24]
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e002      	b.n	80078b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	68ba      	ldr	r2, [r7, #8]
 80078c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80078c2:	2101      	movs	r1, #1
 80078c4:	69b8      	ldr	r0, [r7, #24]
 80078c6:	f7ff fecb 	bl	8007660 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80078d2:	bf00      	nop
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
	...

080078dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08e      	sub	sp, #56	; 0x38
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80078ea:	2300      	movs	r3, #0
 80078ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <xQueueGenericSend+0x32>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d103      	bne.n	800791c <xQueueGenericSend+0x40>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d101      	bne.n	8007920 <xQueueGenericSend+0x44>
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <xQueueGenericSend+0x46>
 8007920:	2300      	movs	r3, #0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <xQueueGenericSend+0x60>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b02      	cmp	r3, #2
 8007940:	d103      	bne.n	800794a <xQueueGenericSend+0x6e>
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	2b01      	cmp	r3, #1
 8007948:	d101      	bne.n	800794e <xQueueGenericSend+0x72>
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <xQueueGenericSend+0x74>
 800794e:	2300      	movs	r3, #0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10a      	bne.n	800796a <xQueueGenericSend+0x8e>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	623b      	str	r3, [r7, #32]
}
 8007966:	bf00      	nop
 8007968:	e7fe      	b.n	8007968 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800796a:	f001 fad9 	bl	8008f20 <xTaskGetSchedulerState>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <xQueueGenericSend+0x9e>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <xQueueGenericSend+0xa2>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <xQueueGenericSend+0xa4>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <xQueueGenericSend+0xbe>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	61fb      	str	r3, [r7, #28]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800799a:	f002 f81b 	bl	80099d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d302      	bcc.n	80079b0 <xQueueGenericSend+0xd4>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d129      	bne.n	8007a04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	68b9      	ldr	r1, [r7, #8]
 80079b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b6:	f000 fa8b 	bl	8007ed0 <prvCopyDataToQueue>
 80079ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d010      	beq.n	80079e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	3324      	adds	r3, #36	; 0x24
 80079c8:	4618      	mov	r0, r3
 80079ca:	f001 f8e7 	bl	8008b9c <xTaskRemoveFromEventList>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d013      	beq.n	80079fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80079d4:	4b3f      	ldr	r3, [pc, #252]	; (8007ad4 <xQueueGenericSend+0x1f8>)
 80079d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	e00a      	b.n	80079fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80079e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d007      	beq.n	80079fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80079ec:	4b39      	ldr	r3, [pc, #228]	; (8007ad4 <xQueueGenericSend+0x1f8>)
 80079ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80079fc:	f002 f81a 	bl	8009a34 <vPortExitCritical>
				return pdPASS;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e063      	b.n	8007acc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d103      	bne.n	8007a12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a0a:	f002 f813 	bl	8009a34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e05c      	b.n	8007acc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d106      	bne.n	8007a26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a18:	f107 0314 	add.w	r3, r7, #20
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 f921 	bl	8008c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a22:	2301      	movs	r3, #1
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a26:	f002 f805 	bl	8009a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a2a:	f000 fe8d 	bl	8008748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a2e:	f001 ffd1 	bl	80099d4 <vPortEnterCritical>
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a38:	b25b      	sxtb	r3, r3
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a3e:	d103      	bne.n	8007a48 <xQueueGenericSend+0x16c>
 8007a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a4e:	b25b      	sxtb	r3, r3
 8007a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a54:	d103      	bne.n	8007a5e <xQueueGenericSend+0x182>
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a5e:	f001 ffe9 	bl	8009a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a62:	1d3a      	adds	r2, r7, #4
 8007a64:	f107 0314 	add.w	r3, r7, #20
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 f910 	bl	8008c90 <xTaskCheckForTimeOut>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d124      	bne.n	8007ac0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a78:	f000 fb22 	bl	80080c0 <prvIsQueueFull>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d018      	beq.n	8007ab4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	3310      	adds	r3, #16
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f001 f836 	bl	8008afc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a92:	f000 faad 	bl	8007ff0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007a96:	f000 fe65 	bl	8008764 <xTaskResumeAll>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f47f af7c 	bne.w	800799a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007aa2:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <xQueueGenericSend+0x1f8>)
 8007aa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa8:	601a      	str	r2, [r3, #0]
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	e772      	b.n	800799a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ab6:	f000 fa9b 	bl	8007ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007aba:	f000 fe53 	bl	8008764 <xTaskResumeAll>
 8007abe:	e76c      	b.n	800799a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ac2:	f000 fa95 	bl	8007ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ac6:	f000 fe4d 	bl	8008764 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007aca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3738      	adds	r7, #56	; 0x38
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b090      	sub	sp, #64	; 0x40
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af4:	f383 8811 	msr	BASEPRI, r3
 8007af8:	f3bf 8f6f 	isb	sy
 8007afc:	f3bf 8f4f 	dsb	sy
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b02:	bf00      	nop
 8007b04:	e7fe      	b.n	8007b04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <xQueueGenericSendFromISR+0x3c>
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <xQueueGenericSendFromISR+0x40>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e000      	b.n	8007b1a <xQueueGenericSendFromISR+0x42>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d103      	bne.n	8007b42 <xQueueGenericSendFromISR+0x6a>
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <xQueueGenericSendFromISR+0x6e>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueGenericSendFromISR+0x70>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	623b      	str	r3, [r7, #32]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b62:	f002 f819 	bl	8009b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b66:	f3ef 8211 	mrs	r2, BASEPRI
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	61fa      	str	r2, [r7, #28]
 8007b7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d302      	bcc.n	8007b94 <xQueueGenericSendFromISR+0xbc>
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d12f      	bne.n	8007bf4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007baa:	f000 f991 	bl	8007ed0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bb6:	d112      	bne.n	8007bde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d016      	beq.n	8007bee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	3324      	adds	r3, #36	; 0x24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 ffe9 	bl	8008b9c <xTaskRemoveFromEventList>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00e      	beq.n	8007bee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00b      	beq.n	8007bee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e007      	b.n	8007bee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007bde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007be2:	3301      	adds	r3, #1
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	b25a      	sxtb	r2, r3
 8007be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007bf2:	e001      	b.n	8007bf8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3740      	adds	r7, #64	; 0x40
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b08c      	sub	sp, #48	; 0x30
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <xQueueReceive+0x30>
	__asm volatile
 8007c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c2e:	f383 8811 	msr	BASEPRI, r3
 8007c32:	f3bf 8f6f 	isb	sy
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	623b      	str	r3, [r7, #32]
}
 8007c3c:	bf00      	nop
 8007c3e:	e7fe      	b.n	8007c3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d103      	bne.n	8007c4e <xQueueReceive+0x3e>
 8007c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <xQueueReceive+0x42>
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e000      	b.n	8007c54 <xQueueReceive+0x44>
 8007c52:	2300      	movs	r3, #0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <xQueueReceive+0x5e>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	61fb      	str	r3, [r7, #28]
}
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c6e:	f001 f957 	bl	8008f20 <xTaskGetSchedulerState>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d102      	bne.n	8007c7e <xQueueReceive+0x6e>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d101      	bne.n	8007c82 <xQueueReceive+0x72>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <xQueueReceive+0x74>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10a      	bne.n	8007c9e <xQueueReceive+0x8e>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	f383 8811 	msr	BASEPRI, r3
 8007c90:	f3bf 8f6f 	isb	sy
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	61bb      	str	r3, [r7, #24]
}
 8007c9a:	bf00      	nop
 8007c9c:	e7fe      	b.n	8007c9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c9e:	f001 fe99 	bl	80099d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01f      	beq.n	8007cee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cae:	68b9      	ldr	r1, [r7, #8]
 8007cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cb2:	f000 f977 	bl	8007fa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	1e5a      	subs	r2, r3, #1
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00f      	beq.n	8007ce6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc8:	3310      	adds	r3, #16
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 ff66 	bl	8008b9c <xTaskRemoveFromEventList>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d007      	beq.n	8007ce6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007cd6:	4b3d      	ldr	r3, [pc, #244]	; (8007dcc <xQueueReceive+0x1bc>)
 8007cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cdc:	601a      	str	r2, [r3, #0]
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ce6:	f001 fea5 	bl	8009a34 <vPortExitCritical>
				return pdPASS;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e069      	b.n	8007dc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d103      	bne.n	8007cfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cf4:	f001 fe9e 	bl	8009a34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e062      	b.n	8007dc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d106      	bne.n	8007d10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d02:	f107 0310 	add.w	r3, r7, #16
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 ffac 	bl	8008c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d10:	f001 fe90 	bl	8009a34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d14:	f000 fd18 	bl	8008748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d18:	f001 fe5c 	bl	80099d4 <vPortEnterCritical>
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d22:	b25b      	sxtb	r3, r3
 8007d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d28:	d103      	bne.n	8007d32 <xQueueReceive+0x122>
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d38:	b25b      	sxtb	r3, r3
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d3e:	d103      	bne.n	8007d48 <xQueueReceive+0x138>
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d48:	f001 fe74 	bl	8009a34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d4c:	1d3a      	adds	r2, r7, #4
 8007d4e:	f107 0310 	add.w	r3, r7, #16
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 ff9b 	bl	8008c90 <xTaskCheckForTimeOut>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d123      	bne.n	8007da8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d62:	f000 f997 	bl	8008094 <prvIsQueueEmpty>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d017      	beq.n	8007d9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fec1 	bl	8008afc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d7c:	f000 f938 	bl	8007ff0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d80:	f000 fcf0 	bl	8008764 <xTaskResumeAll>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d189      	bne.n	8007c9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d8a:	4b10      	ldr	r3, [pc, #64]	; (8007dcc <xQueueReceive+0x1bc>)
 8007d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	e780      	b.n	8007c9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d9e:	f000 f927 	bl	8007ff0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007da2:	f000 fcdf 	bl	8008764 <xTaskResumeAll>
 8007da6:	e77a      	b.n	8007c9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007daa:	f000 f921 	bl	8007ff0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dae:	f000 fcd9 	bl	8008764 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007db4:	f000 f96e 	bl	8008094 <prvIsQueueEmpty>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f43f af6f 	beq.w	8007c9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3730      	adds	r7, #48	; 0x30
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b08e      	sub	sp, #56	; 0x38
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	623b      	str	r3, [r7, #32]
}
 8007df8:	bf00      	nop
 8007dfa:	e7fe      	b.n	8007dfa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d103      	bne.n	8007e0a <xQueueReceiveFromISR+0x3a>
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d101      	bne.n	8007e0e <xQueueReceiveFromISR+0x3e>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e000      	b.n	8007e10 <xQueueReceiveFromISR+0x40>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10a      	bne.n	8007e2a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e18:	f383 8811 	msr	BASEPRI, r3
 8007e1c:	f3bf 8f6f 	isb	sy
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	61fb      	str	r3, [r7, #28]
}
 8007e26:	bf00      	nop
 8007e28:	e7fe      	b.n	8007e28 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e2a:	f001 feb5 	bl	8009b98 <vPortValidateInterruptPriority>
	__asm volatile
 8007e2e:	f3ef 8211 	mrs	r2, BASEPRI
 8007e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	61ba      	str	r2, [r7, #24]
 8007e44:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e46:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d02f      	beq.n	8007eb6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e60:	68b9      	ldr	r1, [r7, #8]
 8007e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e64:	f000 f89e 	bl	8007fa4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6a:	1e5a      	subs	r2, r3, #1
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007e70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e78:	d112      	bne.n	8007ea0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d016      	beq.n	8007eb0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	3310      	adds	r3, #16
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 fe88 	bl	8008b9c <xTaskRemoveFromEventList>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00e      	beq.n	8007eb0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	e007      	b.n	8007eb0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	b25a      	sxtb	r2, r3
 8007eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8007eb4:	e001      	b.n	8007eba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f383 8811 	msr	BASEPRI, r3
}
 8007ec4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3738      	adds	r7, #56	; 0x38
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10d      	bne.n	8007f0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d14d      	bne.n	8007f92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f001 f82e 	bl	8008f5c <xTaskPriorityDisinherit>
 8007f00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	e043      	b.n	8007f92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d119      	bne.n	8007f44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6858      	ldr	r0, [r3, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f18:	461a      	mov	r2, r3
 8007f1a:	68b9      	ldr	r1, [r7, #8]
 8007f1c:	f002 f8a2 	bl	800a064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	441a      	add	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d32b      	bcc.n	8007f92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	605a      	str	r2, [r3, #4]
 8007f42:	e026      	b.n	8007f92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68d8      	ldr	r0, [r3, #12]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	68b9      	ldr	r1, [r7, #8]
 8007f50:	f002 f888 	bl	800a064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	425b      	negs	r3, r3
 8007f5e:	441a      	add	r2, r3
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68da      	ldr	r2, [r3, #12]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d207      	bcs.n	8007f80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689a      	ldr	r2, [r3, #8]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	425b      	negs	r3, r3
 8007f7a:	441a      	add	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d105      	bne.n	8007f92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	1c5a      	adds	r2, r3, #1
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f9a:	697b      	ldr	r3, [r7, #20]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3718      	adds	r7, #24
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d018      	beq.n	8007fe8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbe:	441a      	add	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	68da      	ldr	r2, [r3, #12]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d303      	bcc.n	8007fd8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68d9      	ldr	r1, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	6838      	ldr	r0, [r7, #0]
 8007fe4:	f002 f83e 	bl	800a064 <memcpy>
	}
}
 8007fe8:	bf00      	nop
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ff8:	f001 fcec 	bl	80099d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008002:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008004:	e011      	b.n	800802a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	2b00      	cmp	r3, #0
 800800c:	d012      	beq.n	8008034 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3324      	adds	r3, #36	; 0x24
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fdc2 	bl	8008b9c <xTaskRemoveFromEventList>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800801e:	f000 fe99 	bl	8008d54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	3b01      	subs	r3, #1
 8008026:	b2db      	uxtb	r3, r3
 8008028:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800802a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	dce9      	bgt.n	8008006 <prvUnlockQueue+0x16>
 8008032:	e000      	b.n	8008036 <prvUnlockQueue+0x46>
					break;
 8008034:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	22ff      	movs	r2, #255	; 0xff
 800803a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800803e:	f001 fcf9 	bl	8009a34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008042:	f001 fcc7 	bl	80099d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800804c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800804e:	e011      	b.n	8008074 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d012      	beq.n	800807e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	3310      	adds	r3, #16
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fd9d 	bl	8008b9c <xTaskRemoveFromEventList>
 8008062:	4603      	mov	r3, r0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d001      	beq.n	800806c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008068:	f000 fe74 	bl	8008d54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	3b01      	subs	r3, #1
 8008070:	b2db      	uxtb	r3, r3
 8008072:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008078:	2b00      	cmp	r3, #0
 800807a:	dce9      	bgt.n	8008050 <prvUnlockQueue+0x60>
 800807c:	e000      	b.n	8008080 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800807e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	22ff      	movs	r2, #255	; 0xff
 8008084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008088:	f001 fcd4 	bl	8009a34 <vPortExitCritical>
}
 800808c:	bf00      	nop
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800809c:	f001 fc9a 	bl	80099d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d102      	bne.n	80080ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	e001      	b.n	80080b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080b2:	f001 fcbf 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 80080b6:	68fb      	ldr	r3, [r7, #12]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080c8:	f001 fc84 	bl	80099d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d102      	bne.n	80080de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080d8:	2301      	movs	r3, #1
 80080da:	60fb      	str	r3, [r7, #12]
 80080dc:	e001      	b.n	80080e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080de:	2300      	movs	r3, #0
 80080e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080e2:	f001 fca7 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 80080e6:	68fb      	ldr	r3, [r7, #12]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	e014      	b.n	800812a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008100:	4a0f      	ldr	r2, [pc, #60]	; (8008140 <vQueueAddToRegistry+0x50>)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10b      	bne.n	8008124 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800810c:	490c      	ldr	r1, [pc, #48]	; (8008140 <vQueueAddToRegistry+0x50>)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008116:	4a0a      	ldr	r2, [pc, #40]	; (8008140 <vQueueAddToRegistry+0x50>)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008122:	e006      	b.n	8008132 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2b07      	cmp	r3, #7
 800812e:	d9e7      	bls.n	8008100 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	3714      	adds	r7, #20
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20004e28 	.word	0x20004e28

08008144 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008144:	b580      	push	{r7, lr}
 8008146:	b086      	sub	sp, #24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008154:	f001 fc3e 	bl	80099d4 <vPortEnterCritical>
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800815e:	b25b      	sxtb	r3, r3
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008164:	d103      	bne.n	800816e <vQueueWaitForMessageRestricted+0x2a>
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008174:	b25b      	sxtb	r3, r3
 8008176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800817a:	d103      	bne.n	8008184 <vQueueWaitForMessageRestricted+0x40>
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2200      	movs	r2, #0
 8008180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008184:	f001 fc56 	bl	8009a34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	2b00      	cmp	r3, #0
 800818e:	d106      	bne.n	800819e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	3324      	adds	r3, #36	; 0x24
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	68b9      	ldr	r1, [r7, #8]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fcd3 	bl	8008b44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800819e:	6978      	ldr	r0, [r7, #20]
 80081a0:	f7ff ff26 	bl	8007ff0 <prvUnlockQueue>
	}
 80081a4:	bf00      	nop
 80081a6:	3718      	adds	r7, #24
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	; 0x38
 80081b0:	af04      	add	r7, sp, #16
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	623b      	str	r3, [r7, #32]
}
 80081d2:	bf00      	nop
 80081d4:	e7fe      	b.n	80081d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10a      	bne.n	80081f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	61fb      	str	r3, [r7, #28]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081f2:	23bc      	movs	r3, #188	; 0xbc
 80081f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	2bbc      	cmp	r3, #188	; 0xbc
 80081fa:	d00a      	beq.n	8008212 <xTaskCreateStatic+0x66>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	61bb      	str	r3, [r7, #24]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008212:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	2b00      	cmp	r3, #0
 8008218:	d01e      	beq.n	8008258 <xTaskCreateStatic+0xac>
 800821a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01b      	beq.n	8008258 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008228:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822c:	2202      	movs	r2, #2
 800822e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008232:	2300      	movs	r3, #0
 8008234:	9303      	str	r3, [sp, #12]
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	9302      	str	r3, [sp, #8]
 800823a:	f107 0314 	add.w	r3, r7, #20
 800823e:	9301      	str	r3, [sp, #4]
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f000 f850 	bl	80082f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008252:	f000 f8f3 	bl	800843c <prvAddNewTaskToReadyList>
 8008256:	e001      	b.n	800825c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008258:	2300      	movs	r3, #0
 800825a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800825c:	697b      	ldr	r3, [r7, #20]
	}
 800825e:	4618      	mov	r0, r3
 8008260:	3728      	adds	r7, #40	; 0x28
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008266:	b580      	push	{r7, lr}
 8008268:	b08c      	sub	sp, #48	; 0x30
 800826a:	af04      	add	r7, sp, #16
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	603b      	str	r3, [r7, #0]
 8008272:	4613      	mov	r3, r2
 8008274:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008276:	88fb      	ldrh	r3, [r7, #6]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	4618      	mov	r0, r3
 800827c:	f001 fccc 	bl	8009c18 <pvPortMalloc>
 8008280:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00e      	beq.n	80082a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008288:	20bc      	movs	r0, #188	; 0xbc
 800828a:	f001 fcc5 	bl	8009c18 <pvPortMalloc>
 800828e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	631a      	str	r2, [r3, #48]	; 0x30
 800829c:	e005      	b.n	80082aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800829e:	6978      	ldr	r0, [r7, #20]
 80082a0:	f001 fd86 	bl	8009db0 <vPortFree>
 80082a4:	e001      	b.n	80082aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d017      	beq.n	80082e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	2200      	movs	r2, #0
 80082b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082b8:	88fa      	ldrh	r2, [r7, #6]
 80082ba:	2300      	movs	r3, #0
 80082bc:	9303      	str	r3, [sp, #12]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	9302      	str	r3, [sp, #8]
 80082c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68b9      	ldr	r1, [r7, #8]
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 f80e 	bl	80082f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082d4:	69f8      	ldr	r0, [r7, #28]
 80082d6:	f000 f8b1 	bl	800843c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082da:	2301      	movs	r3, #1
 80082dc:	61bb      	str	r3, [r7, #24]
 80082de:	e002      	b.n	80082e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082e6:	69bb      	ldr	r3, [r7, #24]
	}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
 80082fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	461a      	mov	r2, r3
 8008308:	21a5      	movs	r1, #165	; 0xa5
 800830a:	f001 feb9 	bl	800a080 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800830e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008318:	3b01      	subs	r3, #1
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	f023 0307 	bic.w	r3, r3, #7
 8008326:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f003 0307 	and.w	r3, r3, #7
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00a      	beq.n	8008348 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008336:	f383 8811 	msr	BASEPRI, r3
 800833a:	f3bf 8f6f 	isb	sy
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	617b      	str	r3, [r7, #20]
}
 8008344:	bf00      	nop
 8008346:	e7fe      	b.n	8008346 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d01f      	beq.n	800838e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e012      	b.n	800837a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	4413      	add	r3, r2
 800835a:	7819      	ldrb	r1, [r3, #0]
 800835c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	4413      	add	r3, r2
 8008362:	3334      	adds	r3, #52	; 0x34
 8008364:	460a      	mov	r2, r1
 8008366:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	4413      	add	r3, r2
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	3301      	adds	r3, #1
 8008378:	61fb      	str	r3, [r7, #28]
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	2b0f      	cmp	r3, #15
 800837e:	d9e9      	bls.n	8008354 <prvInitialiseNewTask+0x64>
 8008380:	e000      	b.n	8008384 <prvInitialiseNewTask+0x94>
			{
				break;
 8008382:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800838c:	e003      	b.n	8008396 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008390:	2200      	movs	r2, #0
 8008392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	2b37      	cmp	r3, #55	; 0x37
 800839a:	d901      	bls.n	80083a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800839c:	2337      	movs	r3, #55	; 0x37
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	2200      	movs	r2, #0
 80083b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	3304      	adds	r3, #4
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff f8be 	bl	8007538 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083be:	3318      	adds	r3, #24
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff f8b9 	bl	8007538 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	3354      	adds	r3, #84	; 0x54
 80083f0:	2260      	movs	r2, #96	; 0x60
 80083f2:	2100      	movs	r1, #0
 80083f4:	4618      	mov	r0, r3
 80083f6:	f001 fe43 	bl	800a080 <memset>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	4a0c      	ldr	r2, [pc, #48]	; (8008430 <prvInitialiseNewTask+0x140>)
 80083fe:	659a      	str	r2, [r3, #88]	; 0x58
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	4a0c      	ldr	r2, [pc, #48]	; (8008434 <prvInitialiseNewTask+0x144>)
 8008404:	65da      	str	r2, [r3, #92]	; 0x5c
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	4a0b      	ldr	r2, [pc, #44]	; (8008438 <prvInitialiseNewTask+0x148>)
 800840a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	68f9      	ldr	r1, [r7, #12]
 8008410:	69b8      	ldr	r0, [r7, #24]
 8008412:	f001 f9b3 	bl	800977c <pxPortInitialiseStack>
 8008416:	4602      	mov	r2, r0
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008426:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008428:	bf00      	nop
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}
 8008430:	0800b9d4 	.word	0x0800b9d4
 8008434:	0800b9f4 	.word	0x0800b9f4
 8008438:	0800b9b4 	.word	0x0800b9b4

0800843c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008444:	f001 fac6 	bl	80099d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008448:	4b2d      	ldr	r3, [pc, #180]	; (8008500 <prvAddNewTaskToReadyList+0xc4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3301      	adds	r3, #1
 800844e:	4a2c      	ldr	r2, [pc, #176]	; (8008500 <prvAddNewTaskToReadyList+0xc4>)
 8008450:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008452:	4b2c      	ldr	r3, [pc, #176]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d109      	bne.n	800846e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800845a:	4a2a      	ldr	r2, [pc, #168]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008460:	4b27      	ldr	r3, [pc, #156]	; (8008500 <prvAddNewTaskToReadyList+0xc4>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d110      	bne.n	800848a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008468:	f000 fc98 	bl	8008d9c <prvInitialiseTaskLists>
 800846c:	e00d      	b.n	800848a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800846e:	4b26      	ldr	r3, [pc, #152]	; (8008508 <prvAddNewTaskToReadyList+0xcc>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008476:	4b23      	ldr	r3, [pc, #140]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	429a      	cmp	r2, r3
 8008482:	d802      	bhi.n	800848a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008484:	4a1f      	ldr	r2, [pc, #124]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800848a:	4b20      	ldr	r3, [pc, #128]	; (800850c <prvAddNewTaskToReadyList+0xd0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3301      	adds	r3, #1
 8008490:	4a1e      	ldr	r2, [pc, #120]	; (800850c <prvAddNewTaskToReadyList+0xd0>)
 8008492:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008494:	4b1d      	ldr	r3, [pc, #116]	; (800850c <prvAddNewTaskToReadyList+0xd0>)
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a0:	4b1b      	ldr	r3, [pc, #108]	; (8008510 <prvAddNewTaskToReadyList+0xd4>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d903      	bls.n	80084b0 <prvAddNewTaskToReadyList+0x74>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a18      	ldr	r2, [pc, #96]	; (8008510 <prvAddNewTaskToReadyList+0xd4>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a15      	ldr	r2, [pc, #84]	; (8008514 <prvAddNewTaskToReadyList+0xd8>)
 80084be:	441a      	add	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7ff f843 	bl	8007552 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084cc:	f001 fab2 	bl	8009a34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084d0:	4b0d      	ldr	r3, [pc, #52]	; (8008508 <prvAddNewTaskToReadyList+0xcc>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00e      	beq.n	80084f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084d8:	4b0a      	ldr	r3, [pc, #40]	; (8008504 <prvAddNewTaskToReadyList+0xc8>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d207      	bcs.n	80084f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084e6:	4b0c      	ldr	r3, [pc, #48]	; (8008518 <prvAddNewTaskToReadyList+0xdc>)
 80084e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084f6:	bf00      	nop
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000d00 	.word	0x20000d00
 8008504:	2000082c 	.word	0x2000082c
 8008508:	20000d0c 	.word	0x20000d0c
 800850c:	20000d1c 	.word	0x20000d1c
 8008510:	20000d08 	.word	0x20000d08
 8008514:	20000830 	.word	0x20000830
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008524:	f001 fa56 	bl	80099d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <vTaskDelete+0x18>
 800852e:	4b2c      	ldr	r3, [pc, #176]	; (80085e0 <vTaskDelete+0xc4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	e000      	b.n	8008536 <vTaskDelete+0x1a>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3304      	adds	r3, #4
 800853c:	4618      	mov	r0, r3
 800853e:	f7ff f865 	bl	800760c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	3318      	adds	r3, #24
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff f85c 	bl	800760c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008554:	4b23      	ldr	r3, [pc, #140]	; (80085e4 <vTaskDelete+0xc8>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	4a22      	ldr	r2, [pc, #136]	; (80085e4 <vTaskDelete+0xc8>)
 800855c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800855e:	4b20      	ldr	r3, [pc, #128]	; (80085e0 <vTaskDelete+0xc4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	429a      	cmp	r2, r3
 8008566:	d10b      	bne.n	8008580 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	3304      	adds	r3, #4
 800856c:	4619      	mov	r1, r3
 800856e:	481e      	ldr	r0, [pc, #120]	; (80085e8 <vTaskDelete+0xcc>)
 8008570:	f7fe ffef 	bl	8007552 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008574:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <vTaskDelete+0xd0>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3301      	adds	r3, #1
 800857a:	4a1c      	ldr	r2, [pc, #112]	; (80085ec <vTaskDelete+0xd0>)
 800857c:	6013      	str	r3, [r2, #0]
 800857e:	e009      	b.n	8008594 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008580:	4b1b      	ldr	r3, [pc, #108]	; (80085f0 <vTaskDelete+0xd4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3b01      	subs	r3, #1
 8008586:	4a1a      	ldr	r2, [pc, #104]	; (80085f0 <vTaskDelete+0xd4>)
 8008588:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 fc74 	bl	8008e78 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008590:	f000 fca6 	bl	8008ee0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8008594:	f001 fa4e 	bl	8009a34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008598:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <vTaskDelete+0xd8>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01b      	beq.n	80085d8 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80085a0:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <vTaskDelete+0xc4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d116      	bne.n	80085d8 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80085aa:	4b13      	ldr	r3, [pc, #76]	; (80085f8 <vTaskDelete+0xdc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <vTaskDelete+0xac>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	60bb      	str	r3, [r7, #8]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80085c8:	4b0c      	ldr	r3, [pc, #48]	; (80085fc <vTaskDelete+0xe0>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085d8:	bf00      	nop
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	2000082c 	.word	0x2000082c
 80085e4:	20000d1c 	.word	0x20000d1c
 80085e8:	20000cd4 	.word	0x20000cd4
 80085ec:	20000ce8 	.word	0x20000ce8
 80085f0:	20000d00 	.word	0x20000d00
 80085f4:	20000d0c 	.word	0x20000d0c
 80085f8:	20000d28 	.word	0x20000d28
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d017      	beq.n	8008642 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008612:	4b13      	ldr	r3, [pc, #76]	; (8008660 <vTaskDelay+0x60>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <vTaskDelay+0x30>
	__asm volatile
 800861a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861e:	f383 8811 	msr	BASEPRI, r3
 8008622:	f3bf 8f6f 	isb	sy
 8008626:	f3bf 8f4f 	dsb	sy
 800862a:	60bb      	str	r3, [r7, #8]
}
 800862c:	bf00      	nop
 800862e:	e7fe      	b.n	800862e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008630:	f000 f88a 	bl	8008748 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008634:	2100      	movs	r1, #0
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fcfe 	bl	8009038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800863c:	f000 f892 	bl	8008764 <xTaskResumeAll>
 8008640:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d107      	bne.n	8008658 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008648:	4b06      	ldr	r3, [pc, #24]	; (8008664 <vTaskDelay+0x64>)
 800864a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20000d28 	.word	0x20000d28
 8008664:	e000ed04 	.word	0xe000ed04

08008668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008676:	463a      	mov	r2, r7
 8008678:	1d39      	adds	r1, r7, #4
 800867a:	f107 0308 	add.w	r3, r7, #8
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe ff06 	bl	8007490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	9202      	str	r2, [sp, #8]
 800868c:	9301      	str	r3, [sp, #4]
 800868e:	2300      	movs	r3, #0
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	2300      	movs	r3, #0
 8008694:	460a      	mov	r2, r1
 8008696:	4924      	ldr	r1, [pc, #144]	; (8008728 <vTaskStartScheduler+0xc0>)
 8008698:	4824      	ldr	r0, [pc, #144]	; (800872c <vTaskStartScheduler+0xc4>)
 800869a:	f7ff fd87 	bl	80081ac <xTaskCreateStatic>
 800869e:	4603      	mov	r3, r0
 80086a0:	4a23      	ldr	r2, [pc, #140]	; (8008730 <vTaskStartScheduler+0xc8>)
 80086a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086a4:	4b22      	ldr	r3, [pc, #136]	; (8008730 <vTaskStartScheduler+0xc8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d002      	beq.n	80086b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086ac:	2301      	movs	r3, #1
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	e001      	b.n	80086b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086b2:	2300      	movs	r3, #0
 80086b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d102      	bne.n	80086c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086bc:	f000 fd10 	bl	80090e0 <xTimerCreateTimerTask>
 80086c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d11b      	bne.n	8008700 <vTaskStartScheduler+0x98>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	613b      	str	r3, [r7, #16]
}
 80086da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086dc:	4b15      	ldr	r3, [pc, #84]	; (8008734 <vTaskStartScheduler+0xcc>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3354      	adds	r3, #84	; 0x54
 80086e2:	4a15      	ldr	r2, [pc, #84]	; (8008738 <vTaskStartScheduler+0xd0>)
 80086e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086e6:	4b15      	ldr	r3, [pc, #84]	; (800873c <vTaskStartScheduler+0xd4>)
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086ee:	4b14      	ldr	r3, [pc, #80]	; (8008740 <vTaskStartScheduler+0xd8>)
 80086f0:	2201      	movs	r2, #1
 80086f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086f4:	4b13      	ldr	r3, [pc, #76]	; (8008744 <vTaskStartScheduler+0xdc>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086fa:	f001 f8c9 	bl	8009890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086fe:	e00e      	b.n	800871e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008706:	d10a      	bne.n	800871e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800870c:	f383 8811 	msr	BASEPRI, r3
 8008710:	f3bf 8f6f 	isb	sy
 8008714:	f3bf 8f4f 	dsb	sy
 8008718:	60fb      	str	r3, [r7, #12]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <vTaskStartScheduler+0xb4>
}
 800871e:	bf00      	nop
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	0800a3a0 	.word	0x0800a3a0
 800872c:	08008d6d 	.word	0x08008d6d
 8008730:	20000d24 	.word	0x20000d24
 8008734:	2000082c 	.word	0x2000082c
 8008738:	20000020 	.word	0x20000020
 800873c:	20000d20 	.word	0x20000d20
 8008740:	20000d0c 	.word	0x20000d0c
 8008744:	20000d04 	.word	0x20000d04

08008748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008748:	b480      	push	{r7}
 800874a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800874c:	4b04      	ldr	r3, [pc, #16]	; (8008760 <vTaskSuspendAll+0x18>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	3301      	adds	r3, #1
 8008752:	4a03      	ldr	r2, [pc, #12]	; (8008760 <vTaskSuspendAll+0x18>)
 8008754:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008756:	bf00      	nop
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	20000d28 	.word	0x20000d28

08008764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800876e:	2300      	movs	r3, #0
 8008770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008772:	4b42      	ldr	r3, [pc, #264]	; (800887c <xTaskResumeAll+0x118>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <xTaskResumeAll+0x2c>
	__asm volatile
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	603b      	str	r3, [r7, #0]
}
 800878c:	bf00      	nop
 800878e:	e7fe      	b.n	800878e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008790:	f001 f920 	bl	80099d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008794:	4b39      	ldr	r3, [pc, #228]	; (800887c <xTaskResumeAll+0x118>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3b01      	subs	r3, #1
 800879a:	4a38      	ldr	r2, [pc, #224]	; (800887c <xTaskResumeAll+0x118>)
 800879c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800879e:	4b37      	ldr	r3, [pc, #220]	; (800887c <xTaskResumeAll+0x118>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d162      	bne.n	800886c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087a6:	4b36      	ldr	r3, [pc, #216]	; (8008880 <xTaskResumeAll+0x11c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d05e      	beq.n	800886c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087ae:	e02f      	b.n	8008810 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b0:	4b34      	ldr	r3, [pc, #208]	; (8008884 <xTaskResumeAll+0x120>)
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	3318      	adds	r3, #24
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fe ff25 	bl	800760c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe ff20 	bl	800760c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	4b2d      	ldr	r3, [pc, #180]	; (8008888 <xTaskResumeAll+0x124>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d903      	bls.n	80087e0 <xTaskResumeAll+0x7c>
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087dc:	4a2a      	ldr	r2, [pc, #168]	; (8008888 <xTaskResumeAll+0x124>)
 80087de:	6013      	str	r3, [r2, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	4a27      	ldr	r2, [pc, #156]	; (800888c <xTaskResumeAll+0x128>)
 80087ee:	441a      	add	r2, r3
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3304      	adds	r3, #4
 80087f4:	4619      	mov	r1, r3
 80087f6:	4610      	mov	r0, r2
 80087f8:	f7fe feab 	bl	8007552 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008800:	4b23      	ldr	r3, [pc, #140]	; (8008890 <xTaskResumeAll+0x12c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800880a:	4b22      	ldr	r3, [pc, #136]	; (8008894 <xTaskResumeAll+0x130>)
 800880c:	2201      	movs	r2, #1
 800880e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008810:	4b1c      	ldr	r3, [pc, #112]	; (8008884 <xTaskResumeAll+0x120>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1cb      	bne.n	80087b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d001      	beq.n	8008822 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800881e:	f000 fb5f 	bl	8008ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008822:	4b1d      	ldr	r3, [pc, #116]	; (8008898 <xTaskResumeAll+0x134>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d010      	beq.n	8008850 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800882e:	f000 f847 	bl	80088c0 <xTaskIncrementTick>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d002      	beq.n	800883e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008838:	4b16      	ldr	r3, [pc, #88]	; (8008894 <xTaskResumeAll+0x130>)
 800883a:	2201      	movs	r2, #1
 800883c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	3b01      	subs	r3, #1
 8008842:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1f1      	bne.n	800882e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800884a:	4b13      	ldr	r3, [pc, #76]	; (8008898 <xTaskResumeAll+0x134>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008850:	4b10      	ldr	r3, [pc, #64]	; (8008894 <xTaskResumeAll+0x130>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d009      	beq.n	800886c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800885c:	4b0f      	ldr	r3, [pc, #60]	; (800889c <xTaskResumeAll+0x138>)
 800885e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	f3bf 8f4f 	dsb	sy
 8008868:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800886c:	f001 f8e2 	bl	8009a34 <vPortExitCritical>

	return xAlreadyYielded;
 8008870:	68bb      	ldr	r3, [r7, #8]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	20000d28 	.word	0x20000d28
 8008880:	20000d00 	.word	0x20000d00
 8008884:	20000cc0 	.word	0x20000cc0
 8008888:	20000d08 	.word	0x20000d08
 800888c:	20000830 	.word	0x20000830
 8008890:	2000082c 	.word	0x2000082c
 8008894:	20000d14 	.word	0x20000d14
 8008898:	20000d10 	.word	0x20000d10
 800889c:	e000ed04 	.word	0xe000ed04

080088a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088a6:	4b05      	ldr	r3, [pc, #20]	; (80088bc <xTaskGetTickCount+0x1c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088ac:	687b      	ldr	r3, [r7, #4]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	20000d04 	.word	0x20000d04

080088c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088c6:	2300      	movs	r3, #0
 80088c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088ca:	4b4f      	ldr	r3, [pc, #316]	; (8008a08 <xTaskIncrementTick+0x148>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	f040 808f 	bne.w	80089f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088d4:	4b4d      	ldr	r3, [pc, #308]	; (8008a0c <xTaskIncrementTick+0x14c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	3301      	adds	r3, #1
 80088da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088dc:	4a4b      	ldr	r2, [pc, #300]	; (8008a0c <xTaskIncrementTick+0x14c>)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d120      	bne.n	800892a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80088e8:	4b49      	ldr	r3, [pc, #292]	; (8008a10 <xTaskIncrementTick+0x150>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <xTaskIncrementTick+0x48>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f6:	f383 8811 	msr	BASEPRI, r3
 80088fa:	f3bf 8f6f 	isb	sy
 80088fe:	f3bf 8f4f 	dsb	sy
 8008902:	603b      	str	r3, [r7, #0]
}
 8008904:	bf00      	nop
 8008906:	e7fe      	b.n	8008906 <xTaskIncrementTick+0x46>
 8008908:	4b41      	ldr	r3, [pc, #260]	; (8008a10 <xTaskIncrementTick+0x150>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	4b41      	ldr	r3, [pc, #260]	; (8008a14 <xTaskIncrementTick+0x154>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a3f      	ldr	r2, [pc, #252]	; (8008a10 <xTaskIncrementTick+0x150>)
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	4a3f      	ldr	r2, [pc, #252]	; (8008a14 <xTaskIncrementTick+0x154>)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	4b3e      	ldr	r3, [pc, #248]	; (8008a18 <xTaskIncrementTick+0x158>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	3301      	adds	r3, #1
 8008922:	4a3d      	ldr	r2, [pc, #244]	; (8008a18 <xTaskIncrementTick+0x158>)
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	f000 fadb 	bl	8008ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800892a:	4b3c      	ldr	r3, [pc, #240]	; (8008a1c <xTaskIncrementTick+0x15c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	693a      	ldr	r2, [r7, #16]
 8008930:	429a      	cmp	r2, r3
 8008932:	d349      	bcc.n	80089c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008934:	4b36      	ldr	r3, [pc, #216]	; (8008a10 <xTaskIncrementTick+0x150>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d104      	bne.n	8008948 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800893e:	4b37      	ldr	r3, [pc, #220]	; (8008a1c <xTaskIncrementTick+0x15c>)
 8008940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008944:	601a      	str	r2, [r3, #0]
					break;
 8008946:	e03f      	b.n	80089c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008948:	4b31      	ldr	r3, [pc, #196]	; (8008a10 <xTaskIncrementTick+0x150>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	429a      	cmp	r2, r3
 800895e:	d203      	bcs.n	8008968 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008960:	4a2e      	ldr	r2, [pc, #184]	; (8008a1c <xTaskIncrementTick+0x15c>)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008966:	e02f      	b.n	80089c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	3304      	adds	r3, #4
 800896c:	4618      	mov	r0, r3
 800896e:	f7fe fe4d 	bl	800760c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	2b00      	cmp	r3, #0
 8008978:	d004      	beq.n	8008984 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	3318      	adds	r3, #24
 800897e:	4618      	mov	r0, r3
 8008980:	f7fe fe44 	bl	800760c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008988:	4b25      	ldr	r3, [pc, #148]	; (8008a20 <xTaskIncrementTick+0x160>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d903      	bls.n	8008998 <xTaskIncrementTick+0xd8>
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <xTaskIncrementTick+0x160>)
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4a1f      	ldr	r2, [pc, #124]	; (8008a24 <xTaskIncrementTick+0x164>)
 80089a6:	441a      	add	r2, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7fe fdcf 	bl	8007552 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	4b1b      	ldr	r3, [pc, #108]	; (8008a28 <xTaskIncrementTick+0x168>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089be:	429a      	cmp	r2, r3
 80089c0:	d3b8      	bcc.n	8008934 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089c2:	2301      	movs	r3, #1
 80089c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089c6:	e7b5      	b.n	8008934 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089c8:	4b17      	ldr	r3, [pc, #92]	; (8008a28 <xTaskIncrementTick+0x168>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ce:	4915      	ldr	r1, [pc, #84]	; (8008a24 <xTaskIncrementTick+0x164>)
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	440b      	add	r3, r1
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d901      	bls.n	80089e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80089e0:	2301      	movs	r3, #1
 80089e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80089e4:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <xTaskIncrementTick+0x16c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d007      	beq.n	80089fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80089ec:	2301      	movs	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	e004      	b.n	80089fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80089f2:	4b0f      	ldr	r3, [pc, #60]	; (8008a30 <xTaskIncrementTick+0x170>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	3301      	adds	r3, #1
 80089f8:	4a0d      	ldr	r2, [pc, #52]	; (8008a30 <xTaskIncrementTick+0x170>)
 80089fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80089fc:	697b      	ldr	r3, [r7, #20]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3718      	adds	r7, #24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20000d28 	.word	0x20000d28
 8008a0c:	20000d04 	.word	0x20000d04
 8008a10:	20000cb8 	.word	0x20000cb8
 8008a14:	20000cbc 	.word	0x20000cbc
 8008a18:	20000d18 	.word	0x20000d18
 8008a1c:	20000d20 	.word	0x20000d20
 8008a20:	20000d08 	.word	0x20000d08
 8008a24:	20000830 	.word	0x20000830
 8008a28:	2000082c 	.word	0x2000082c
 8008a2c:	20000d14 	.word	0x20000d14
 8008a30:	20000d10 	.word	0x20000d10

08008a34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a3a:	4b2a      	ldr	r3, [pc, #168]	; (8008ae4 <vTaskSwitchContext+0xb0>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a42:	4b29      	ldr	r3, [pc, #164]	; (8008ae8 <vTaskSwitchContext+0xb4>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a48:	e046      	b.n	8008ad8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008a4a:	4b27      	ldr	r3, [pc, #156]	; (8008ae8 <vTaskSwitchContext+0xb4>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a50:	4b26      	ldr	r3, [pc, #152]	; (8008aec <vTaskSwitchContext+0xb8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	e010      	b.n	8008a7a <vTaskSwitchContext+0x46>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10a      	bne.n	8008a74 <vTaskSwitchContext+0x40>
	__asm volatile
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	607b      	str	r3, [r7, #4]
}
 8008a70:	bf00      	nop
 8008a72:	e7fe      	b.n	8008a72 <vTaskSwitchContext+0x3e>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	491d      	ldr	r1, [pc, #116]	; (8008af0 <vTaskSwitchContext+0xbc>)
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	440b      	add	r3, r1
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d0e4      	beq.n	8008a58 <vTaskSwitchContext+0x24>
 8008a8e:	68fa      	ldr	r2, [r7, #12]
 8008a90:	4613      	mov	r3, r2
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	4413      	add	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4a15      	ldr	r2, [pc, #84]	; (8008af0 <vTaskSwitchContext+0xbc>)
 8008a9a:	4413      	add	r3, r2
 8008a9c:	60bb      	str	r3, [r7, #8]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	605a      	str	r2, [r3, #4]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	3308      	adds	r3, #8
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d104      	bne.n	8008abe <vTaskSwitchContext+0x8a>
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	685a      	ldr	r2, [r3, #4]
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	605a      	str	r2, [r3, #4]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	4a0b      	ldr	r2, [pc, #44]	; (8008af4 <vTaskSwitchContext+0xc0>)
 8008ac6:	6013      	str	r3, [r2, #0]
 8008ac8:	4a08      	ldr	r2, [pc, #32]	; (8008aec <vTaskSwitchContext+0xb8>)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ace:	4b09      	ldr	r3, [pc, #36]	; (8008af4 <vTaskSwitchContext+0xc0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3354      	adds	r3, #84	; 0x54
 8008ad4:	4a08      	ldr	r2, [pc, #32]	; (8008af8 <vTaskSwitchContext+0xc4>)
 8008ad6:	6013      	str	r3, [r2, #0]
}
 8008ad8:	bf00      	nop
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr
 8008ae4:	20000d28 	.word	0x20000d28
 8008ae8:	20000d14 	.word	0x20000d14
 8008aec:	20000d08 	.word	0x20000d08
 8008af0:	20000830 	.word	0x20000830
 8008af4:	2000082c 	.word	0x2000082c
 8008af8:	20000020 	.word	0x20000020

08008afc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b10:	f383 8811 	msr	BASEPRI, r3
 8008b14:	f3bf 8f6f 	isb	sy
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	60fb      	str	r3, [r7, #12]
}
 8008b1e:	bf00      	nop
 8008b20:	e7fe      	b.n	8008b20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b22:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <vTaskPlaceOnEventList+0x44>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3318      	adds	r3, #24
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe fd35 	bl	800759a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b30:	2101      	movs	r1, #1
 8008b32:	6838      	ldr	r0, [r7, #0]
 8008b34:	f000 fa80 	bl	8009038 <prvAddCurrentTaskToDelayedList>
}
 8008b38:	bf00      	nop
 8008b3a:	3710      	adds	r7, #16
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	2000082c 	.word	0x2000082c

08008b44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	60f8      	str	r0, [r7, #12]
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10a      	bne.n	8008b6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	617b      	str	r3, [r7, #20]
}
 8008b68:	bf00      	nop
 8008b6a:	e7fe      	b.n	8008b6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b6c:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	3318      	adds	r3, #24
 8008b72:	4619      	mov	r1, r3
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7fe fcec 	bl	8007552 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b86:	6879      	ldr	r1, [r7, #4]
 8008b88:	68b8      	ldr	r0, [r7, #8]
 8008b8a:	f000 fa55 	bl	8009038 <prvAddCurrentTaskToDelayedList>
	}
 8008b8e:	bf00      	nop
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	2000082c 	.word	0x2000082c

08008b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d10a      	bne.n	8008bc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	60fb      	str	r3, [r7, #12]
}
 8008bc4:	bf00      	nop
 8008bc6:	e7fe      	b.n	8008bc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	3318      	adds	r3, #24
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe fd1d 	bl	800760c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bd2:	4b1e      	ldr	r3, [pc, #120]	; (8008c4c <xTaskRemoveFromEventList+0xb0>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d11d      	bne.n	8008c16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fd14 	bl	800760c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be8:	4b19      	ldr	r3, [pc, #100]	; (8008c50 <xTaskRemoveFromEventList+0xb4>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d903      	bls.n	8008bf8 <xTaskRemoveFromEventList+0x5c>
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf4:	4a16      	ldr	r2, [pc, #88]	; (8008c50 <xTaskRemoveFromEventList+0xb4>)
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4a13      	ldr	r2, [pc, #76]	; (8008c54 <xTaskRemoveFromEventList+0xb8>)
 8008c06:	441a      	add	r2, r3
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	f7fe fc9f 	bl	8007552 <vListInsertEnd>
 8008c14:	e005      	b.n	8008c22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	3318      	adds	r3, #24
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	480e      	ldr	r0, [pc, #56]	; (8008c58 <xTaskRemoveFromEventList+0xbc>)
 8008c1e:	f7fe fc98 	bl	8007552 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c26:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <xTaskRemoveFromEventList+0xc0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d905      	bls.n	8008c3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c30:	2301      	movs	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c34:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <xTaskRemoveFromEventList+0xc4>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	e001      	b.n	8008c40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c40:	697b      	ldr	r3, [r7, #20]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3718      	adds	r7, #24
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20000d28 	.word	0x20000d28
 8008c50:	20000d08 	.word	0x20000d08
 8008c54:	20000830 	.word	0x20000830
 8008c58:	20000cc0 	.word	0x20000cc0
 8008c5c:	2000082c 	.word	0x2000082c
 8008c60:	20000d14 	.word	0x20000d14

08008c64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <vTaskInternalSetTimeOutState+0x24>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c74:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <vTaskInternalSetTimeOutState+0x28>)
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	605a      	str	r2, [r3, #4]
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	20000d18 	.word	0x20000d18
 8008c8c:	20000d04 	.word	0x20000d04

08008c90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	613b      	str	r3, [r7, #16]
}
 8008cb2:	bf00      	nop
 8008cb4:	e7fe      	b.n	8008cb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	60fb      	str	r3, [r7, #12]
}
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008cd2:	f000 fe7f 	bl	80099d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cd6:	4b1d      	ldr	r3, [pc, #116]	; (8008d4c <xTaskCheckForTimeOut+0xbc>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	69ba      	ldr	r2, [r7, #24]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cee:	d102      	bne.n	8008cf6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	61fb      	str	r3, [r7, #28]
 8008cf4:	e023      	b.n	8008d3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	4b15      	ldr	r3, [pc, #84]	; (8008d50 <xTaskCheckForTimeOut+0xc0>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d007      	beq.n	8008d12 <xTaskCheckForTimeOut+0x82>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d302      	bcc.n	8008d12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	61fb      	str	r3, [r7, #28]
 8008d10:	e015      	b.n	8008d3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d20b      	bcs.n	8008d34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f7ff ff9b 	bl	8008c64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e004      	b.n	8008d3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	2200      	movs	r2, #0
 8008d38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d3e:	f000 fe79 	bl	8009a34 <vPortExitCritical>

	return xReturn;
 8008d42:	69fb      	ldr	r3, [r7, #28]
}
 8008d44:	4618      	mov	r0, r3
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20000d04 	.word	0x20000d04
 8008d50:	20000d18 	.word	0x20000d18

08008d54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d58:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <vTaskMissedYield+0x14>)
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
}
 8008d5e:	bf00      	nop
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr
 8008d68:	20000d14 	.word	0x20000d14

08008d6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d74:	f000 f852 	bl	8008e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d78:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <prvIdleTask+0x28>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d9f9      	bls.n	8008d74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d80:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <prvIdleTask+0x2c>)
 8008d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d90:	e7f0      	b.n	8008d74 <prvIdleTask+0x8>
 8008d92:	bf00      	nop
 8008d94:	20000830 	.word	0x20000830
 8008d98:	e000ed04 	.word	0xe000ed04

08008d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008da2:	2300      	movs	r3, #0
 8008da4:	607b      	str	r3, [r7, #4]
 8008da6:	e00c      	b.n	8008dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4a12      	ldr	r2, [pc, #72]	; (8008dfc <prvInitialiseTaskLists+0x60>)
 8008db4:	4413      	add	r3, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fb9e 	bl	80074f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	607b      	str	r3, [r7, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2b37      	cmp	r3, #55	; 0x37
 8008dc6:	d9ef      	bls.n	8008da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008dc8:	480d      	ldr	r0, [pc, #52]	; (8008e00 <prvInitialiseTaskLists+0x64>)
 8008dca:	f7fe fb95 	bl	80074f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008dce:	480d      	ldr	r0, [pc, #52]	; (8008e04 <prvInitialiseTaskLists+0x68>)
 8008dd0:	f7fe fb92 	bl	80074f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dd4:	480c      	ldr	r0, [pc, #48]	; (8008e08 <prvInitialiseTaskLists+0x6c>)
 8008dd6:	f7fe fb8f 	bl	80074f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008dda:	480c      	ldr	r0, [pc, #48]	; (8008e0c <prvInitialiseTaskLists+0x70>)
 8008ddc:	f7fe fb8c 	bl	80074f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008de0:	480b      	ldr	r0, [pc, #44]	; (8008e10 <prvInitialiseTaskLists+0x74>)
 8008de2:	f7fe fb89 	bl	80074f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008de6:	4b0b      	ldr	r3, [pc, #44]	; (8008e14 <prvInitialiseTaskLists+0x78>)
 8008de8:	4a05      	ldr	r2, [pc, #20]	; (8008e00 <prvInitialiseTaskLists+0x64>)
 8008dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dec:	4b0a      	ldr	r3, [pc, #40]	; (8008e18 <prvInitialiseTaskLists+0x7c>)
 8008dee:	4a05      	ldr	r2, [pc, #20]	; (8008e04 <prvInitialiseTaskLists+0x68>)
 8008df0:	601a      	str	r2, [r3, #0]
}
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	20000830 	.word	0x20000830
 8008e00:	20000c90 	.word	0x20000c90
 8008e04:	20000ca4 	.word	0x20000ca4
 8008e08:	20000cc0 	.word	0x20000cc0
 8008e0c:	20000cd4 	.word	0x20000cd4
 8008e10:	20000cec 	.word	0x20000cec
 8008e14:	20000cb8 	.word	0x20000cb8
 8008e18:	20000cbc 	.word	0x20000cbc

08008e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e22:	e019      	b.n	8008e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e24:	f000 fdd6 	bl	80099d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e28:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <prvCheckTasksWaitingTermination+0x50>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3304      	adds	r3, #4
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7fe fbe9 	bl	800760c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <prvCheckTasksWaitingTermination+0x54>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	4a0b      	ldr	r2, [pc, #44]	; (8008e70 <prvCheckTasksWaitingTermination+0x54>)
 8008e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e44:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <prvCheckTasksWaitingTermination+0x58>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	4a0a      	ldr	r2, [pc, #40]	; (8008e74 <prvCheckTasksWaitingTermination+0x58>)
 8008e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e4e:	f000 fdf1 	bl	8009a34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f810 	bl	8008e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e58:	4b06      	ldr	r3, [pc, #24]	; (8008e74 <prvCheckTasksWaitingTermination+0x58>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1e1      	bne.n	8008e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000cd4 	.word	0x20000cd4
 8008e70:	20000d00 	.word	0x20000d00
 8008e74:	20000ce8 	.word	0x20000ce8

08008e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3354      	adds	r3, #84	; 0x54
 8008e84:	4618      	mov	r0, r3
 8008e86:	f001 f9bb 	bl	800a200 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d108      	bne.n	8008ea6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f000 ff89 	bl	8009db0 <vPortFree>
				vPortFree( pxTCB );
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 ff86 	bl	8009db0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ea4:	e018      	b.n	8008ed8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d103      	bne.n	8008eb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 ff7d 	bl	8009db0 <vPortFree>
	}
 8008eb6:	e00f      	b.n	8008ed8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d00a      	beq.n	8008ed8 <prvDeleteTCB+0x60>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	60fb      	str	r3, [r7, #12]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <prvDeleteTCB+0x5e>
	}
 8008ed8:	bf00      	nop
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ee6:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <prvResetNextTaskUnblockTime+0x38>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d104      	bne.n	8008efa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	; (8008f1c <prvResetNextTaskUnblockTime+0x3c>)
 8008ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ef8:	e008      	b.n	8008f0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008efa:	4b07      	ldr	r3, [pc, #28]	; (8008f18 <prvResetNextTaskUnblockTime+0x38>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68db      	ldr	r3, [r3, #12]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	4a04      	ldr	r2, [pc, #16]	; (8008f1c <prvResetNextTaskUnblockTime+0x3c>)
 8008f0a:	6013      	str	r3, [r2, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	370c      	adds	r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	20000cb8 	.word	0x20000cb8
 8008f1c:	20000d20 	.word	0x20000d20

08008f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f26:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <xTaskGetSchedulerState+0x34>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	607b      	str	r3, [r7, #4]
 8008f32:	e008      	b.n	8008f46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f34:	4b08      	ldr	r3, [pc, #32]	; (8008f58 <xTaskGetSchedulerState+0x38>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	607b      	str	r3, [r7, #4]
 8008f40:	e001      	b.n	8008f46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f42:	2300      	movs	r3, #0
 8008f44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f46:	687b      	ldr	r3, [r7, #4]
	}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	20000d0c 	.word	0x20000d0c
 8008f58:	20000d28 	.word	0x20000d28

08008f5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d056      	beq.n	8009020 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f72:	4b2e      	ldr	r3, [pc, #184]	; (800902c <xTaskPriorityDisinherit+0xd0>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d00a      	beq.n	8008f92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f80:	f383 8811 	msr	BASEPRI, r3
 8008f84:	f3bf 8f6f 	isb	sy
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	60fb      	str	r3, [r7, #12]
}
 8008f8e:	bf00      	nop
 8008f90:	e7fe      	b.n	8008f90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10a      	bne.n	8008fb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	60bb      	str	r3, [r7, #8]
}
 8008fac:	bf00      	nop
 8008fae:	e7fe      	b.n	8008fae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb4:	1e5a      	subs	r2, r3, #1
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d02c      	beq.n	8009020 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d128      	bne.n	8009020 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fb1a 	bl	800760c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff0:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <xTaskPriorityDisinherit+0xd4>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d903      	bls.n	8009000 <xTaskPriorityDisinherit+0xa4>
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffc:	4a0c      	ldr	r2, [pc, #48]	; (8009030 <xTaskPriorityDisinherit+0xd4>)
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009004:	4613      	mov	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4413      	add	r3, r2
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4a09      	ldr	r2, [pc, #36]	; (8009034 <xTaskPriorityDisinherit+0xd8>)
 800900e:	441a      	add	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3304      	adds	r3, #4
 8009014:	4619      	mov	r1, r3
 8009016:	4610      	mov	r0, r2
 8009018:	f7fe fa9b 	bl	8007552 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009020:	697b      	ldr	r3, [r7, #20]
	}
 8009022:	4618      	mov	r0, r3
 8009024:	3718      	adds	r7, #24
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	2000082c 	.word	0x2000082c
 8009030:	20000d08 	.word	0x20000d08
 8009034:	20000830 	.word	0x20000830

08009038 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009042:	4b21      	ldr	r3, [pc, #132]	; (80090c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009048:	4b20      	ldr	r3, [pc, #128]	; (80090cc <prvAddCurrentTaskToDelayedList+0x94>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3304      	adds	r3, #4
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fadc 	bl	800760c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800905a:	d10a      	bne.n	8009072 <prvAddCurrentTaskToDelayedList+0x3a>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d007      	beq.n	8009072 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009062:	4b1a      	ldr	r3, [pc, #104]	; (80090cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3304      	adds	r3, #4
 8009068:	4619      	mov	r1, r3
 800906a:	4819      	ldr	r0, [pc, #100]	; (80090d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800906c:	f7fe fa71 	bl	8007552 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009070:	e026      	b.n	80090c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4413      	add	r3, r2
 8009078:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800907a:	4b14      	ldr	r3, [pc, #80]	; (80090cc <prvAddCurrentTaskToDelayedList+0x94>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009082:	68ba      	ldr	r2, [r7, #8]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	429a      	cmp	r2, r3
 8009088:	d209      	bcs.n	800909e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800908a:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	3304      	adds	r3, #4
 8009094:	4619      	mov	r1, r3
 8009096:	4610      	mov	r0, r2
 8009098:	f7fe fa7f 	bl	800759a <vListInsert>
}
 800909c:	e010      	b.n	80090c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800909e:	4b0e      	ldr	r3, [pc, #56]	; (80090d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <prvAddCurrentTaskToDelayedList+0x94>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f7fe fa75 	bl	800759a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090b0:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68ba      	ldr	r2, [r7, #8]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d202      	bcs.n	80090c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090ba:	4a08      	ldr	r2, [pc, #32]	; (80090dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	6013      	str	r3, [r2, #0]
}
 80090c0:	bf00      	nop
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	20000d04 	.word	0x20000d04
 80090cc:	2000082c 	.word	0x2000082c
 80090d0:	20000cec 	.word	0x20000cec
 80090d4:	20000cbc 	.word	0x20000cbc
 80090d8:	20000cb8 	.word	0x20000cb8
 80090dc:	20000d20 	.word	0x20000d20

080090e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08a      	sub	sp, #40	; 0x28
 80090e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80090ea:	f000 fb07 	bl	80096fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80090ee:	4b1c      	ldr	r3, [pc, #112]	; (8009160 <xTimerCreateTimerTask+0x80>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d021      	beq.n	800913a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80090fe:	1d3a      	adds	r2, r7, #4
 8009100:	f107 0108 	add.w	r1, r7, #8
 8009104:	f107 030c 	add.w	r3, r7, #12
 8009108:	4618      	mov	r0, r3
 800910a:	f7fe f9db 	bl	80074c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	9202      	str	r2, [sp, #8]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	2302      	movs	r3, #2
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	2300      	movs	r3, #0
 800911e:	460a      	mov	r2, r1
 8009120:	4910      	ldr	r1, [pc, #64]	; (8009164 <xTimerCreateTimerTask+0x84>)
 8009122:	4811      	ldr	r0, [pc, #68]	; (8009168 <xTimerCreateTimerTask+0x88>)
 8009124:	f7ff f842 	bl	80081ac <xTaskCreateStatic>
 8009128:	4603      	mov	r3, r0
 800912a:	4a10      	ldr	r2, [pc, #64]	; (800916c <xTimerCreateTimerTask+0x8c>)
 800912c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800912e:	4b0f      	ldr	r3, [pc, #60]	; (800916c <xTimerCreateTimerTask+0x8c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009136:	2301      	movs	r3, #1
 8009138:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	613b      	str	r3, [r7, #16]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009156:	697b      	ldr	r3, [r7, #20]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	20000d5c 	.word	0x20000d5c
 8009164:	0800a3a8 	.word	0x0800a3a8
 8009168:	080092a5 	.word	0x080092a5
 800916c:	20000d60 	.word	0x20000d60

08009170 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	; 0x28
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800917e:	2300      	movs	r3, #0
 8009180:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	623b      	str	r3, [r7, #32]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800919e:	4b1a      	ldr	r3, [pc, #104]	; (8009208 <xTimerGenericCommand+0x98>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d02a      	beq.n	80091fc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	2b05      	cmp	r3, #5
 80091b6:	dc18      	bgt.n	80091ea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091b8:	f7ff feb2 	bl	8008f20 <xTaskGetSchedulerState>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d109      	bne.n	80091d6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091c2:	4b11      	ldr	r3, [pc, #68]	; (8009208 <xTimerGenericCommand+0x98>)
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	f107 0110 	add.w	r1, r7, #16
 80091ca:	2300      	movs	r3, #0
 80091cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ce:	f7fe fb85 	bl	80078dc <xQueueGenericSend>
 80091d2:	6278      	str	r0, [r7, #36]	; 0x24
 80091d4:	e012      	b.n	80091fc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <xTimerGenericCommand+0x98>)
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	f107 0110 	add.w	r1, r7, #16
 80091de:	2300      	movs	r3, #0
 80091e0:	2200      	movs	r2, #0
 80091e2:	f7fe fb7b 	bl	80078dc <xQueueGenericSend>
 80091e6:	6278      	str	r0, [r7, #36]	; 0x24
 80091e8:	e008      	b.n	80091fc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80091ea:	4b07      	ldr	r3, [pc, #28]	; (8009208 <xTimerGenericCommand+0x98>)
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	f107 0110 	add.w	r1, r7, #16
 80091f2:	2300      	movs	r3, #0
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	f7fe fc6f 	bl	8007ad8 <xQueueGenericSendFromISR>
 80091fa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80091fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3728      	adds	r7, #40	; 0x28
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	20000d5c 	.word	0x20000d5c

0800920c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b088      	sub	sp, #32
 8009210:	af02      	add	r7, sp, #8
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009216:	4b22      	ldr	r3, [pc, #136]	; (80092a0 <prvProcessExpiredTimer+0x94>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	68db      	ldr	r3, [r3, #12]
 800921e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	3304      	adds	r3, #4
 8009224:	4618      	mov	r0, r3
 8009226:	f7fe f9f1 	bl	800760c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009230:	f003 0304 	and.w	r3, r3, #4
 8009234:	2b00      	cmp	r3, #0
 8009236:	d022      	beq.n	800927e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	699a      	ldr	r2, [r3, #24]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	18d1      	adds	r1, r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	6978      	ldr	r0, [r7, #20]
 8009246:	f000 f8d1 	bl	80093ec <prvInsertTimerInActiveList>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d01f      	beq.n	8009290 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009250:	2300      	movs	r3, #0
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	2300      	movs	r3, #0
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	2100      	movs	r1, #0
 800925a:	6978      	ldr	r0, [r7, #20]
 800925c:	f7ff ff88 	bl	8009170 <xTimerGenericCommand>
 8009260:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d113      	bne.n	8009290 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	60fb      	str	r3, [r7, #12]
}
 800927a:	bf00      	nop
 800927c:	e7fe      	b.n	800927c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	b2da      	uxtb	r2, r3
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	6a1b      	ldr	r3, [r3, #32]
 8009294:	6978      	ldr	r0, [r7, #20]
 8009296:	4798      	blx	r3
}
 8009298:	bf00      	nop
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	20000d54 	.word	0x20000d54

080092a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092ac:	f107 0308 	add.w	r3, r7, #8
 80092b0:	4618      	mov	r0, r3
 80092b2:	f000 f857 	bl	8009364 <prvGetNextExpireTime>
 80092b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	4619      	mov	r1, r3
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 f803 	bl	80092c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092c2:	f000 f8d5 	bl	8009470 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092c6:	e7f1      	b.n	80092ac <prvTimerTask+0x8>

080092c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80092d2:	f7ff fa39 	bl	8008748 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092d6:	f107 0308 	add.w	r3, r7, #8
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 f866 	bl	80093ac <prvSampleTimeNow>
 80092e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d130      	bne.n	800934a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <prvProcessTimerOrBlockTask+0x3c>
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d806      	bhi.n	8009304 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80092f6:	f7ff fa35 	bl	8008764 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80092fa:	68f9      	ldr	r1, [r7, #12]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff ff85 	bl	800920c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009302:	e024      	b.n	800934e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d008      	beq.n	800931c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800930a:	4b13      	ldr	r3, [pc, #76]	; (8009358 <prvProcessTimerOrBlockTask+0x90>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d101      	bne.n	8009318 <prvProcessTimerOrBlockTask+0x50>
 8009314:	2301      	movs	r3, #1
 8009316:	e000      	b.n	800931a <prvProcessTimerOrBlockTask+0x52>
 8009318:	2300      	movs	r3, #0
 800931a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800931c:	4b0f      	ldr	r3, [pc, #60]	; (800935c <prvProcessTimerOrBlockTask+0x94>)
 800931e:	6818      	ldr	r0, [r3, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	4619      	mov	r1, r3
 800932a:	f7fe ff0b 	bl	8008144 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800932e:	f7ff fa19 	bl	8008764 <xTaskResumeAll>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10a      	bne.n	800934e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009338:	4b09      	ldr	r3, [pc, #36]	; (8009360 <prvProcessTimerOrBlockTask+0x98>)
 800933a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800933e:	601a      	str	r2, [r3, #0]
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	f3bf 8f6f 	isb	sy
}
 8009348:	e001      	b.n	800934e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800934a:	f7ff fa0b 	bl	8008764 <xTaskResumeAll>
}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000d58 	.word	0x20000d58
 800935c:	20000d5c 	.word	0x20000d5c
 8009360:	e000ed04 	.word	0xe000ed04

08009364 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800936c:	4b0e      	ldr	r3, [pc, #56]	; (80093a8 <prvGetNextExpireTime+0x44>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d101      	bne.n	800937a <prvGetNextExpireTime+0x16>
 8009376:	2201      	movs	r2, #1
 8009378:	e000      	b.n	800937c <prvGetNextExpireTime+0x18>
 800937a:	2200      	movs	r2, #0
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d105      	bne.n	8009394 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009388:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <prvGetNextExpireTime+0x44>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	60fb      	str	r3, [r7, #12]
 8009392:	e001      	b.n	8009398 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009398:	68fb      	ldr	r3, [r7, #12]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	20000d54 	.word	0x20000d54

080093ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093b4:	f7ff fa74 	bl	80088a0 <xTaskGetTickCount>
 80093b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093ba:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <prvSampleTimeNow+0x3c>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d205      	bcs.n	80093d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80093c4:	f000 f936 	bl	8009634 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	e002      	b.n	80093d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80093d6:	4a04      	ldr	r2, [pc, #16]	; (80093e8 <prvSampleTimeNow+0x3c>)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80093dc:	68fb      	ldr	r3, [r7, #12]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	20000d64 	.word	0x20000d64

080093ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80093fa:	2300      	movs	r3, #0
 80093fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	429a      	cmp	r2, r3
 8009410:	d812      	bhi.n	8009438 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	1ad2      	subs	r2, r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	429a      	cmp	r2, r3
 800941e:	d302      	bcc.n	8009426 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009420:	2301      	movs	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	e01b      	b.n	800945e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009426:	4b10      	ldr	r3, [pc, #64]	; (8009468 <prvInsertTimerInActiveList+0x7c>)
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f7fe f8b2 	bl	800759a <vListInsert>
 8009436:	e012      	b.n	800945e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d206      	bcs.n	800944e <prvInsertTimerInActiveList+0x62>
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	429a      	cmp	r2, r3
 8009446:	d302      	bcc.n	800944e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009448:	2301      	movs	r3, #1
 800944a:	617b      	str	r3, [r7, #20]
 800944c:	e007      	b.n	800945e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800944e:	4b07      	ldr	r3, [pc, #28]	; (800946c <prvInsertTimerInActiveList+0x80>)
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3304      	adds	r3, #4
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f7fe f89e 	bl	800759a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800945e:	697b      	ldr	r3, [r7, #20]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000d58 	.word	0x20000d58
 800946c:	20000d54 	.word	0x20000d54

08009470 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08e      	sub	sp, #56	; 0x38
 8009474:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009476:	e0ca      	b.n	800960e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	da18      	bge.n	80094b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800947e:	1d3b      	adds	r3, r7, #4
 8009480:	3304      	adds	r3, #4
 8009482:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10a      	bne.n	80094a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	61fb      	str	r3, [r7, #28]
}
 800949c:	bf00      	nop
 800949e:	e7fe      	b.n	800949e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a6:	6850      	ldr	r0, [r2, #4]
 80094a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094aa:	6892      	ldr	r2, [r2, #8]
 80094ac:	4611      	mov	r1, r2
 80094ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f2c0 80aa 	blt.w	800960c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d004      	beq.n	80094ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	3304      	adds	r3, #4
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7fe f89f 	bl	800760c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ce:	463b      	mov	r3, r7
 80094d0:	4618      	mov	r0, r3
 80094d2:	f7ff ff6b 	bl	80093ac <prvSampleTimeNow>
 80094d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b09      	cmp	r3, #9
 80094dc:	f200 8097 	bhi.w	800960e <prvProcessReceivedCommands+0x19e>
 80094e0:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <prvProcessReceivedCommands+0x78>)
 80094e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e6:	bf00      	nop
 80094e8:	08009511 	.word	0x08009511
 80094ec:	08009511 	.word	0x08009511
 80094f0:	08009511 	.word	0x08009511
 80094f4:	08009585 	.word	0x08009585
 80094f8:	08009599 	.word	0x08009599
 80094fc:	080095e3 	.word	0x080095e3
 8009500:	08009511 	.word	0x08009511
 8009504:	08009511 	.word	0x08009511
 8009508:	08009585 	.word	0x08009585
 800950c:	08009599 	.word	0x08009599
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009516:	f043 0301 	orr.w	r3, r3, #1
 800951a:	b2da      	uxtb	r2, r3
 800951c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800951e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	18d1      	adds	r1, r2, r3
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800952e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009530:	f7ff ff5c 	bl	80093ec <prvInsertTimerInActiveList>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d069      	beq.n	800960e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009540:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	d05e      	beq.n	800960e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	441a      	add	r2, r3
 8009558:	2300      	movs	r3, #0
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	2300      	movs	r3, #0
 800955e:	2100      	movs	r1, #0
 8009560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009562:	f7ff fe05 	bl	8009170 <xTimerGenericCommand>
 8009566:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009568:	6a3b      	ldr	r3, [r7, #32]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d14f      	bne.n	800960e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800956e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009572:	f383 8811 	msr	BASEPRI, r3
 8009576:	f3bf 8f6f 	isb	sy
 800957a:	f3bf 8f4f 	dsb	sy
 800957e:	61bb      	str	r3, [r7, #24]
}
 8009580:	bf00      	nop
 8009582:	e7fe      	b.n	8009582 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800958a:	f023 0301 	bic.w	r3, r3, #1
 800958e:	b2da      	uxtb	r2, r3
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009596:	e03a      	b.n	800960e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800959e:	f043 0301 	orr.w	r3, r3, #1
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10a      	bne.n	80095ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80095b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095bc:	f383 8811 	msr	BASEPRI, r3
 80095c0:	f3bf 8f6f 	isb	sy
 80095c4:	f3bf 8f4f 	dsb	sy
 80095c8:	617b      	str	r3, [r7, #20]
}
 80095ca:	bf00      	nop
 80095cc:	e7fe      	b.n	80095cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	699a      	ldr	r2, [r3, #24]
 80095d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d4:	18d1      	adds	r1, r2, r3
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095dc:	f7ff ff06 	bl	80093ec <prvInsertTimerInActiveList>
					break;
 80095e0:	e015      	b.n	800960e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095e8:	f003 0302 	and.w	r3, r3, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80095f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095f2:	f000 fbdd 	bl	8009db0 <vPortFree>
 80095f6:	e00a      	b.n	800960e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	b2da      	uxtb	r2, r3
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800960a:	e000      	b.n	800960e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800960c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800960e:	4b08      	ldr	r3, [pc, #32]	; (8009630 <prvProcessReceivedCommands+0x1c0>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	1d39      	adds	r1, r7, #4
 8009614:	2200      	movs	r2, #0
 8009616:	4618      	mov	r0, r3
 8009618:	f7fe fafa 	bl	8007c10 <xQueueReceive>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	f47f af2a 	bne.w	8009478 <prvProcessReceivedCommands+0x8>
	}
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop
 8009628:	3730      	adds	r7, #48	; 0x30
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	20000d5c 	.word	0x20000d5c

08009634 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800963a:	e048      	b.n	80096ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800963c:	4b2d      	ldr	r3, [pc, #180]	; (80096f4 <prvSwitchTimerLists+0xc0>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009646:	4b2b      	ldr	r3, [pc, #172]	; (80096f4 <prvSwitchTimerLists+0xc0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7fd ffd9 	bl	800760c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	6a1b      	ldr	r3, [r3, #32]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009668:	f003 0304 	and.w	r3, r3, #4
 800966c:	2b00      	cmp	r3, #0
 800966e:	d02e      	beq.n	80096ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	693a      	ldr	r2, [r7, #16]
 8009676:	4413      	add	r3, r2
 8009678:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	429a      	cmp	r2, r3
 8009680:	d90e      	bls.n	80096a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800968e:	4b19      	ldr	r3, [pc, #100]	; (80096f4 <prvSwitchTimerLists+0xc0>)
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	3304      	adds	r3, #4
 8009696:	4619      	mov	r1, r3
 8009698:	4610      	mov	r0, r2
 800969a:	f7fd ff7e 	bl	800759a <vListInsert>
 800969e:	e016      	b.n	80096ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096a0:	2300      	movs	r3, #0
 80096a2:	9300      	str	r3, [sp, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	2100      	movs	r1, #0
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f7ff fd60 	bl	8009170 <xTimerGenericCommand>
 80096b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10a      	bne.n	80096ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	603b      	str	r3, [r7, #0]
}
 80096ca:	bf00      	nop
 80096cc:	e7fe      	b.n	80096cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096ce:	4b09      	ldr	r3, [pc, #36]	; (80096f4 <prvSwitchTimerLists+0xc0>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1b1      	bne.n	800963c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80096d8:	4b06      	ldr	r3, [pc, #24]	; (80096f4 <prvSwitchTimerLists+0xc0>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80096de:	4b06      	ldr	r3, [pc, #24]	; (80096f8 <prvSwitchTimerLists+0xc4>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a04      	ldr	r2, [pc, #16]	; (80096f4 <prvSwitchTimerLists+0xc0>)
 80096e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80096e6:	4a04      	ldr	r2, [pc, #16]	; (80096f8 <prvSwitchTimerLists+0xc4>)
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	6013      	str	r3, [r2, #0]
}
 80096ec:	bf00      	nop
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20000d54 	.word	0x20000d54
 80096f8:	20000d58 	.word	0x20000d58

080096fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009702:	f000 f967 	bl	80099d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009706:	4b15      	ldr	r3, [pc, #84]	; (800975c <prvCheckForValidListAndQueue+0x60>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d120      	bne.n	8009750 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800970e:	4814      	ldr	r0, [pc, #80]	; (8009760 <prvCheckForValidListAndQueue+0x64>)
 8009710:	f7fd fef2 	bl	80074f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009714:	4813      	ldr	r0, [pc, #76]	; (8009764 <prvCheckForValidListAndQueue+0x68>)
 8009716:	f7fd feef 	bl	80074f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800971a:	4b13      	ldr	r3, [pc, #76]	; (8009768 <prvCheckForValidListAndQueue+0x6c>)
 800971c:	4a10      	ldr	r2, [pc, #64]	; (8009760 <prvCheckForValidListAndQueue+0x64>)
 800971e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009720:	4b12      	ldr	r3, [pc, #72]	; (800976c <prvCheckForValidListAndQueue+0x70>)
 8009722:	4a10      	ldr	r2, [pc, #64]	; (8009764 <prvCheckForValidListAndQueue+0x68>)
 8009724:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009726:	2300      	movs	r3, #0
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	4b11      	ldr	r3, [pc, #68]	; (8009770 <prvCheckForValidListAndQueue+0x74>)
 800972c:	4a11      	ldr	r2, [pc, #68]	; (8009774 <prvCheckForValidListAndQueue+0x78>)
 800972e:	2110      	movs	r1, #16
 8009730:	200a      	movs	r0, #10
 8009732:	f7fd fffd 	bl	8007730 <xQueueGenericCreateStatic>
 8009736:	4603      	mov	r3, r0
 8009738:	4a08      	ldr	r2, [pc, #32]	; (800975c <prvCheckForValidListAndQueue+0x60>)
 800973a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800973c:	4b07      	ldr	r3, [pc, #28]	; (800975c <prvCheckForValidListAndQueue+0x60>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009744:	4b05      	ldr	r3, [pc, #20]	; (800975c <prvCheckForValidListAndQueue+0x60>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	490b      	ldr	r1, [pc, #44]	; (8009778 <prvCheckForValidListAndQueue+0x7c>)
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe fcd0 	bl	80080f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009750:	f000 f970 	bl	8009a34 <vPortExitCritical>
}
 8009754:	bf00      	nop
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	20000d5c 	.word	0x20000d5c
 8009760:	20000d2c 	.word	0x20000d2c
 8009764:	20000d40 	.word	0x20000d40
 8009768:	20000d54 	.word	0x20000d54
 800976c:	20000d58 	.word	0x20000d58
 8009770:	20000e08 	.word	0x20000e08
 8009774:	20000d68 	.word	0x20000d68
 8009778:	0800a3b0 	.word	0x0800a3b0

0800977c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	3b04      	subs	r3, #4
 800978c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009794:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3b04      	subs	r3, #4
 800979a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	f023 0201 	bic.w	r2, r3, #1
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3b04      	subs	r3, #4
 80097aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097ac:	4a0c      	ldr	r2, [pc, #48]	; (80097e0 <pxPortInitialiseStack+0x64>)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	3b14      	subs	r3, #20
 80097b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	3b04      	subs	r3, #4
 80097c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f06f 0202 	mvn.w	r2, #2
 80097ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3b20      	subs	r3, #32
 80097d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097d2:	68fb      	ldr	r3, [r7, #12]
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3714      	adds	r7, #20
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	080097e5 	.word	0x080097e5

080097e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097ee:	4b12      	ldr	r3, [pc, #72]	; (8009838 <prvTaskExitError+0x54>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f6:	d00a      	beq.n	800980e <prvTaskExitError+0x2a>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	60fb      	str	r3, [r7, #12]
}
 800980a:	bf00      	nop
 800980c:	e7fe      	b.n	800980c <prvTaskExitError+0x28>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	60bb      	str	r3, [r7, #8]
}
 8009820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009822:	bf00      	nop
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0fc      	beq.n	8009824 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	3714      	adds	r7, #20
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	2000001c 	.word	0x2000001c
 800983c:	00000000 	.word	0x00000000

08009840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <pxCurrentTCBConst2>)
 8009842:	6819      	ldr	r1, [r3, #0]
 8009844:	6808      	ldr	r0, [r1, #0]
 8009846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800984a:	f380 8809 	msr	PSP, r0
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f04f 0000 	mov.w	r0, #0
 8009856:	f380 8811 	msr	BASEPRI, r0
 800985a:	4770      	bx	lr
 800985c:	f3af 8000 	nop.w

08009860 <pxCurrentTCBConst2>:
 8009860:	2000082c 	.word	0x2000082c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009864:	bf00      	nop
 8009866:	bf00      	nop

08009868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009868:	4808      	ldr	r0, [pc, #32]	; (800988c <prvPortStartFirstTask+0x24>)
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	6800      	ldr	r0, [r0, #0]
 800986e:	f380 8808 	msr	MSP, r0
 8009872:	f04f 0000 	mov.w	r0, #0
 8009876:	f380 8814 	msr	CONTROL, r0
 800987a:	b662      	cpsie	i
 800987c:	b661      	cpsie	f
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	df00      	svc	0
 8009888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800988a:	bf00      	nop
 800988c:	e000ed08 	.word	0xe000ed08

08009890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009896:	4b46      	ldr	r3, [pc, #280]	; (80099b0 <xPortStartScheduler+0x120>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a46      	ldr	r2, [pc, #280]	; (80099b4 <xPortStartScheduler+0x124>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d10a      	bne.n	80098b6 <xPortStartScheduler+0x26>
	__asm volatile
 80098a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a4:	f383 8811 	msr	BASEPRI, r3
 80098a8:	f3bf 8f6f 	isb	sy
 80098ac:	f3bf 8f4f 	dsb	sy
 80098b0:	613b      	str	r3, [r7, #16]
}
 80098b2:	bf00      	nop
 80098b4:	e7fe      	b.n	80098b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80098b6:	4b3e      	ldr	r3, [pc, #248]	; (80099b0 <xPortStartScheduler+0x120>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a3f      	ldr	r2, [pc, #252]	; (80099b8 <xPortStartScheduler+0x128>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d10a      	bne.n	80098d6 <xPortStartScheduler+0x46>
	__asm volatile
 80098c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c4:	f383 8811 	msr	BASEPRI, r3
 80098c8:	f3bf 8f6f 	isb	sy
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	60fb      	str	r3, [r7, #12]
}
 80098d2:	bf00      	nop
 80098d4:	e7fe      	b.n	80098d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098d6:	4b39      	ldr	r3, [pc, #228]	; (80099bc <xPortStartScheduler+0x12c>)
 80098d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098f0:	78fb      	ldrb	r3, [r7, #3]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	4b31      	ldr	r3, [pc, #196]	; (80099c0 <xPortStartScheduler+0x130>)
 80098fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098fe:	4b31      	ldr	r3, [pc, #196]	; (80099c4 <xPortStartScheduler+0x134>)
 8009900:	2207      	movs	r2, #7
 8009902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009904:	e009      	b.n	800991a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009906:	4b2f      	ldr	r3, [pc, #188]	; (80099c4 <xPortStartScheduler+0x134>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3b01      	subs	r3, #1
 800990c:	4a2d      	ldr	r2, [pc, #180]	; (80099c4 <xPortStartScheduler+0x134>)
 800990e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009910:	78fb      	ldrb	r3, [r7, #3]
 8009912:	b2db      	uxtb	r3, r3
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	b2db      	uxtb	r3, r3
 8009918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800991a:	78fb      	ldrb	r3, [r7, #3]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009922:	2b80      	cmp	r3, #128	; 0x80
 8009924:	d0ef      	beq.n	8009906 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009926:	4b27      	ldr	r3, [pc, #156]	; (80099c4 <xPortStartScheduler+0x134>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f1c3 0307 	rsb	r3, r3, #7
 800992e:	2b04      	cmp	r3, #4
 8009930:	d00a      	beq.n	8009948 <xPortStartScheduler+0xb8>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	60bb      	str	r3, [r7, #8]
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009948:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <xPortStartScheduler+0x134>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <xPortStartScheduler+0x134>)
 8009950:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <xPortStartScheduler+0x134>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800995a:	4a1a      	ldr	r2, [pc, #104]	; (80099c4 <xPortStartScheduler+0x134>)
 800995c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	b2da      	uxtb	r2, r3
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009966:	4b18      	ldr	r3, [pc, #96]	; (80099c8 <xPortStartScheduler+0x138>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a17      	ldr	r2, [pc, #92]	; (80099c8 <xPortStartScheduler+0x138>)
 800996c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009970:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009972:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <xPortStartScheduler+0x138>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a14      	ldr	r2, [pc, #80]	; (80099c8 <xPortStartScheduler+0x138>)
 8009978:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800997c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800997e:	f000 f8dd 	bl	8009b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009982:	4b12      	ldr	r3, [pc, #72]	; (80099cc <xPortStartScheduler+0x13c>)
 8009984:	2200      	movs	r2, #0
 8009986:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009988:	f000 f8fc 	bl	8009b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800998c:	4b10      	ldr	r3, [pc, #64]	; (80099d0 <xPortStartScheduler+0x140>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a0f      	ldr	r2, [pc, #60]	; (80099d0 <xPortStartScheduler+0x140>)
 8009992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009996:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009998:	f7ff ff66 	bl	8009868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800999c:	f7ff f84a 	bl	8008a34 <vTaskSwitchContext>
	prvTaskExitError();
 80099a0:	f7ff ff20 	bl	80097e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	e000ed00 	.word	0xe000ed00
 80099b4:	410fc271 	.word	0x410fc271
 80099b8:	410fc270 	.word	0x410fc270
 80099bc:	e000e400 	.word	0xe000e400
 80099c0:	20000e58 	.word	0x20000e58
 80099c4:	20000e5c 	.word	0x20000e5c
 80099c8:	e000ed20 	.word	0xe000ed20
 80099cc:	2000001c 	.word	0x2000001c
 80099d0:	e000ef34 	.word	0xe000ef34

080099d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	607b      	str	r3, [r7, #4]
}
 80099ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <vPortEnterCritical+0x58>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3301      	adds	r3, #1
 80099f4:	4a0d      	ldr	r2, [pc, #52]	; (8009a2c <vPortEnterCritical+0x58>)
 80099f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099f8:	4b0c      	ldr	r3, [pc, #48]	; (8009a2c <vPortEnterCritical+0x58>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10f      	bne.n	8009a20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a00:	4b0b      	ldr	r3, [pc, #44]	; (8009a30 <vPortEnterCritical+0x5c>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	603b      	str	r3, [r7, #0]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <vPortEnterCritical+0x4a>
	}
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr
 8009a2c:	2000001c 	.word	0x2000001c
 8009a30:	e000ed04 	.word	0xe000ed04

08009a34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a3a:	4b12      	ldr	r3, [pc, #72]	; (8009a84 <vPortExitCritical+0x50>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <vPortExitCritical+0x24>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	607b      	str	r3, [r7, #4]
}
 8009a54:	bf00      	nop
 8009a56:	e7fe      	b.n	8009a56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a58:	4b0a      	ldr	r3, [pc, #40]	; (8009a84 <vPortExitCritical+0x50>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <vPortExitCritical+0x50>)
 8009a60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a62:	4b08      	ldr	r3, [pc, #32]	; (8009a84 <vPortExitCritical+0x50>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <vPortExitCritical+0x42>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	f383 8811 	msr	BASEPRI, r3
}
 8009a74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a76:	bf00      	nop
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	2000001c 	.word	0x2000001c
	...

08009a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a90:	f3ef 8009 	mrs	r0, PSP
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <pxCurrentTCBConst>)
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	f01e 0f10 	tst.w	lr, #16
 8009aa0:	bf08      	it	eq
 8009aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aaa:	6010      	str	r0, [r2, #0]
 8009aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ab0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ab4:	f380 8811 	msr	BASEPRI, r0
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f7fe ffb8 	bl	8008a34 <vTaskSwitchContext>
 8009ac4:	f04f 0000 	mov.w	r0, #0
 8009ac8:	f380 8811 	msr	BASEPRI, r0
 8009acc:	bc09      	pop	{r0, r3}
 8009ace:	6819      	ldr	r1, [r3, #0]
 8009ad0:	6808      	ldr	r0, [r1, #0]
 8009ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad6:	f01e 0f10 	tst.w	lr, #16
 8009ada:	bf08      	it	eq
 8009adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ae0:	f380 8809 	msr	PSP, r0
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	f3af 8000 	nop.w

08009af0 <pxCurrentTCBConst>:
 8009af0:	2000082c 	.word	0x2000082c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009af4:	bf00      	nop
 8009af6:	bf00      	nop

08009af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	607b      	str	r3, [r7, #4]
}
 8009b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b12:	f7fe fed5 	bl	80088c0 <xTaskIncrementTick>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b1c:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <xPortSysTickHandler+0x40>)
 8009b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b22:	601a      	str	r2, [r3, #0]
 8009b24:	2300      	movs	r3, #0
 8009b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	f383 8811 	msr	BASEPRI, r3
}
 8009b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b30:	bf00      	nop
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	e000ed04 	.word	0xe000ed04

08009b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b40:	4b0b      	ldr	r3, [pc, #44]	; (8009b70 <vPortSetupTimerInterrupt+0x34>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <vPortSetupTimerInterrupt+0x38>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b4c:	4b0a      	ldr	r3, [pc, #40]	; (8009b78 <vPortSetupTimerInterrupt+0x3c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a0a      	ldr	r2, [pc, #40]	; (8009b7c <vPortSetupTimerInterrupt+0x40>)
 8009b52:	fba2 2303 	umull	r2, r3, r2, r3
 8009b56:	099b      	lsrs	r3, r3, #6
 8009b58:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <vPortSetupTimerInterrupt+0x44>)
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b5e:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <vPortSetupTimerInterrupt+0x34>)
 8009b60:	2207      	movs	r2, #7
 8009b62:	601a      	str	r2, [r3, #0]
}
 8009b64:	bf00      	nop
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	e000e010 	.word	0xe000e010
 8009b74:	e000e018 	.word	0xe000e018
 8009b78:	20000000 	.word	0x20000000
 8009b7c:	10624dd3 	.word	0x10624dd3
 8009b80:	e000e014 	.word	0xe000e014

08009b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009b94 <vPortEnableVFP+0x10>
 8009b88:	6801      	ldr	r1, [r0, #0]
 8009b8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009b8e:	6001      	str	r1, [r0, #0]
 8009b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b92:	bf00      	nop
 8009b94:	e000ed88 	.word	0xe000ed88

08009b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b9e:	f3ef 8305 	mrs	r3, IPSR
 8009ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b0f      	cmp	r3, #15
 8009ba8:	d914      	bls.n	8009bd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009baa:	4a17      	ldr	r2, [pc, #92]	; (8009c08 <vPortValidateInterruptPriority+0x70>)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bb4:	4b15      	ldr	r3, [pc, #84]	; (8009c0c <vPortValidateInterruptPriority+0x74>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	7afa      	ldrb	r2, [r7, #11]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d20a      	bcs.n	8009bd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	607b      	str	r3, [r7, #4]
}
 8009bd0:	bf00      	nop
 8009bd2:	e7fe      	b.n	8009bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bd4:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <vPortValidateInterruptPriority+0x78>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bdc:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <vPortValidateInterruptPriority+0x7c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d90a      	bls.n	8009bfa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	603b      	str	r3, [r7, #0]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <vPortValidateInterruptPriority+0x60>
	}
 8009bfa:	bf00      	nop
 8009bfc:	3714      	adds	r7, #20
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	e000e3f0 	.word	0xe000e3f0
 8009c0c:	20000e58 	.word	0x20000e58
 8009c10:	e000ed0c 	.word	0xe000ed0c
 8009c14:	20000e5c 	.word	0x20000e5c

08009c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b08a      	sub	sp, #40	; 0x28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c24:	f7fe fd90 	bl	8008748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c28:	4b5b      	ldr	r3, [pc, #364]	; (8009d98 <pvPortMalloc+0x180>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c30:	f000 f920 	bl	8009e74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c34:	4b59      	ldr	r3, [pc, #356]	; (8009d9c <pvPortMalloc+0x184>)
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	f040 8093 	bne.w	8009d68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d01d      	beq.n	8009c84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c48:	2208      	movs	r2, #8
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f003 0307 	and.w	r3, r3, #7
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d014      	beq.n	8009c84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f023 0307 	bic.w	r3, r3, #7
 8009c60:	3308      	adds	r3, #8
 8009c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <pvPortMalloc+0x6c>
	__asm volatile
 8009c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	617b      	str	r3, [r7, #20]
}
 8009c80:	bf00      	nop
 8009c82:	e7fe      	b.n	8009c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d06e      	beq.n	8009d68 <pvPortMalloc+0x150>
 8009c8a:	4b45      	ldr	r3, [pc, #276]	; (8009da0 <pvPortMalloc+0x188>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d869      	bhi.n	8009d68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c94:	4b43      	ldr	r3, [pc, #268]	; (8009da4 <pvPortMalloc+0x18c>)
 8009c96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c98:	4b42      	ldr	r3, [pc, #264]	; (8009da4 <pvPortMalloc+0x18c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c9e:	e004      	b.n	8009caa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d903      	bls.n	8009cbc <pvPortMalloc+0xa4>
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f1      	bne.n	8009ca0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cbc:	4b36      	ldr	r3, [pc, #216]	; (8009d98 <pvPortMalloc+0x180>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d050      	beq.n	8009d68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2208      	movs	r2, #8
 8009ccc:	4413      	add	r3, r2
 8009cce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	1ad2      	subs	r2, r2, r3
 8009ce0:	2308      	movs	r3, #8
 8009ce2:	005b      	lsls	r3, r3, #1
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d91f      	bls.n	8009d28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	f003 0307 	and.w	r3, r3, #7
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <pvPortMalloc+0xf8>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	613b      	str	r3, [r7, #16]
}
 8009d0c:	bf00      	nop
 8009d0e:	e7fe      	b.n	8009d0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	1ad2      	subs	r2, r2, r3
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d22:	69b8      	ldr	r0, [r7, #24]
 8009d24:	f000 f908 	bl	8009f38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d28:	4b1d      	ldr	r3, [pc, #116]	; (8009da0 <pvPortMalloc+0x188>)
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	1ad3      	subs	r3, r2, r3
 8009d32:	4a1b      	ldr	r2, [pc, #108]	; (8009da0 <pvPortMalloc+0x188>)
 8009d34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d36:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <pvPortMalloc+0x188>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	4b1b      	ldr	r3, [pc, #108]	; (8009da8 <pvPortMalloc+0x190>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d203      	bcs.n	8009d4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d42:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <pvPortMalloc+0x188>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a18      	ldr	r2, [pc, #96]	; (8009da8 <pvPortMalloc+0x190>)
 8009d48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4c:	685a      	ldr	r2, [r3, #4]
 8009d4e:	4b13      	ldr	r3, [pc, #76]	; (8009d9c <pvPortMalloc+0x184>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	431a      	orrs	r2, r3
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d5e:	4b13      	ldr	r3, [pc, #76]	; (8009dac <pvPortMalloc+0x194>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	3301      	adds	r3, #1
 8009d64:	4a11      	ldr	r2, [pc, #68]	; (8009dac <pvPortMalloc+0x194>)
 8009d66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d68:	f7fe fcfc 	bl	8008764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	f003 0307 	and.w	r3, r3, #7
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00a      	beq.n	8009d8c <pvPortMalloc+0x174>
	__asm volatile
 8009d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7a:	f383 8811 	msr	BASEPRI, r3
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	f3bf 8f4f 	dsb	sy
 8009d86:	60fb      	str	r3, [r7, #12]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <pvPortMalloc+0x172>
	return pvReturn;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3728      	adds	r7, #40	; 0x28
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20004a68 	.word	0x20004a68
 8009d9c:	20004a7c 	.word	0x20004a7c
 8009da0:	20004a6c 	.word	0x20004a6c
 8009da4:	20004a60 	.word	0x20004a60
 8009da8:	20004a70 	.word	0x20004a70
 8009dac:	20004a74 	.word	0x20004a74

08009db0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d04d      	beq.n	8009e5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	425b      	negs	r3, r3
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	4413      	add	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	4b24      	ldr	r3, [pc, #144]	; (8009e68 <vPortFree+0xb8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4013      	ands	r3, r2
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10a      	bne.n	8009df4 <vPortFree+0x44>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	60fb      	str	r3, [r7, #12]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <vPortFree+0x62>
	__asm volatile
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	60bb      	str	r3, [r7, #8]
}
 8009e0e:	bf00      	nop
 8009e10:	e7fe      	b.n	8009e10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <vPortFree+0xb8>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d01e      	beq.n	8009e5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d11a      	bne.n	8009e5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	4b0e      	ldr	r3, [pc, #56]	; (8009e68 <vPortFree+0xb8>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	43db      	mvns	r3, r3
 8009e32:	401a      	ands	r2, r3
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e38:	f7fe fc86 	bl	8008748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	4b0a      	ldr	r3, [pc, #40]	; (8009e6c <vPortFree+0xbc>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4413      	add	r3, r2
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <vPortFree+0xbc>)
 8009e48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e4a:	6938      	ldr	r0, [r7, #16]
 8009e4c:	f000 f874 	bl	8009f38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e50:	4b07      	ldr	r3, [pc, #28]	; (8009e70 <vPortFree+0xc0>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	3301      	adds	r3, #1
 8009e56:	4a06      	ldr	r2, [pc, #24]	; (8009e70 <vPortFree+0xc0>)
 8009e58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e5a:	f7fe fc83 	bl	8008764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e5e:	bf00      	nop
 8009e60:	3718      	adds	r7, #24
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	20004a7c 	.word	0x20004a7c
 8009e6c:	20004a6c 	.word	0x20004a6c
 8009e70:	20004a78 	.word	0x20004a78

08009e74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009e7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e80:	4b27      	ldr	r3, [pc, #156]	; (8009f20 <prvHeapInit+0xac>)
 8009e82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f003 0307 	and.w	r3, r3, #7
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00c      	beq.n	8009ea8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3307      	adds	r3, #7
 8009e92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f023 0307 	bic.w	r3, r3, #7
 8009e9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <prvHeapInit+0xac>)
 8009ea4:	4413      	add	r3, r2
 8009ea6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009eac:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <prvHeapInit+0xb0>)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009eb2:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <prvHeapInit+0xb0>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f023 0307 	bic.w	r3, r3, #7
 8009ece:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4a15      	ldr	r2, [pc, #84]	; (8009f28 <prvHeapInit+0xb4>)
 8009ed4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ed6:	4b14      	ldr	r3, [pc, #80]	; (8009f28 <prvHeapInit+0xb4>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2200      	movs	r2, #0
 8009edc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ede:	4b12      	ldr	r3, [pc, #72]	; (8009f28 <prvHeapInit+0xb4>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	1ad2      	subs	r2, r2, r3
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ef4:	4b0c      	ldr	r3, [pc, #48]	; (8009f28 <prvHeapInit+0xb4>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	4a0a      	ldr	r2, [pc, #40]	; (8009f2c <prvHeapInit+0xb8>)
 8009f02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4a09      	ldr	r2, [pc, #36]	; (8009f30 <prvHeapInit+0xbc>)
 8009f0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f0c:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <prvHeapInit+0xc0>)
 8009f0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f12:	601a      	str	r2, [r3, #0]
}
 8009f14:	bf00      	nop
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	20000e60 	.word	0x20000e60
 8009f24:	20004a60 	.word	0x20004a60
 8009f28:	20004a68 	.word	0x20004a68
 8009f2c:	20004a70 	.word	0x20004a70
 8009f30:	20004a6c 	.word	0x20004a6c
 8009f34:	20004a7c 	.word	0x20004a7c

08009f38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f40:	4b28      	ldr	r3, [pc, #160]	; (8009fe4 <prvInsertBlockIntoFreeList+0xac>)
 8009f42:	60fb      	str	r3, [r7, #12]
 8009f44:	e002      	b.n	8009f4c <prvInsertBlockIntoFreeList+0x14>
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d8f7      	bhi.n	8009f46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	4413      	add	r3, r2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d108      	bne.n	8009f7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	441a      	add	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	68ba      	ldr	r2, [r7, #8]
 8009f84:	441a      	add	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	d118      	bne.n	8009fc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	4b15      	ldr	r3, [pc, #84]	; (8009fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d00d      	beq.n	8009fb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	441a      	add	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	e008      	b.n	8009fc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fb6:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	e003      	b.n	8009fc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d002      	beq.n	8009fd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	20004a60 	.word	0x20004a60
 8009fe8:	20004a68 	.word	0x20004a68

08009fec <__errno>:
 8009fec:	4b01      	ldr	r3, [pc, #4]	; (8009ff4 <__errno+0x8>)
 8009fee:	6818      	ldr	r0, [r3, #0]
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	20000020 	.word	0x20000020

08009ff8 <__libc_init_array>:
 8009ff8:	b570      	push	{r4, r5, r6, lr}
 8009ffa:	4d0d      	ldr	r5, [pc, #52]	; (800a030 <__libc_init_array+0x38>)
 8009ffc:	4c0d      	ldr	r4, [pc, #52]	; (800a034 <__libc_init_array+0x3c>)
 8009ffe:	1b64      	subs	r4, r4, r5
 800a000:	10a4      	asrs	r4, r4, #2
 800a002:	2600      	movs	r6, #0
 800a004:	42a6      	cmp	r6, r4
 800a006:	d109      	bne.n	800a01c <__libc_init_array+0x24>
 800a008:	4d0b      	ldr	r5, [pc, #44]	; (800a038 <__libc_init_array+0x40>)
 800a00a:	4c0c      	ldr	r4, [pc, #48]	; (800a03c <__libc_init_array+0x44>)
 800a00c:	f000 f970 	bl	800a2f0 <_init>
 800a010:	1b64      	subs	r4, r4, r5
 800a012:	10a4      	asrs	r4, r4, #2
 800a014:	2600      	movs	r6, #0
 800a016:	42a6      	cmp	r6, r4
 800a018:	d105      	bne.n	800a026 <__libc_init_array+0x2e>
 800a01a:	bd70      	pop	{r4, r5, r6, pc}
 800a01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a020:	4798      	blx	r3
 800a022:	3601      	adds	r6, #1
 800a024:	e7ee      	b.n	800a004 <__libc_init_array+0xc>
 800a026:	f855 3b04 	ldr.w	r3, [r5], #4
 800a02a:	4798      	blx	r3
 800a02c:	3601      	adds	r6, #1
 800a02e:	e7f2      	b.n	800a016 <__libc_init_array+0x1e>
 800a030:	0800ba1c 	.word	0x0800ba1c
 800a034:	0800ba1c 	.word	0x0800ba1c
 800a038:	0800ba1c 	.word	0x0800ba1c
 800a03c:	0800ba20 	.word	0x0800ba20

0800a040 <__retarget_lock_acquire_recursive>:
 800a040:	4770      	bx	lr

0800a042 <__retarget_lock_release_recursive>:
 800a042:	4770      	bx	lr

0800a044 <malloc>:
 800a044:	4b02      	ldr	r3, [pc, #8]	; (800a050 <malloc+0xc>)
 800a046:	4601      	mov	r1, r0
 800a048:	6818      	ldr	r0, [r3, #0]
 800a04a:	f000 b871 	b.w	800a130 <_malloc_r>
 800a04e:	bf00      	nop
 800a050:	20000020 	.word	0x20000020

0800a054 <free>:
 800a054:	4b02      	ldr	r3, [pc, #8]	; (800a060 <free+0xc>)
 800a056:	4601      	mov	r1, r0
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f000 b819 	b.w	800a090 <_free_r>
 800a05e:	bf00      	nop
 800a060:	20000020 	.word	0x20000020

0800a064 <memcpy>:
 800a064:	440a      	add	r2, r1
 800a066:	4291      	cmp	r1, r2
 800a068:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a06c:	d100      	bne.n	800a070 <memcpy+0xc>
 800a06e:	4770      	bx	lr
 800a070:	b510      	push	{r4, lr}
 800a072:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a07a:	4291      	cmp	r1, r2
 800a07c:	d1f9      	bne.n	800a072 <memcpy+0xe>
 800a07e:	bd10      	pop	{r4, pc}

0800a080 <memset>:
 800a080:	4402      	add	r2, r0
 800a082:	4603      	mov	r3, r0
 800a084:	4293      	cmp	r3, r2
 800a086:	d100      	bne.n	800a08a <memset+0xa>
 800a088:	4770      	bx	lr
 800a08a:	f803 1b01 	strb.w	r1, [r3], #1
 800a08e:	e7f9      	b.n	800a084 <memset+0x4>

0800a090 <_free_r>:
 800a090:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a092:	2900      	cmp	r1, #0
 800a094:	d048      	beq.n	800a128 <_free_r+0x98>
 800a096:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a09a:	9001      	str	r0, [sp, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f1a1 0404 	sub.w	r4, r1, #4
 800a0a2:	bfb8      	it	lt
 800a0a4:	18e4      	addlt	r4, r4, r3
 800a0a6:	f000 f917 	bl	800a2d8 <__malloc_lock>
 800a0aa:	4a20      	ldr	r2, [pc, #128]	; (800a12c <_free_r+0x9c>)
 800a0ac:	9801      	ldr	r0, [sp, #4]
 800a0ae:	6813      	ldr	r3, [r2, #0]
 800a0b0:	4615      	mov	r5, r2
 800a0b2:	b933      	cbnz	r3, 800a0c2 <_free_r+0x32>
 800a0b4:	6063      	str	r3, [r4, #4]
 800a0b6:	6014      	str	r4, [r2, #0]
 800a0b8:	b003      	add	sp, #12
 800a0ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0be:	f000 b911 	b.w	800a2e4 <__malloc_unlock>
 800a0c2:	42a3      	cmp	r3, r4
 800a0c4:	d90b      	bls.n	800a0de <_free_r+0x4e>
 800a0c6:	6821      	ldr	r1, [r4, #0]
 800a0c8:	1862      	adds	r2, r4, r1
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	bf04      	itt	eq
 800a0ce:	681a      	ldreq	r2, [r3, #0]
 800a0d0:	685b      	ldreq	r3, [r3, #4]
 800a0d2:	6063      	str	r3, [r4, #4]
 800a0d4:	bf04      	itt	eq
 800a0d6:	1852      	addeq	r2, r2, r1
 800a0d8:	6022      	streq	r2, [r4, #0]
 800a0da:	602c      	str	r4, [r5, #0]
 800a0dc:	e7ec      	b.n	800a0b8 <_free_r+0x28>
 800a0de:	461a      	mov	r2, r3
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	b10b      	cbz	r3, 800a0e8 <_free_r+0x58>
 800a0e4:	42a3      	cmp	r3, r4
 800a0e6:	d9fa      	bls.n	800a0de <_free_r+0x4e>
 800a0e8:	6811      	ldr	r1, [r2, #0]
 800a0ea:	1855      	adds	r5, r2, r1
 800a0ec:	42a5      	cmp	r5, r4
 800a0ee:	d10b      	bne.n	800a108 <_free_r+0x78>
 800a0f0:	6824      	ldr	r4, [r4, #0]
 800a0f2:	4421      	add	r1, r4
 800a0f4:	1854      	adds	r4, r2, r1
 800a0f6:	42a3      	cmp	r3, r4
 800a0f8:	6011      	str	r1, [r2, #0]
 800a0fa:	d1dd      	bne.n	800a0b8 <_free_r+0x28>
 800a0fc:	681c      	ldr	r4, [r3, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	6053      	str	r3, [r2, #4]
 800a102:	4421      	add	r1, r4
 800a104:	6011      	str	r1, [r2, #0]
 800a106:	e7d7      	b.n	800a0b8 <_free_r+0x28>
 800a108:	d902      	bls.n	800a110 <_free_r+0x80>
 800a10a:	230c      	movs	r3, #12
 800a10c:	6003      	str	r3, [r0, #0]
 800a10e:	e7d3      	b.n	800a0b8 <_free_r+0x28>
 800a110:	6825      	ldr	r5, [r4, #0]
 800a112:	1961      	adds	r1, r4, r5
 800a114:	428b      	cmp	r3, r1
 800a116:	bf04      	itt	eq
 800a118:	6819      	ldreq	r1, [r3, #0]
 800a11a:	685b      	ldreq	r3, [r3, #4]
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	bf04      	itt	eq
 800a120:	1949      	addeq	r1, r1, r5
 800a122:	6021      	streq	r1, [r4, #0]
 800a124:	6054      	str	r4, [r2, #4]
 800a126:	e7c7      	b.n	800a0b8 <_free_r+0x28>
 800a128:	b003      	add	sp, #12
 800a12a:	bd30      	pop	{r4, r5, pc}
 800a12c:	20004a80 	.word	0x20004a80

0800a130 <_malloc_r>:
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a132:	1ccd      	adds	r5, r1, #3
 800a134:	f025 0503 	bic.w	r5, r5, #3
 800a138:	3508      	adds	r5, #8
 800a13a:	2d0c      	cmp	r5, #12
 800a13c:	bf38      	it	cc
 800a13e:	250c      	movcc	r5, #12
 800a140:	2d00      	cmp	r5, #0
 800a142:	4606      	mov	r6, r0
 800a144:	db01      	blt.n	800a14a <_malloc_r+0x1a>
 800a146:	42a9      	cmp	r1, r5
 800a148:	d903      	bls.n	800a152 <_malloc_r+0x22>
 800a14a:	230c      	movs	r3, #12
 800a14c:	6033      	str	r3, [r6, #0]
 800a14e:	2000      	movs	r0, #0
 800a150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a152:	f000 f8c1 	bl	800a2d8 <__malloc_lock>
 800a156:	4921      	ldr	r1, [pc, #132]	; (800a1dc <_malloc_r+0xac>)
 800a158:	680a      	ldr	r2, [r1, #0]
 800a15a:	4614      	mov	r4, r2
 800a15c:	b99c      	cbnz	r4, 800a186 <_malloc_r+0x56>
 800a15e:	4f20      	ldr	r7, [pc, #128]	; (800a1e0 <_malloc_r+0xb0>)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	b923      	cbnz	r3, 800a16e <_malloc_r+0x3e>
 800a164:	4621      	mov	r1, r4
 800a166:	4630      	mov	r0, r6
 800a168:	f000 f8a6 	bl	800a2b8 <_sbrk_r>
 800a16c:	6038      	str	r0, [r7, #0]
 800a16e:	4629      	mov	r1, r5
 800a170:	4630      	mov	r0, r6
 800a172:	f000 f8a1 	bl	800a2b8 <_sbrk_r>
 800a176:	1c43      	adds	r3, r0, #1
 800a178:	d123      	bne.n	800a1c2 <_malloc_r+0x92>
 800a17a:	230c      	movs	r3, #12
 800a17c:	6033      	str	r3, [r6, #0]
 800a17e:	4630      	mov	r0, r6
 800a180:	f000 f8b0 	bl	800a2e4 <__malloc_unlock>
 800a184:	e7e3      	b.n	800a14e <_malloc_r+0x1e>
 800a186:	6823      	ldr	r3, [r4, #0]
 800a188:	1b5b      	subs	r3, r3, r5
 800a18a:	d417      	bmi.n	800a1bc <_malloc_r+0x8c>
 800a18c:	2b0b      	cmp	r3, #11
 800a18e:	d903      	bls.n	800a198 <_malloc_r+0x68>
 800a190:	6023      	str	r3, [r4, #0]
 800a192:	441c      	add	r4, r3
 800a194:	6025      	str	r5, [r4, #0]
 800a196:	e004      	b.n	800a1a2 <_malloc_r+0x72>
 800a198:	6863      	ldr	r3, [r4, #4]
 800a19a:	42a2      	cmp	r2, r4
 800a19c:	bf0c      	ite	eq
 800a19e:	600b      	streq	r3, [r1, #0]
 800a1a0:	6053      	strne	r3, [r2, #4]
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	f000 f89e 	bl	800a2e4 <__malloc_unlock>
 800a1a8:	f104 000b 	add.w	r0, r4, #11
 800a1ac:	1d23      	adds	r3, r4, #4
 800a1ae:	f020 0007 	bic.w	r0, r0, #7
 800a1b2:	1ac2      	subs	r2, r0, r3
 800a1b4:	d0cc      	beq.n	800a150 <_malloc_r+0x20>
 800a1b6:	1a1b      	subs	r3, r3, r0
 800a1b8:	50a3      	str	r3, [r4, r2]
 800a1ba:	e7c9      	b.n	800a150 <_malloc_r+0x20>
 800a1bc:	4622      	mov	r2, r4
 800a1be:	6864      	ldr	r4, [r4, #4]
 800a1c0:	e7cc      	b.n	800a15c <_malloc_r+0x2c>
 800a1c2:	1cc4      	adds	r4, r0, #3
 800a1c4:	f024 0403 	bic.w	r4, r4, #3
 800a1c8:	42a0      	cmp	r0, r4
 800a1ca:	d0e3      	beq.n	800a194 <_malloc_r+0x64>
 800a1cc:	1a21      	subs	r1, r4, r0
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f000 f872 	bl	800a2b8 <_sbrk_r>
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d1dd      	bne.n	800a194 <_malloc_r+0x64>
 800a1d8:	e7cf      	b.n	800a17a <_malloc_r+0x4a>
 800a1da:	bf00      	nop
 800a1dc:	20004a80 	.word	0x20004a80
 800a1e0:	20004a84 	.word	0x20004a84

0800a1e4 <cleanup_glue>:
 800a1e4:	b538      	push	{r3, r4, r5, lr}
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	6809      	ldr	r1, [r1, #0]
 800a1ea:	4605      	mov	r5, r0
 800a1ec:	b109      	cbz	r1, 800a1f2 <cleanup_glue+0xe>
 800a1ee:	f7ff fff9 	bl	800a1e4 <cleanup_glue>
 800a1f2:	4621      	mov	r1, r4
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fa:	f7ff bf49 	b.w	800a090 <_free_r>
	...

0800a200 <_reclaim_reent>:
 800a200:	4b2c      	ldr	r3, [pc, #176]	; (800a2b4 <_reclaim_reent+0xb4>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4283      	cmp	r3, r0
 800a206:	b570      	push	{r4, r5, r6, lr}
 800a208:	4604      	mov	r4, r0
 800a20a:	d051      	beq.n	800a2b0 <_reclaim_reent+0xb0>
 800a20c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a20e:	b143      	cbz	r3, 800a222 <_reclaim_reent+0x22>
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d14a      	bne.n	800a2ac <_reclaim_reent+0xac>
 800a216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a218:	6819      	ldr	r1, [r3, #0]
 800a21a:	b111      	cbz	r1, 800a222 <_reclaim_reent+0x22>
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7ff ff37 	bl	800a090 <_free_r>
 800a222:	6961      	ldr	r1, [r4, #20]
 800a224:	b111      	cbz	r1, 800a22c <_reclaim_reent+0x2c>
 800a226:	4620      	mov	r0, r4
 800a228:	f7ff ff32 	bl	800a090 <_free_r>
 800a22c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a22e:	b111      	cbz	r1, 800a236 <_reclaim_reent+0x36>
 800a230:	4620      	mov	r0, r4
 800a232:	f7ff ff2d 	bl	800a090 <_free_r>
 800a236:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a238:	b111      	cbz	r1, 800a240 <_reclaim_reent+0x40>
 800a23a:	4620      	mov	r0, r4
 800a23c:	f7ff ff28 	bl	800a090 <_free_r>
 800a240:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a242:	b111      	cbz	r1, 800a24a <_reclaim_reent+0x4a>
 800a244:	4620      	mov	r0, r4
 800a246:	f7ff ff23 	bl	800a090 <_free_r>
 800a24a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a24c:	b111      	cbz	r1, 800a254 <_reclaim_reent+0x54>
 800a24e:	4620      	mov	r0, r4
 800a250:	f7ff ff1e 	bl	800a090 <_free_r>
 800a254:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a256:	b111      	cbz	r1, 800a25e <_reclaim_reent+0x5e>
 800a258:	4620      	mov	r0, r4
 800a25a:	f7ff ff19 	bl	800a090 <_free_r>
 800a25e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a260:	b111      	cbz	r1, 800a268 <_reclaim_reent+0x68>
 800a262:	4620      	mov	r0, r4
 800a264:	f7ff ff14 	bl	800a090 <_free_r>
 800a268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a26a:	b111      	cbz	r1, 800a272 <_reclaim_reent+0x72>
 800a26c:	4620      	mov	r0, r4
 800a26e:	f7ff ff0f 	bl	800a090 <_free_r>
 800a272:	69a3      	ldr	r3, [r4, #24]
 800a274:	b1e3      	cbz	r3, 800a2b0 <_reclaim_reent+0xb0>
 800a276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a278:	4620      	mov	r0, r4
 800a27a:	4798      	blx	r3
 800a27c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a27e:	b1b9      	cbz	r1, 800a2b0 <_reclaim_reent+0xb0>
 800a280:	4620      	mov	r0, r4
 800a282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a286:	f7ff bfad 	b.w	800a1e4 <cleanup_glue>
 800a28a:	5949      	ldr	r1, [r1, r5]
 800a28c:	b941      	cbnz	r1, 800a2a0 <_reclaim_reent+0xa0>
 800a28e:	3504      	adds	r5, #4
 800a290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a292:	2d80      	cmp	r5, #128	; 0x80
 800a294:	68d9      	ldr	r1, [r3, #12]
 800a296:	d1f8      	bne.n	800a28a <_reclaim_reent+0x8a>
 800a298:	4620      	mov	r0, r4
 800a29a:	f7ff fef9 	bl	800a090 <_free_r>
 800a29e:	e7ba      	b.n	800a216 <_reclaim_reent+0x16>
 800a2a0:	680e      	ldr	r6, [r1, #0]
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f7ff fef4 	bl	800a090 <_free_r>
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	e7ef      	b.n	800a28c <_reclaim_reent+0x8c>
 800a2ac:	2500      	movs	r5, #0
 800a2ae:	e7ef      	b.n	800a290 <_reclaim_reent+0x90>
 800a2b0:	bd70      	pop	{r4, r5, r6, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20000020 	.word	0x20000020

0800a2b8 <_sbrk_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4d06      	ldr	r5, [pc, #24]	; (800a2d4 <_sbrk_r+0x1c>)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4604      	mov	r4, r0
 800a2c0:	4608      	mov	r0, r1
 800a2c2:	602b      	str	r3, [r5, #0]
 800a2c4:	f7f7 fb7e 	bl	80019c4 <_sbrk>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_sbrk_r+0x1a>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_sbrk_r+0x1a>
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	20004e74 	.word	0x20004e74

0800a2d8 <__malloc_lock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__malloc_lock+0x8>)
 800a2da:	f7ff beb1 	b.w	800a040 <__retarget_lock_acquire_recursive>
 800a2de:	bf00      	nop
 800a2e0:	20004e6c 	.word	0x20004e6c

0800a2e4 <__malloc_unlock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	; (800a2ec <__malloc_unlock+0x8>)
 800a2e6:	f7ff beac 	b.w	800a042 <__retarget_lock_release_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	20004e6c 	.word	0x20004e6c

0800a2f0 <_init>:
 800a2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2f2:	bf00      	nop
 800a2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2f6:	bc08      	pop	{r3}
 800a2f8:	469e      	mov	lr, r3
 800a2fa:	4770      	bx	lr

0800a2fc <_fini>:
 800a2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fe:	bf00      	nop
 800a300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a302:	bc08      	pop	{r3}
 800a304:	469e      	mov	lr, r3
 800a306:	4770      	bx	lr
