
Amplifier.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b3c  08009d54  08009d54  00019d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f890  0800f890  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800f890  0800f890  0001f890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f898  0800f898  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f898  0800f898  0001f898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f89c  0800f89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800f8a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d28  20000084  0800f924  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dac  0800f924  00024dac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236bb  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004780  00000000  00000000  0004376f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b28  00000000  00000000  00047ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001990  00000000  00000000  00049a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000054e9  00000000  00000000  0004b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f4f7  00000000  00000000  00050891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd954  00000000  00000000  0006fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014d6dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007428  00000000  00000000  0014d730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d3c 	.word	0x08009d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08009d3c 	.word	0x08009d3c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f002 fe3a 	bl	8003144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f88a 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fbf2 	bl	8000cbc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 fbd0 	bl	8000c7c <MX_DMA_Init>
  MX_I2C1_Init();
 80004dc:	f000 f906 	bl	80006ec <MX_I2C1_Init>
  MX_I2C2_Init();
 80004e0:	f000 f932 	bl	8000748 <MX_I2C2_Init>
  MX_RTC_Init();
 80004e4:	f000 f95e 	bl	80007a4 <MX_RTC_Init>
  MX_SPI1_Init();
 80004e8:	f000 f982 	bl	80007f0 <MX_SPI1_Init>
  MX_SPI3_Init();
 80004ec:	f000 f9b6 	bl	800085c <MX_SPI3_Init>
  MX_TIM1_Init();
 80004f0:	f000 f9ea 	bl	80008c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80004f4:	f000 fa96 	bl	8000a24 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004f8:	f000 faf8 	bl	8000aec <MX_TIM4_Init>
  MX_TIM5_Init();
 80004fc:	f000 fb70 	bl	8000be0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000500:	f006 fbb6 	bl	8006c70 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of displayQueue */
  displayQueueHandle = osMessageQueueNew (16, sizeof(uint32_t), &displayQueue_attributes);
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <main+0xc4>)
 8000506:	2104      	movs	r1, #4
 8000508:	2010      	movs	r0, #16
 800050a:	f006 fca8 	bl	8006e5e <osMessageQueueNew>
 800050e:	4603      	mov	r3, r0
 8000510:	4a1f      	ldr	r2, [pc, #124]	; (8000590 <main+0xc8>)
 8000512:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of idleTask */
  idleTaskHandle = osThreadNew(idleTaskEntry, NULL, &idleTask_attributes);
 8000514:	4a1f      	ldr	r2, [pc, #124]	; (8000594 <main+0xcc>)
 8000516:	2100      	movs	r1, #0
 8000518:	481f      	ldr	r0, [pc, #124]	; (8000598 <main+0xd0>)
 800051a:	f006 fbf3 	bl	8006d04 <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a1e      	ldr	r2, [pc, #120]	; (800059c <main+0xd4>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(buttonTaskEntry, NULL, &buttonTask_attributes);
 8000524:	4a1e      	ldr	r2, [pc, #120]	; (80005a0 <main+0xd8>)
 8000526:	2100      	movs	r1, #0
 8000528:	481e      	ldr	r0, [pc, #120]	; (80005a4 <main+0xdc>)
 800052a:	f006 fbeb 	bl	8006d04 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a1d      	ldr	r2, [pc, #116]	; (80005a8 <main+0xe0>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of fanTask */
  fanTaskHandle = osThreadNew(fanTaskEntry, NULL, &fanTask_attributes);
 8000534:	4a1d      	ldr	r2, [pc, #116]	; (80005ac <main+0xe4>)
 8000536:	2100      	movs	r1, #0
 8000538:	481d      	ldr	r0, [pc, #116]	; (80005b0 <main+0xe8>)
 800053a:	f006 fbe3 	bl	8006d04 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <main+0xec>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(displayTaskEntry, NULL, &displayTask_attributes);
 8000544:	4a1c      	ldr	r2, [pc, #112]	; (80005b8 <main+0xf0>)
 8000546:	2100      	movs	r1, #0
 8000548:	481c      	ldr	r0, [pc, #112]	; (80005bc <main+0xf4>)
 800054a:	f006 fbdb 	bl	8006d04 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <main+0xf8>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of touchTask */
  touchTaskHandle = osThreadNew(touchTaskEntry, NULL, &touchTask_attributes);
 8000554:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <main+0xfc>)
 8000556:	2100      	movs	r1, #0
 8000558:	481b      	ldr	r0, [pc, #108]	; (80005c8 <main+0x100>)
 800055a:	f006 fbd3 	bl	8006d04 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a1a      	ldr	r2, [pc, #104]	; (80005cc <main+0x104>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of dspTask */
  dspTaskHandle = osThreadNew(dspTaskEntry, NULL, &dspTask_attributes);
 8000564:	4a1a      	ldr	r2, [pc, #104]	; (80005d0 <main+0x108>)
 8000566:	2100      	movs	r1, #0
 8000568:	481a      	ldr	r0, [pc, #104]	; (80005d4 <main+0x10c>)
 800056a:	f006 fbcb 	bl	8006d04 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <main+0x110>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of sensorATask */
  sensorATaskHandle = osThreadNew(sensorATaskEntry, NULL, &sensorATask_attributes);
 8000574:	4a19      	ldr	r2, [pc, #100]	; (80005dc <main+0x114>)
 8000576:	2100      	movs	r1, #0
 8000578:	4819      	ldr	r0, [pc, #100]	; (80005e0 <main+0x118>)
 800057a:	f006 fbc3 	bl	8006d04 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <main+0x11c>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f006 fb98 	bl	8006cb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0xc0>
 800058a:	bf00      	nop
 800058c:	08009f00 	.word	0x08009f00
 8000590:	20004c70 	.word	0x20004c70
 8000594:	08009e04 	.word	0x08009e04
 8000598:	08000edd 	.word	0x08000edd
 800059c:	20004c10 	.word	0x20004c10
 80005a0:	08009e28 	.word	0x08009e28
 80005a4:	08000f0d 	.word	0x08000f0d
 80005a8:	20004c6c 	.word	0x20004c6c
 80005ac:	08009e4c 	.word	0x08009e4c
 80005b0:	080011bd 	.word	0x080011bd
 80005b4:	20004ba4 	.word	0x20004ba4
 80005b8:	08009e70 	.word	0x08009e70
 80005bc:	08001239 	.word	0x08001239
 80005c0:	20004ab4 	.word	0x20004ab4
 80005c4:	08009e94 	.word	0x08009e94
 80005c8:	08001251 	.word	0x08001251
 80005cc:	20004b48 	.word	0x20004b48
 80005d0:	08009eb8 	.word	0x08009eb8
 80005d4:	08001263 	.word	0x08001263
 80005d8:	200049c0 	.word	0x200049c0
 80005dc:	08009edc 	.word	0x08009edc
 80005e0:	08001275 	.word	0x08001275
 80005e4:	20004c74 	.word	0x20004c74

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b098      	sub	sp, #96	; 0x60
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f2:	2230      	movs	r2, #48	; 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f009 fad0 	bl	8009b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b31      	ldr	r3, [pc, #196]	; (80006e4 <SystemClock_Config+0xfc>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	4a30      	ldr	r2, [pc, #192]	; (80006e4 <SystemClock_Config+0xfc>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000628:	6413      	str	r3, [r2, #64]	; 0x40
 800062a:	4b2e      	ldr	r3, [pc, #184]	; (80006e4 <SystemClock_Config+0xfc>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <SystemClock_Config+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <SystemClock_Config+0x100>)
 8000640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0x100>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000652:	2309      	movs	r3, #9
 8000654:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000656:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800065a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000664:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800066a:	2306      	movs	r3, #6
 800066c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800066e:	23a8      	movs	r3, #168	; 0xa8
 8000670:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000676:	2307      	movs	r3, #7
 8000678:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fd2a 	bl	80040d8 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800068a:	f000 fe11 	bl	80012b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2302      	movs	r3, #2
 8000694:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2105      	movs	r1, #5
 80006ac:	4618      	mov	r0, r3
 80006ae:	f003 ff8b 	bl	80045c8 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006b8:	f000 fdfa 	bl	80012b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006bc:	2302      	movs	r3, #2
 80006be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80006c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006c4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 f97e 	bl	80049cc <HAL_RCCEx_PeriphCLKConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006d6:	f000 fdeb 	bl	80012b0 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3760      	adds	r7, #96	; 0x60
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	; (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	; (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_I2C1_Init+0x50>)
 800072a:	f003 fb91 	bl	8003e50 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 fdbc 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20004a0c 	.word	0x20004a0c
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C2_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_I2C2_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2C2_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_I2C2_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C2_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2C2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_I2C2_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2C2_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2C2_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2C2_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2C2_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C2_Init+0x50>)
 8000786:	f003 fb63 	bl	8003e50 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000790:	f000 fd8e 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20004a60 	.word	0x20004a60
 800079c:	40005800 	.word	0x40005800
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_RTC_Init+0x44>)
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <MX_RTC_Init+0x48>)
 80007ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_RTC_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_RTC_Init+0x44>)
 80007b6:	227f      	movs	r2, #127	; 0x7f
 80007b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_RTC_Init+0x44>)
 80007bc:	22ff      	movs	r2, #255	; 0xff
 80007be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_RTC_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_RTC_Init+0x44>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_RTC_Init+0x44>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_RTC_Init+0x44>)
 80007d4:	f004 f9dc 	bl	8004b90 <HAL_RTC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80007de:	f000 fd67 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20004ba8 	.word	0x20004ba8
 80007ec:	40002800 	.word	0x40002800

080007f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_SPI1_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_SPI1_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_SPI1_Init+0x64>)
 80007fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_SPI1_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_SPI1_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_SPI1_Init+0x64>)
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_SPI1_Init+0x64>)
 8000824:	2220      	movs	r2, #32
 8000826:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_SPI1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_SPI1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_SPI1_Init+0x64>)
 800083c:	220a      	movs	r2, #10
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_SPI1_Init+0x64>)
 8000842:	f004 fa8a 	bl	8004d5a <HAL_SPI_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 fd30 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20004c14 	.word	0x20004c14
 8000858:	40013000 	.word	0x40013000

0800085c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000860:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <MX_SPI3_Init+0x64>)
 8000862:	4a18      	ldr	r2, [pc, #96]	; (80008c4 <MX_SPI3_Init+0x68>)
 8000864:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI3_Init+0x64>)
 8000868:	f44f 7282 	mov.w	r2, #260	; 0x104
 800086c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI3_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_SPI3_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI3_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI3_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI3_Init+0x64>)
 8000888:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800088c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI3_Init+0x64>)
 8000890:	2230      	movs	r2, #48	; 0x30
 8000892:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <MX_SPI3_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI3_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MX_SPI3_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI3_Init+0x64>)
 80008a8:	220a      	movs	r2, #10
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <MX_SPI3_Init+0x64>)
 80008ae:	f004 fa54 	bl	8004d5a <HAL_SPI_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008b8:	f000 fcfa 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20004b4c 	.word	0x20004b4c
 80008c4:	40003c00 	.word	0x40003c00

080008c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b096      	sub	sp, #88	; 0x58
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2220      	movs	r2, #32
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f009 f94b 	bl	8009b9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000906:	4b45      	ldr	r3, [pc, #276]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000908:	4a45      	ldr	r2, [pc, #276]	; (8000a20 <MX_TIM1_Init+0x158>)
 800090a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800090c:	4b43      	ldr	r3, [pc, #268]	; (8000a1c <MX_TIM1_Init+0x154>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b42      	ldr	r3, [pc, #264]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6700;
 8000918:	4b40      	ldr	r3, [pc, #256]	; (8000a1c <MX_TIM1_Init+0x154>)
 800091a:	f641 222c 	movw	r2, #6700	; 0x1a2c
 800091e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000920:	4b3e      	ldr	r3, [pc, #248]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000926:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000928:	4b3c      	ldr	r3, [pc, #240]	; (8000a1c <MX_TIM1_Init+0x154>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800092e:	4b3b      	ldr	r3, [pc, #236]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000934:	4839      	ldr	r0, [pc, #228]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000936:	f004 fdf5 	bl	8005524 <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000940:	f000 fcb6 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000944:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000948:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800094a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800094e:	4619      	mov	r1, r3
 8000950:	4832      	ldr	r0, [pc, #200]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000952:	f005 fb41 	bl	8005fd8 <HAL_TIM_ConfigClockSource>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800095c:	f000 fca8 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000960:	482e      	ldr	r0, [pc, #184]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000962:	f004 ff07 	bl	8005774 <HAL_TIM_PWM_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800096c:	f000 fca0 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000978:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800097c:	4619      	mov	r1, r3
 800097e:	4827      	ldr	r0, [pc, #156]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000980:	f006 f850 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800098a:	f000 fc91 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009a6:	2300      	movs	r3, #0
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	2200      	movs	r2, #0
 80009b0:	4619      	mov	r1, r3
 80009b2:	481a      	ldr	r0, [pc, #104]	; (8000a1c <MX_TIM1_Init+0x154>)
 80009b4:	f005 fa52 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80009be:	f000 fc77 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	2204      	movs	r2, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <MX_TIM1_Init+0x154>)
 80009cc:	f005 fa46 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80009d6:	f000 fc6b 	bl	80012b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4807      	ldr	r0, [pc, #28]	; (8000a1c <MX_TIM1_Init+0x154>)
 80009fe:	f006 f88d 	bl	8006b1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000a08:	f000 fc52 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MX_TIM1_Init+0x154>)
 8000a0e:	f000 fe95 	bl	800173c <HAL_TIM_MspPostInit>

}
 8000a12:	bf00      	nop
 8000a14:	3758      	adds	r7, #88	; 0x58
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20004bc8 	.word	0x20004bc8
 8000a20:	40010000 	.word	0x40010000

08000a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2a:	f107 0320 	add.w	r3, r7, #32
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000a48:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <MX_TIM3_Init+0xc4>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a6c:	481d      	ldr	r0, [pc, #116]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000a6e:	f004 fe81 	bl	8005774 <HAL_TIM_PWM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 fc1a 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000a8c:	f005 ffca 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a96:	f000 fc0b 	bl	80012b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2360      	movs	r3, #96	; 0x60
 8000a9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000ab2:	f005 f9d3 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000abc:	f000 fbf8 	bl	80012b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2204      	movs	r2, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4807      	ldr	r0, [pc, #28]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000ac8:	f005 f9c8 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ad2:	f000 fbed 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_TIM3_Init+0xc0>)
 8000ad8:	f000 fe30 	bl	800173c <HAL_TIM_MspPostInit>

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20004b00 	.word	0x20004b00
 8000ae8:	40000400 	.word	0x40000400

08000aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af2:	f107 0310 	add.w	r3, r7, #16
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b0a:	4a34      	ldr	r2, [pc, #208]	; (8000bdc <MX_TIM4_Init+0xf0>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b0e:	4b32      	ldr	r3, [pc, #200]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b1a:	4b2f      	ldr	r3, [pc, #188]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000b2e:	482a      	ldr	r0, [pc, #168]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b30:	f004 ffa8 	bl	8005a84 <HAL_TIM_IC_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 fbb9 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b4e:	f005 ff69 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b58:	f000 fbaa 	bl	80012b0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b60:	2301      	movs	r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	4619      	mov	r1, r3
 8000b72:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b74:	f005 f8dd 	bl	8005d32 <HAL_TIM_IC_ConfigChannel>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000b7e:	f000 fb97 	bl	80012b0 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b82:	2302      	movs	r3, #2
 8000b84:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	2204      	movs	r2, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4812      	ldr	r0, [pc, #72]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000b8e:	f005 f8d0 	bl	8005d32 <HAL_TIM_IC_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000b98:	f000 fb8a 	bl	80012b0 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2208      	movs	r2, #8
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000ba8:	f005 f8c3 	bl	8005d32 <HAL_TIM_IC_ConfigChannel>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000bb2:	f000 fb7d 	bl	80012b0 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_TIM4_Init+0xec>)
 8000bc2:	f005 f8b6 	bl	8005d32 <HAL_TIM_IC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 8000bcc:	f000 fb70 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200049c4 	.word	0x200049c4
 8000bdc:	40000800 	.word	0x40000800

08000be0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <MX_TIM5_Init+0x98>)
 8000c00:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000c04:	2253      	movs	r2, #83	; 0x53
 8000c06:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFF;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c14:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000c22:	4814      	ldr	r0, [pc, #80]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000c24:	f004 fc7e 	bl	8005524 <HAL_TIM_Base_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000c2e:	f000 fb3f 	bl	80012b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c38:	f107 0308 	add.w	r3, r7, #8
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000c40:	f005 f9ca 	bl	8005fd8 <HAL_TIM_ConfigClockSource>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000c4a:	f000 fb31 	bl	80012b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_TIM5_Init+0x94>)
 8000c5c:	f005 fee2 	bl	8006a24 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000c66:	f000 fb23 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20004ab8 	.word	0x20004ab8
 8000c78:	40000c00 	.word	0x40000c00

08000c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_DMA_Init+0x3c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a0b      	ldr	r2, [pc, #44]	; (8000cb8 <MX_DMA_Init+0x3c>)
 8000c8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_DMA_Init+0x3c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2044      	movs	r0, #68	; 0x44
 8000ca4:	f002 fb6c 	bl	8003380 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000ca8:	2044      	movs	r0, #68	; 0x44
 8000caa:	f002 fb85 	bl	80033b8 <HAL_NVIC_EnableIRQ>

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40023800 	.word	0x40023800

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	; 0x30
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 031c 	add.w	r3, r7, #28
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61bb      	str	r3, [r7, #24]
 8000cd6:	4b7b      	ldr	r3, [pc, #492]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a7a      	ldr	r2, [pc, #488]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b78      	ldr	r3, [pc, #480]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	61bb      	str	r3, [r7, #24]
 8000cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
 8000cf2:	4b74      	ldr	r3, [pc, #464]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a73      	ldr	r2, [pc, #460]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b71      	ldr	r3, [pc, #452]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	617b      	str	r3, [r7, #20]
 8000d08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b6d      	ldr	r3, [pc, #436]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a6c      	ldr	r2, [pc, #432]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b6a      	ldr	r3, [pc, #424]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0304 	and.w	r3, r3, #4
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b66      	ldr	r3, [pc, #408]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a65      	ldr	r2, [pc, #404]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b63      	ldr	r3, [pc, #396]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	4b5f      	ldr	r3, [pc, #380]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a5e      	ldr	r2, [pc, #376]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d4c:	f043 0302 	orr.w	r3, r3, #2
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b5c      	ldr	r3, [pc, #368]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a57      	ldr	r2, [pc, #348]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d68:	f043 0308 	orr.w	r3, r3, #8
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b55      	ldr	r3, [pc, #340]	; (8000ec4 <MX_GPIO_Init+0x208>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CH5_OUT_Pin|CH6_OUT_Pin|CH4_OUT_Pin, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2162      	movs	r1, #98	; 0x62
 8000d7e:	4852      	ldr	r0, [pc, #328]	; (8000ec8 <MX_GPIO_Init+0x20c>)
 8000d80:	f003 f84c 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2110      	movs	r1, #16
 8000d88:	4850      	ldr	r0, [pc, #320]	; (8000ecc <MX_GPIO_Init+0x210>)
 8000d8a:	f003 f847 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2120      	movs	r1, #32
 8000d92:	484e      	ldr	r0, [pc, #312]	; (8000ecc <MX_GPIO_Init+0x210>)
 8000d94:	f003 f842 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|CH1_OUT_Pin|CH2_OUT_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f240 3101 	movw	r1, #769	; 0x301
 8000d9e:	484c      	ldr	r0, [pc, #304]	; (8000ed0 <MX_GPIO_Init+0x214>)
 8000da0:	f003 f83c 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	21c0      	movs	r1, #192	; 0xc0
 8000da8:	484a      	ldr	r0, [pc, #296]	; (8000ed4 <MX_GPIO_Init+0x218>)
 8000daa:	f003 f837 	bl	8003e1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH5_OUT_Pin CH6_OUT_Pin CH4_OUT_Pin */
  GPIO_InitStruct.Pin = CH5_OUT_Pin|CH6_OUT_Pin|CH4_OUT_Pin;
 8000dae:	2362      	movs	r3, #98	; 0x62
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4840      	ldr	r0, [pc, #256]	; (8000ec8 <MX_GPIO_Init+0x20c>)
 8000dc6:	f002 fe75 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH5_Pin CH6_Pin */
  GPIO_InitStruct.Pin = CH5_Pin|CH6_Pin;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	483e      	ldr	r0, [pc, #248]	; (8000ed8 <MX_GPIO_Init+0x21c>)
 8000dde:	f002 fe69 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000de2:	2310      	movs	r3, #16
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4834      	ldr	r0, [pc, #208]	; (8000ecc <MX_GPIO_Init+0x210>)
 8000dfa:	f002 fe5b 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_CTRL_Pin */
  GPIO_InitStruct.Pin = AC_CTRL_Pin;
 8000dfe:	2320      	movs	r3, #32
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e06:	2302      	movs	r3, #2
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AC_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	482d      	ldr	r0, [pc, #180]	; (8000ecc <MX_GPIO_Init+0x210>)
 8000e16:	f002 fe4d 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin CH1_OUT_Pin CH2_OUT_Pin */
  GPIO_InitStruct.Pin = LED_Pin|CH1_OUT_Pin|CH2_OUT_Pin;
 8000e1a:	f240 3301 	movw	r3, #769	; 0x301
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4827      	ldr	r0, [pc, #156]	; (8000ed0 <MX_GPIO_Init+0x214>)
 8000e34:	f002 fe3e 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_IN_Pin CH3_OUT_Pin */
  GPIO_InitStruct.Pin = AC_IN_Pin|CH3_OUT_Pin;
 8000e38:	2381      	movs	r3, #129	; 0x81
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	481f      	ldr	r0, [pc, #124]	; (8000ec8 <MX_GPIO_Init+0x20c>)
 8000e4c:	f002 fe32 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS2_Pin TS1_Pin */
  GPIO_InitStruct.Pin = TS2_Pin|TS1_Pin;
 8000e50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	4619      	mov	r1, r3
 8000e64:	481b      	ldr	r0, [pc, #108]	; (8000ed4 <MX_GPIO_Init+0x218>)
 8000e66:	f002 fe25 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_IRQ_Pin PON_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin|PON_Pin;
 8000e6a:	2309      	movs	r3, #9
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <MX_GPIO_Init+0x218>)
 8000e7e:	f002 fe19 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000e82:	2340      	movs	r3, #64	; 0x40
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <MX_GPIO_Init+0x218>)
 8000e9a:	f002 fe0b 	bl	8003ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000e9e:	2380      	movs	r3, #128	; 0x80
 8000ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4807      	ldr	r0, [pc, #28]	; (8000ed4 <MX_GPIO_Init+0x218>)
 8000eb6:	f002 fdfd 	bl	8003ab4 <HAL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	; 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	40020000 	.word	0x40020000
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40020800 	.word	0x40020800

08000edc <idleTaskEntry>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_idleTaskEntry */
void idleTaskEntry(void *argument)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  for(;;)
  {

    // Status LED blinking
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	4807      	ldr	r0, [pc, #28]	; (8000f08 <idleTaskEntry+0x2c>)
 8000eea:	f002 ff97 	bl	8003e1c <HAL_GPIO_WritePin>
    osDelay(100);
 8000eee:	2064      	movs	r0, #100	; 0x64
 8000ef0:	f005 ff9a 	bl	8006e28 <osDelay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <idleTaskEntry+0x2c>)
 8000efa:	f002 ff8f 	bl	8003e1c <HAL_GPIO_WritePin>
   osDelay(100);
 8000efe:	2064      	movs	r0, #100	; 0x64
 8000f00:	f005 ff92 	bl	8006e28 <osDelay>
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f04:	e7ee      	b.n	8000ee4 <idleTaskEntry+0x8>
 8000f06:	bf00      	nop
 8000f08:	40020400 	.word	0x40020400

08000f0c <buttonTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_buttonTaskEntry */
void buttonTaskEntry(void *argument)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buttonTaskEntry */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]

  // Set LED blinking
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f28:	2360      	movs	r3, #96	; 0x60
 8000f2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4895      	ldr	r0, [pc, #596]	; (80011a4 <buttonTaskEntry+0x298>)
 8000f4e:	f004 ff85 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f52:	2100      	movs	r1, #0
 8000f54:	4893      	ldr	r0, [pc, #588]	; (80011a4 <buttonTaskEntry+0x298>)
 8000f56:	f004 fc5d 	bl	8005814 <HAL_TIM_PWM_Start>

  sConfigOC.Pulse = 65530;
 8000f5a:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8000f5e:	613b      	str	r3, [r7, #16]
  HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8000f60:	f107 030c 	add.w	r3, r7, #12
 8000f64:	2204      	movs	r2, #4
 8000f66:	4619      	mov	r1, r3
 8000f68:	488e      	ldr	r0, [pc, #568]	; (80011a4 <buttonTaskEntry+0x298>)
 8000f6a:	f004 ff77 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000f6e:	2104      	movs	r1, #4
 8000f70:	488c      	ldr	r0, [pc, #560]	; (80011a4 <buttonTaskEntry+0x298>)
 8000f72:	f004 fc4f 	bl	8005814 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  uint8_t led_level = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t state = 0; // STAND-BY
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  uint32_t i = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28

  for(;;)
  {
	switch (state){
 8000f86:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	f200 8105 	bhi.w	800119a <buttonTaskEntry+0x28e>
 8000f90:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <buttonTaskEntry+0x8c>)
 8000f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f96:	bf00      	nop
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	0800104b 	.word	0x0800104b
 8000fa0:	080010ff 	.word	0x080010ff
 8000fa4:	08001115 	.word	0x08001115
	  // LED Blinking - Stand-by
	  case (0):
		led_level++;
 8000fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fac:	3301      	adds	r3, #1
 8000fae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	487b      	ldr	r0, [pc, #492]	; (80011a4 <buttonTaskEntry+0x298>)
 8000fb6:	f004 fcf5 	bl	80059a4 <HAL_TIM_PWM_Stop>
	    if (led_level > 127)
 8000fba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	da09      	bge.n	8000fd6 <buttonTaskEntry+0xca>
	    {
	      sConfigOC.Pulse = (255 - led_level) * 368;
 8000fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fc6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000fca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e006      	b.n	8000fe4 <buttonTaskEntry+0xd8>
	    }
	    else
	    {
	      sConfigOC.Pulse = led_level * 368;
 8000fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fda:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	613b      	str	r3, [r7, #16]
	    }
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4619      	mov	r1, r3
 8000fec:	486d      	ldr	r0, [pc, #436]	; (80011a4 <buttonTaskEntry+0x298>)
 8000fee:	f004 ff35 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	486b      	ldr	r0, [pc, #428]	; (80011a4 <buttonTaskEntry+0x298>)
 8000ff6:	f004 fc0d 	bl	8005814 <HAL_TIM_PWM_Start>

		if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_RESET)
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	486a      	ldr	r0, [pc, #424]	; (80011a8 <buttonTaskEntry+0x29c>)
 8000ffe:	f002 fef5 	bl	8003dec <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	f040 80c3 	bne.w	8001190 <buttonTaskEntry+0x284>
		{
			osDelay(1000);
 800100a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800100e:	f005 ff0b 	bl	8006e28 <osDelay>
            state = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			led_level = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			// Wait for button release
			for (i = 0 ; i < 100 ; i++)
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
 8001022:	e00c      	b.n	800103e <buttonTaskEntry+0x132>
			{
			  osDelay(100);
 8001024:	2064      	movs	r0, #100	; 0x64
 8001026:	f005 feff 	bl	8006e28 <osDelay>
			  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 800102a:	2108      	movs	r1, #8
 800102c:	485e      	ldr	r0, [pc, #376]	; (80011a8 <buttonTaskEntry+0x29c>)
 800102e:	f002 fedd 	bl	8003dec <HAL_GPIO_ReadPin>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d006      	beq.n	8001046 <buttonTaskEntry+0x13a>
			for (i = 0 ; i < 100 ; i++)
 8001038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800103a:	3301      	adds	r3, #1
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
 800103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001040:	2b63      	cmp	r3, #99	; 0x63
 8001042:	d9ef      	bls.n	8001024 <buttonTaskEntry+0x118>
			}
		}
	    break;
 8001044:	e0a4      	b.n	8001190 <buttonTaskEntry+0x284>
			  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 8001046:	bf00      	nop
	    break;
 8001048:	e0a2      	b.n	8001190 <buttonTaskEntry+0x284>

	  // ON requested
	  case (1):
		state = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	    // search zero crossing
	    for (i = 0 ; i < 100 ; i++)
 8001050:	2300      	movs	r3, #0
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
 8001054:	e04f      	b.n	80010f6 <buttonTaskEntry+0x1ea>
	    {
     		if (HAL_GPIO_ReadPin(AC_IN_GPIO_Port, AC_IN_Pin) == GPIO_PIN_SET)
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	4854      	ldr	r0, [pc, #336]	; (80011ac <buttonTaskEntry+0x2a0>)
 800105a:	f002 fec7 	bl	8003dec <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d142      	bne.n	80010ea <buttonTaskEntry+0x1de>
	   		{
     		    for (i = 0 ; i < 100000 ; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
 8001068:	e033      	b.n	80010d2 <buttonTaskEntry+0x1c6>
     		    {
     	     		if (HAL_GPIO_ReadPin(AC_IN_GPIO_Port, AC_IN_Pin) == GPIO_PIN_RESET)
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	484f      	ldr	r0, [pc, #316]	; (80011ac <buttonTaskEntry+0x2a0>)
 800106e:	f002 febd 	bl	8003dec <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d129      	bne.n	80010cc <buttonTaskEntry+0x1c0>
     		   		{
     	     			// Transition from high to low - close to zero crossing
     	     			HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2120      	movs	r1, #32
 800107c:	484c      	ldr	r0, [pc, #304]	; (80011b0 <buttonTaskEntry+0x2a4>)
 800107e:	f002 fecd 	bl	8003e1c <HAL_GPIO_WritePin>
     	     			state = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

     	     		    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001088:	2100      	movs	r1, #0
 800108a:	4846      	ldr	r0, [pc, #280]	; (80011a4 <buttonTaskEntry+0x298>)
 800108c:	f004 fc8a 	bl	80059a4 <HAL_TIM_PWM_Stop>
     	     		    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001090:	2104      	movs	r1, #4
 8001092:	4844      	ldr	r0, [pc, #272]	; (80011a4 <buttonTaskEntry+0x298>)
 8001094:	f004 fc86 	bl	80059a4 <HAL_TIM_PWM_Stop>
    	     		    sConfigOC.Pulse = 65535;
 8001098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109c:	613b      	str	r3, [r7, #16]
     	     			HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	2200      	movs	r2, #0
 80010a4:	4619      	mov	r1, r3
 80010a6:	483f      	ldr	r0, [pc, #252]	; (80011a4 <buttonTaskEntry+0x298>)
 80010a8:	f004 fed8 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
     	     			HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	2204      	movs	r2, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	483b      	ldr	r0, [pc, #236]	; (80011a4 <buttonTaskEntry+0x298>)
 80010b6:	f004 fed1 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
     	     			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010ba:	2100      	movs	r1, #0
 80010bc:	4839      	ldr	r0, [pc, #228]	; (80011a4 <buttonTaskEntry+0x298>)
 80010be:	f004 fba9 	bl	8005814 <HAL_TIM_PWM_Start>
     	     			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80010c2:	2104      	movs	r1, #4
 80010c4:	4837      	ldr	r0, [pc, #220]	; (80011a4 <buttonTaskEntry+0x298>)
 80010c6:	f004 fba5 	bl	8005814 <HAL_TIM_PWM_Start>
     	     			break;
 80010ca:	e006      	b.n	80010da <buttonTaskEntry+0x1ce>
     		    for (i = 0 ; i < 100000 ; i++)
 80010cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ce:	3301      	adds	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010d4:	4a37      	ldr	r2, [pc, #220]	; (80011b4 <buttonTaskEntry+0x2a8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d9c7      	bls.n	800106a <buttonTaskEntry+0x15e>
     		   		}
     		    }
     		    if ((i == 100000) || (state = 2)) break;
 80010da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010dc:	4a36      	ldr	r2, [pc, #216]	; (80011b8 <buttonTaskEntry+0x2ac>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d058      	beq.n	8001194 <buttonTaskEntry+0x288>
 80010e2:	2302      	movs	r3, #2
 80010e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
            }
	    	osDelay(10);
	    }
		break;
 80010e8:	e054      	b.n	8001194 <buttonTaskEntry+0x288>
	    	osDelay(10);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f005 fe9c 	bl	8006e28 <osDelay>
	    for (i = 0 ; i < 100 ; i++)
 80010f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f2:	3301      	adds	r3, #1
 80010f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f8:	2b63      	cmp	r3, #99	; 0x63
 80010fa:	d9ac      	bls.n	8001056 <buttonTaskEntry+0x14a>
		break;
 80010fc:	e04a      	b.n	8001194 <buttonTaskEntry+0x288>

	  // ON
	  case (2):
	    // Check for off request
		if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_RESET)
 80010fe:	2108      	movs	r1, #8
 8001100:	4829      	ldr	r0, [pc, #164]	; (80011a8 <buttonTaskEntry+0x29c>)
 8001102:	f002 fe73 	bl	8003dec <HAL_GPIO_ReadPin>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d145      	bne.n	8001198 <buttonTaskEntry+0x28c>
		{
		  state = 3;
 800110c:	2303      	movs	r3, #3
 800110e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		}

	    // Monitor system while is ON

		break;
 8001112:	e041      	b.n	8001198 <buttonTaskEntry+0x28c>

	  // OFF requested
	  case (3):
  	    state = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		// Switch off transformer
		HAL_GPIO_WritePin(AC_CTRL_GPIO_Port, AC_CTRL_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2120      	movs	r1, #32
 800111e:	4824      	ldr	r0, [pc, #144]	; (80011b0 <buttonTaskEntry+0x2a4>)
 8001120:	f002 fe7c 	bl	8003e1c <HAL_GPIO_WritePin>

		// Switch off LED and backlight
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001124:	2100      	movs	r1, #0
 8001126:	481f      	ldr	r0, [pc, #124]	; (80011a4 <buttonTaskEntry+0x298>)
 8001128:	f004 fc3c 	bl	80059a4 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 800112c:	2104      	movs	r1, #4
 800112e:	481d      	ldr	r0, [pc, #116]	; (80011a4 <buttonTaskEntry+0x298>)
 8001130:	f004 fc38 	bl	80059a4 <HAL_TIM_PWM_Stop>
		sConfigOC.Pulse = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	4818      	ldr	r0, [pc, #96]	; (80011a4 <buttonTaskEntry+0x298>)
 8001142:	f004 fe8b 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	2204      	movs	r2, #4
 800114c:	4619      	mov	r1, r3
 800114e:	4815      	ldr	r0, [pc, #84]	; (80011a4 <buttonTaskEntry+0x298>)
 8001150:	f004 fe84 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001154:	2100      	movs	r1, #0
 8001156:	4813      	ldr	r0, [pc, #76]	; (80011a4 <buttonTaskEntry+0x298>)
 8001158:	f004 fb5c 	bl	8005814 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800115c:	2104      	movs	r1, #4
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <buttonTaskEntry+0x298>)
 8001160:	f004 fb58 	bl	8005814 <HAL_TIM_PWM_Start>

		// Wait for button release
		for (i = 0 ; i < 100 ; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
 8001168:	e00c      	b.n	8001184 <buttonTaskEntry+0x278>
		{
		  osDelay(100);
 800116a:	2064      	movs	r0, #100	; 0x64
 800116c:	f005 fe5c 	bl	8006e28 <osDelay>
		  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 8001170:	2108      	movs	r1, #8
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <buttonTaskEntry+0x29c>)
 8001174:	f002 fe3a 	bl	8003dec <HAL_GPIO_ReadPin>
 8001178:	4603      	mov	r3, r0
 800117a:	2b01      	cmp	r3, #1
 800117c:	d006      	beq.n	800118c <buttonTaskEntry+0x280>
		for (i = 0 ; i < 100 ; i++)
 800117e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001180:	3301      	adds	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
 8001184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001186:	2b63      	cmp	r3, #99	; 0x63
 8001188:	d9ef      	bls.n	800116a <buttonTaskEntry+0x25e>
		}

		break;
 800118a:	e006      	b.n	800119a <buttonTaskEntry+0x28e>
		  if (HAL_GPIO_ReadPin(PON_GPIO_Port, PON_Pin) == GPIO_PIN_SET) break;
 800118c:	bf00      	nop
		break;
 800118e:	e004      	b.n	800119a <buttonTaskEntry+0x28e>
	    break;
 8001190:	bf00      	nop
 8001192:	e002      	b.n	800119a <buttonTaskEntry+0x28e>
		break;
 8001194:	bf00      	nop
 8001196:	e000      	b.n	800119a <buttonTaskEntry+0x28e>
		break;
 8001198:	bf00      	nop


	}


    osDelay(10);
 800119a:	200a      	movs	r0, #10
 800119c:	f005 fe44 	bl	8006e28 <osDelay>
	switch (state){
 80011a0:	e6f1      	b.n	8000f86 <buttonTaskEntry+0x7a>
 80011a2:	bf00      	nop
 80011a4:	20004b00 	.word	0x20004b00
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40020000 	.word	0x40020000
 80011b4:	0001869f 	.word	0x0001869f
 80011b8:	000186a0 	.word	0x000186a0

080011bc <fanTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_fanTaskEntry */
void fanTaskEntry(void *argument)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fanTaskEntry */

  /* Infinite loop */
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
 80011d4:	615a      	str	r2, [r3, #20]
 80011d6:	619a      	str	r2, [r3, #24]

  // Set FAN Low
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d8:	2360      	movs	r3, #96	; 0x60
 80011da:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 670;
 80011dc:	f240 239e 	movw	r3, #670	; 0x29e
 80011e0:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2200      	movs	r2, #0
 80011fc:	4619      	mov	r1, r3
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <fanTaskEntry+0x78>)
 8001200:	f004 fe2c 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <fanTaskEntry+0x78>)
 8001208:	f004 fb04 	bl	8005814 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2204      	movs	r2, #4
 8001212:	4619      	mov	r1, r3
 8001214:	4807      	ldr	r0, [pc, #28]	; (8001234 <fanTaskEntry+0x78>)
 8001216:	f004 fe21 	bl	8005e5c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800121a:	2104      	movs	r1, #4
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <fanTaskEntry+0x78>)
 800121e:	f004 faf9 	bl	8005814 <HAL_TIM_PWM_Start>

	//Set FAN A speed

	//Set Fan B speed

	osDelay(1000);
 8001222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001226:	f005 fdff 	bl	8006e28 <osDelay>

	// Check FAN A speed

	// Check FAN B speed

	osDelay(1000);
 800122a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122e:	f005 fdfb 	bl	8006e28 <osDelay>
	osDelay(1000);
 8001232:	e7f6      	b.n	8001222 <fanTaskEntry+0x66>
 8001234:	20004bc8 	.word	0x20004bc8

08001238 <displayTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTaskEntry */
void displayTaskEntry(void *argument)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayTaskEntry */
  /* Infinite loop */
	StartDisplayTask(argument);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 fbef 	bl	8001a24 <StartDisplayTask>
  for(;;)
  {
    osDelay(1000);
 8001246:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800124a:	f005 fded 	bl	8006e28 <osDelay>
 800124e:	e7fa      	b.n	8001246 <displayTaskEntry+0xe>

08001250 <touchTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_touchTaskEntry */
void touchTaskEntry(void *argument)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN touchTaskEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8001258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800125c:	f005 fde4 	bl	8006e28 <osDelay>
 8001260:	e7fa      	b.n	8001258 <touchTaskEntry+0x8>

08001262 <dspTaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dspTaskEntry */
void dspTaskEntry(void *argument)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dspTaskEntry */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800126a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800126e:	f005 fddb 	bl	8006e28 <osDelay>
 8001272:	e7fa      	b.n	800126a <dspTaskEntry+0x8>

08001274 <sensorATaskEntry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensorATaskEntry */
void sensorATaskEntry(void *argument)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensorATaskEntry */
  /* Infinite loop */

  Task_Ds18b20(argument);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f001 f997 	bl	80025b0 <Task_Ds18b20>
//  for(;;)
//  {
//    osDelay(1);
//  }
  /* USER CODE END sensorATaskEntry */
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a04      	ldr	r2, [pc, #16]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d101      	bne.n	80012a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800129e:	f001 ff73 	bl	8003188 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40014400 	.word	0x40014400

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <Error_Handler+0x8>
	...

080012bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_MspInit+0x54>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a11      	ldr	r2, [pc, #68]	; (8001310 <HAL_MspInit+0x54>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_MspInit+0x54>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	603b      	str	r3, [r7, #0]
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_MspInit+0x54>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	4a0a      	ldr	r2, [pc, #40]	; (8001310 <HAL_MspInit+0x54>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	; 0x40
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_MspInit+0x54>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	210f      	movs	r1, #15
 80012fe:	f06f 0001 	mvn.w	r0, #1
 8001302:	f002 f83d 	bl	8003380 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_I2C_MspInit+0xe8>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12c      	bne.n	8001390 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_I2C_MspInit+0xec>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a30      	ldr	r2, [pc, #192]	; (8001400 <HAL_I2C_MspInit+0xec>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_I2C_MspInit+0xec>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = DSP_SCL_Pin|DSP_SDA_Pin;
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135a:	2301      	movs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001362:	2304      	movs	r3, #4
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	4825      	ldr	r0, [pc, #148]	; (8001404 <HAL_I2C_MspInit+0xf0>)
 800136e:	f002 fba1 	bl	8003ab4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_I2C_MspInit+0xec>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a21      	ldr	r2, [pc, #132]	; (8001400 <HAL_I2C_MspInit+0xec>)
 800137c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_I2C_MspInit+0xec>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800138e:	e031      	b.n	80013f4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a1c      	ldr	r2, [pc, #112]	; (8001408 <HAL_I2C_MspInit+0xf4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12c      	bne.n	80013f4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <HAL_I2C_MspInit+0xec>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_I2C_MspInit+0xec>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <HAL_I2C_MspInit+0xec>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CODEC_SCL_Pin|CODEC_SDA_Pin;
 80013b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013bc:	2312      	movs	r3, #18
 80013be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013c8:	2304      	movs	r3, #4
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	480c      	ldr	r0, [pc, #48]	; (8001404 <HAL_I2C_MspInit+0xf0>)
 80013d4:	f002 fb6e 	bl	8003ab4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <HAL_I2C_MspInit+0xec>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_I2C_MspInit+0xec>)
 80013e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e6:	6413      	str	r3, [r2, #64]	; 0x40
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_I2C_MspInit+0xec>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	68fb      	ldr	r3, [r7, #12]
}
 80013f4:	bf00      	nop
 80013f6:	3730      	adds	r7, #48	; 0x30
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40005400 	.word	0x40005400
 8001400:	40023800 	.word	0x40023800
 8001404:	40020400 	.word	0x40020400
 8001408:	40005800 	.word	0x40005800

0800140c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_RTC_MspInit+0x24>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d102      	bne.n	8001424 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RTC_MspInit+0x28>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40002800 	.word	0x40002800
 8001434:	42470e3c 	.word	0x42470e3c

08001438 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a59      	ldr	r2, [pc, #356]	; (80015bc <HAL_SPI_MspInit+0x184>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d15b      	bne.n	8001512 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 8001464:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a50      	ldr	r2, [pc, #320]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b4e      	ldr	r3, [pc, #312]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001492:	2338      	movs	r3, #56	; 0x38
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800149a:	2301      	movs	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a2:	2305      	movs	r3, #5
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4845      	ldr	r0, [pc, #276]	; (80015c4 <HAL_SPI_MspInit+0x18c>)
 80014ae:	f002 fb01 	bl	8003ab4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 80014b2:	4b45      	ldr	r3, [pc, #276]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014b4:	4a45      	ldr	r2, [pc, #276]	; (80015cc <HAL_SPI_MspInit+0x194>)
 80014b6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80014b8:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014ba:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014be:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c0:	4b41      	ldr	r3, [pc, #260]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014c2:	2240      	movs	r2, #64	; 0x40
 80014c4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014cc:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d4:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014da:	4b3b      	ldr	r3, [pc, #236]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80014e0:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ee:	4b36      	ldr	r3, [pc, #216]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80014f4:	4834      	ldr	r0, [pc, #208]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 80014f6:	f001 ff6d 	bl	80033d4 <HAL_DMA_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001500:	f7ff fed6 	bl	80012b0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 8001508:	649a      	str	r2, [r3, #72]	; 0x48
 800150a:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <HAL_SPI_MspInit+0x190>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001510:	e050      	b.n	80015b4 <HAL_SPI_MspInit+0x17c>
  else if(hspi->Instance==SPI3)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a2e      	ldr	r2, [pc, #184]	; (80015d0 <HAL_SPI_MspInit+0x198>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d14b      	bne.n	80015b4 <HAL_SPI_MspInit+0x17c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 8001526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	4b20      	ldr	r3, [pc, #128]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	2300      	movs	r3, #0
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	4a18      	ldr	r2, [pc, #96]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 800155e:	f043 0304 	orr.w	r3, r3, #4
 8001562:	6313      	str	r3, [r2, #48]	; 0x30
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <HAL_SPI_MspInit+0x188>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TOUCH_nCS_Pin;
 8001570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800157a:	2301      	movs	r3, #1
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001582:	2306      	movs	r3, #6
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(TOUCH_nCS_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4811      	ldr	r0, [pc, #68]	; (80015d4 <HAL_SPI_MspInit+0x19c>)
 800158e:	f002 fa91 	bl	8003ab4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TOUCH_SCK_Pin|TOUCH_MISO_Pin|TOUCH_MOSI_Pin;
 8001592:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800159c:	2301      	movs	r3, #1
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a4:	2306      	movs	r3, #6
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <HAL_SPI_MspInit+0x1a0>)
 80015b0:	f002 fa80 	bl	8003ab4 <HAL_GPIO_Init>
}
 80015b4:	bf00      	nop
 80015b6:	3730      	adds	r7, #48	; 0x30
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40013000 	.word	0x40013000
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400
 80015c8:	20004c78 	.word	0x20004c78
 80015cc:	40026488 	.word	0x40026488
 80015d0:	40003c00 	.word	0x40003c00
 80015d4:	40020000 	.word	0x40020000
 80015d8:	40020800 	.word	0x40020800

080015dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_TIM_Base_MspInit+0x80>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d11e      	bne.n	800162c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <HAL_TIM_Base_MspInit+0x84>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	4a1a      	ldr	r2, [pc, #104]	; (8001660 <HAL_TIM_Base_MspInit+0x84>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6453      	str	r3, [r2, #68]	; 0x44
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <HAL_TIM_Base_MspInit+0x84>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2105      	movs	r1, #5
 800160e:	2018      	movs	r0, #24
 8001610:	f001 feb6 	bl	8003380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001614:	2018      	movs	r0, #24
 8001616:	f001 fecf 	bl	80033b8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	2019      	movs	r0, #25
 8001620:	f001 feae 	bl	8003380 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001624:	2019      	movs	r0, #25
 8001626:	f001 fec7 	bl	80033b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800162a:	e012      	b.n	8001652 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0c      	ldr	r2, [pc, #48]	; (8001664 <HAL_TIM_Base_MspInit+0x88>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d10d      	bne.n	8001652 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_TIM_Base_MspInit+0x84>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	; (8001660 <HAL_TIM_Base_MspInit+0x84>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	; (8001660 <HAL_TIM_Base_MspInit+0x84>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40010000 	.word	0x40010000
 8001660:	40023800 	.word	0x40023800
 8001664:	40000c00 	.word	0x40000c00

08001668 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d10d      	bne.n	8001696 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_TIM_PWM_MspInit+0x40>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_TIM_PWM_MspInit+0x40>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	6413      	str	r3, [r2, #64]	; 0x40
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <HAL_TIM_PWM_MspInit+0x40>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3714      	adds	r7, #20
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40000400 	.word	0x40000400
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_TIM_IC_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12c      	bne.n	8001728 <HAL_TIM_IC_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_TIM_IC_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_TIM_IC_MspInit+0x88>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_TIM_IC_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <HAL_TIM_IC_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	; (8001734 <HAL_TIM_IC_MspInit+0x88>)
 80016f4:	f043 0308 	orr.w	r3, r3, #8
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <HAL_TIM_IC_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = FAN1_IN_Pin|FAN2_IN_Pin;
 8001706:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001718:	2302      	movs	r3, #2
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <HAL_TIM_IC_MspInit+0x8c>)
 8001724:	f002 f9c6 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40000800 	.word	0x40000800
 8001734:	40023800 	.word	0x40023800
 8001738:	40020c00 	.word	0x40020c00

0800173c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a24      	ldr	r2, [pc, #144]	; (80017ec <HAL_TIM_MspPostInit+0xb0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d11f      	bne.n	800179e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_TIM_MspPostInit+0xb4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a22      	ldr	r2, [pc, #136]	; (80017f0 <HAL_TIM_MspPostInit+0xb4>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_TIM_MspPostInit+0xb4>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FAN1_CTRL_Pin|FAN2_CTRL_Pin;
 800177a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800177e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800178c:	2301      	movs	r3, #1
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4817      	ldr	r0, [pc, #92]	; (80017f4 <HAL_TIM_MspPostInit+0xb8>)
 8001798:	f002 f98c 	bl	8003ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800179c:	e022      	b.n	80017e4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a15      	ldr	r2, [pc, #84]	; (80017f8 <HAL_TIM_MspPostInit+0xbc>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d11d      	bne.n	80017e4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <HAL_TIM_MspPostInit+0xb4>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <HAL_TIM_MspPostInit+0xb4>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6313      	str	r3, [r2, #48]	; 0x30
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_TIM_MspPostInit+0xb4>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUT_LED_Pin|LCD_BL_Pin;
 80017c4:	23c0      	movs	r3, #192	; 0xc0
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017d4:	2302      	movs	r3, #2
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <HAL_TIM_MspPostInit+0xc0>)
 80017e0:	f002 f968 	bl	8003ab4 <HAL_GPIO_Init>
}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40010000 	.word	0x40010000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40000400 	.word	0x40000400
 80017fc:	40020800 	.word	0x40020800

08001800 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	; 0x30
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	2019      	movs	r0, #25
 8001816:	f001 fdb3 	bl	8003380 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800181a:	2019      	movs	r0, #25
 800181c:	f001 fdcc 	bl	80033b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_InitTick+0xa4>)
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	4a1e      	ldr	r2, [pc, #120]	; (80018a4 <HAL_InitTick+0xa4>)
 800182a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182e:	6453      	str	r3, [r2, #68]	; 0x44
 8001830:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <HAL_InitTick+0xa4>)
 8001832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800183c:	f107 0210 	add.w	r2, r7, #16
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4611      	mov	r1, r2
 8001846:	4618      	mov	r0, r3
 8001848:	f003 f88e 	bl	8004968 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800184c:	f003 f878 	bl	8004940 <HAL_RCC_GetPCLK2Freq>
 8001850:	4603      	mov	r3, r0
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	4a13      	ldr	r2, [pc, #76]	; (80018a8 <HAL_InitTick+0xa8>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	0c9b      	lsrs	r3, r3, #18
 8001860:	3b01      	subs	r3, #1
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001864:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_InitTick+0xac>)
 8001866:	4a12      	ldr	r2, [pc, #72]	; (80018b0 <HAL_InitTick+0xb0>)
 8001868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_InitTick+0xac>)
 800186c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001870:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_InitTick+0xac>)
 8001874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001876:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_InitTick+0xac>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_InitTick+0xac>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <HAL_InitTick+0xac>)
 8001886:	f003 fe4d 	bl	8005524 <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001890:	4806      	ldr	r0, [pc, #24]	; (80018ac <HAL_InitTick+0xac>)
 8001892:	f003 feff 	bl	8005694 <HAL_TIM_Base_Start_IT>
 8001896:	4603      	mov	r3, r0
 8001898:	e000      	b.n	800189c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3730      	adds	r7, #48	; 0x30
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	431bde83 	.word	0x431bde83
 80018ac:	20004cd8 	.word	0x20004cd8
 80018b0:	40014400 	.word	0x40014400

080018b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <NMI_Handler+0x4>

080018ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018be:	e7fe      	b.n	80018be <HardFault_Handler+0x4>

080018c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <MemManage_Handler+0x4>

080018c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <BusFault_Handler+0x4>

080018cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <UsageFault_Handler+0x4>

080018d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80018e6:	f004 f91c 	bl	8005b22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20004bc8 	.word	0x20004bc8

080018f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018f8:	4803      	ldr	r0, [pc, #12]	; (8001908 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80018fa:	f004 f912 	bl	8005b22 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80018fe:	4803      	ldr	r0, [pc, #12]	; (800190c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001900:	f004 f90f 	bl	8005b22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20004bc8 	.word	0x20004bc8
 800190c:	20004cd8 	.word	0x20004cd8

08001910 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA2_Stream5_IRQHandler+0x10>)
 8001916:	f001 fe63 	bl	80035e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20004c78 	.word	0x20004c78

08001924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <_sbrk+0x5c>)
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <_sbrk+0x60>)
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <_sbrk+0x64>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <_sbrk+0x64>)
 8001942:	4a12      	ldr	r2, [pc, #72]	; (800198c <_sbrk+0x68>)
 8001944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	429a      	cmp	r2, r3
 8001952:	d207      	bcs.n	8001964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001954:	f008 f8da 	bl	8009b0c <__errno>
 8001958:	4603      	mov	r3, r0
 800195a:	220c      	movs	r2, #12
 800195c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001962:	e009      	b.n	8001978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <_sbrk+0x64>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <_sbrk+0x64>)
 8001974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001976:	68fb      	ldr	r3, [r7, #12]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20020000 	.word	0x20020000
 8001984:	00000400 	.word	0x00000400
 8001988:	200000a0 	.word	0x200000a0
 800198c:	20004db0 	.word	0x20004db0

08001990 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <SystemInit+0x20>)
 8001996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800199a:	4a05      	ldr	r2, [pc, #20]	; (80019b0 <SystemInit+0x20>)
 800199c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ba:	490e      	ldr	r1, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d0:	4c0b      	ldr	r4, [pc, #44]	; (8001a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019de:	f7ff ffd7 	bl	8001990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e2:	f008 f899 	bl	8009b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7fe fd6f 	bl	80004c8 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80019f8:	0800f8a0 	.word	0x0800f8a0
  ldr r2, =_sbss
 80019fc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001a00:	20004dac 	.word	0x20004dac

08001a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>

08001a06 <drawPoint>:
	 */
	return voltage / 18;
}

void drawPoint(uint16_t X, uint16_t Y)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460a      	mov	r2, r1
 8001a10:	80fb      	strh	r3, [r7, #6]
 8001a12:	4613      	mov	r3, r2
 8001a14:	80bb      	strh	r3, [r7, #4]
		   TM_ILI9341_DrawFilledRectangle(50, 204, 86, 234, ILI9341_COLOR_BLACK);
	}
	else
		TM_ILI9341_DrawCircle(X, Y, 10, ILI9341_COLOR_BLUE);
*/
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <StartDisplayTask>:


void StartDisplayTask(void const * argument)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	6078      	str	r0, [r7, #4]
    TM_ILI9341_Init();
 8001a2c:	f000 f8c8 	bl	8001bc0 <TM_ILI9341_Init>

    /* Cross */
    TM_ILI9341_DrawFilledRectangle(0, 120, 320, 121, ILI9341_COLOR_WHITE);
 8001a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2379      	movs	r3, #121	; 0x79
 8001a38:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a3c:	2178      	movs	r1, #120	; 0x78
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 fcd2 	bl	80023e8 <TM_ILI9341_DrawFilledRectangle>
    TM_ILI9341_DrawFilledRectangle(106, 0, 107, 240*2, ILI9341_COLOR_WHITE);
 8001a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a4e:	226b      	movs	r2, #107	; 0x6b
 8001a50:	2100      	movs	r1, #0
 8001a52:	206a      	movs	r0, #106	; 0x6a
 8001a54:	f000 fcc8 	bl	80023e8 <TM_ILI9341_DrawFilledRectangle>
    TM_ILI9341_DrawFilledRectangle(213, 0, 214, 240*2, ILI9341_COLOR_WHITE);
 8001a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a62:	22d6      	movs	r2, #214	; 0xd6
 8001a64:	2100      	movs	r1, #0
 8001a66:	20d5      	movs	r0, #213	; 0xd5
 8001a68:	f000 fcbe 	bl	80023e8 <TM_ILI9341_DrawFilledRectangle>

    /* Texts */
    TM_ILI9341_Puts(20,0,"Engine", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <StartDisplayTask+0x174>)
 8001a78:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <StartDisplayTask+0x178>)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2014      	movs	r0, #20
 8001a7e:	f000 fbc9 	bl	8002214 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(145,00,"Acc.", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001a82:	2300      	movs	r3, #0
 8001a84:	9301      	str	r3, [sp, #4]
 8001a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4b42      	ldr	r3, [pc, #264]	; (8001b98 <StartDisplayTask+0x174>)
 8001a8e:	4a44      	ldr	r2, [pc, #272]	; (8001ba0 <StartDisplayTask+0x17c>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	2091      	movs	r0, #145	; 0x91
 8001a94:	f000 fbbe 	bl	8002214 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(245,00,"Solar", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001a98:	2300      	movs	r3, #0
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <StartDisplayTask+0x174>)
 8001aa4:	4a3f      	ldr	r2, [pc, #252]	; (8001ba4 <StartDisplayTask+0x180>)
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	20f5      	movs	r0, #245	; 0xf5
 8001aaa:	f000 fbb3 	bl	8002214 <TM_ILI9341_Puts>

    TM_ILI9341_Puts(20,122,"Engine", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001aae:	2300      	movs	r3, #0
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <StartDisplayTask+0x174>)
 8001aba:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <StartDisplayTask+0x178>)
 8001abc:	217a      	movs	r1, #122	; 0x7a
 8001abe:	2014      	movs	r0, #20
 8001ac0:	f000 fba8 	bl	8002214 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(122,122,"Exhaust", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	9301      	str	r3, [sp, #4]
 8001ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <StartDisplayTask+0x174>)
 8001ad0:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <StartDisplayTask+0x184>)
 8001ad2:	217a      	movs	r1, #122	; 0x7a
 8001ad4:	207a      	movs	r0, #122	; 0x7a
 8001ad6:	f000 fb9d 	bl	8002214 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(235,122,"Status", &TM_Font_11x18, ILI9341_COLOR_WHITE, ILI9341_COLOR_BLACK);
 8001ada:	2300      	movs	r3, #0
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <StartDisplayTask+0x174>)
 8001ae6:	4a31      	ldr	r2, [pc, #196]	; (8001bac <StartDisplayTask+0x188>)
 8001ae8:	217a      	movs	r1, #122	; 0x7a
 8001aea:	20eb      	movs	r0, #235	; 0xeb
 8001aec:	f000 fb92 	bl	8002214 <TM_ILI9341_Puts>

    /* Batteries */
    TM_ILI9341_DrawImage(6, 88, 95, 30, BAT);
 8001af0:	2300      	movs	r3, #0
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	231e      	movs	r3, #30
 8001af6:	225f      	movs	r2, #95	; 0x5f
 8001af8:	2158      	movs	r1, #88	; 0x58
 8001afa:	2006      	movs	r0, #6
 8001afc:	f000 fcac 	bl	8002458 <TM_ILI9341_DrawImage>
    TM_ILI9341_DrawImage(112, 88, 95, 30, BAT);
 8001b00:	2300      	movs	r3, #0
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	231e      	movs	r3, #30
 8001b06:	225f      	movs	r2, #95	; 0x5f
 8001b08:	2158      	movs	r1, #88	; 0x58
 8001b0a:	2070      	movs	r0, #112	; 0x70
 8001b0c:	f000 fca4 	bl	8002458 <TM_ILI9341_DrawImage>
    TM_ILI9341_DrawImage(219, 88, 95, 30, BAT);
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	231e      	movs	r3, #30
 8001b16:	225f      	movs	r2, #95	; 0x5f
 8001b18:	2158      	movs	r1, #88	; 0x58
 8001b1a:	20db      	movs	r0, #219	; 0xdb
 8001b1c:	f000 fc9c 	bl	8002458 <TM_ILI9341_DrawImage>

    /* Thermometers */
    TM_ILI9341_DrawImage(1, 145, 30, 90, THERM);
 8001b20:	2304      	movs	r3, #4
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	235a      	movs	r3, #90	; 0x5a
 8001b26:	221e      	movs	r2, #30
 8001b28:	2191      	movs	r1, #145	; 0x91
 8001b2a:	2001      	movs	r0, #1
 8001b2c:	f000 fc94 	bl	8002458 <TM_ILI9341_DrawImage>
    TM_ILI9341_DrawImage(113, 145, 30, 90, THERM);
 8001b30:	2304      	movs	r3, #4
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	235a      	movs	r3, #90	; 0x5a
 8001b36:	221e      	movs	r2, #30
 8001b38:	2191      	movs	r1, #145	; 0x91
 8001b3a:	2071      	movs	r0, #113	; 0x71
 8001b3c:	f000 fc8c 	bl	8002458 <TM_ILI9341_DrawImage>
    TM_ILI9341_Puts(220,180,"Room temp:", &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLACK);
 8001b40:	2300      	movs	r3, #0
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <StartDisplayTask+0x18c>)
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <StartDisplayTask+0x190>)
 8001b4e:	21b4      	movs	r1, #180	; 0xb4
 8001b50:	20dc      	movs	r0, #220	; 0xdc
 8001b52:	f000 fb5f 	bl	8002214 <TM_ILI9341_Puts>
    TM_ILI9341_Puts(220,147,"Bridge:", &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLACK);
 8001b56:	2300      	movs	r3, #0
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <StartDisplayTask+0x18c>)
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <StartDisplayTask+0x194>)
 8001b64:	2193      	movs	r1, #147	; 0x93
 8001b66:	20dc      	movs	r0, #220	; 0xdc
 8001b68:	f000 fb54 	bl	8002214 <TM_ILI9341_Puts>

   for(;;)
   {
	   uint32_t data;

	   osMessageQueueGet (displayQueueHandle, &data, NULL, 0);
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <StartDisplayTask+0x198>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	f107 010c 	add.w	r1, r7, #12
 8001b74:	2300      	movs	r3, #0
 8001b76:	2200      	movs	r2, #0
 8001b78:	f005 f9e4 	bl	8006f44 <osMessageQueueGet>

	   if (data){
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f4      	beq.n	8001b6c <StartDisplayTask+0x148>
           drawPoint(data & 0xFFFF, (data & 0xFFFF0000) >> 16);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f7ff ff39 	bl	8001a06 <drawPoint>
   {
 8001b94:	e7ea      	b.n	8001b6c <StartDisplayTask+0x148>
 8001b96:	bf00      	nop
 8001b98:	2000000c 	.word	0x2000000c
 8001b9c:	08009db0 	.word	0x08009db0
 8001ba0:	08009db8 	.word	0x08009db8
 8001ba4:	08009dc0 	.word	0x08009dc0
 8001ba8:	08009dc8 	.word	0x08009dc8
 8001bac:	08009dd0 	.word	0x08009dd0
 8001bb0:	20000004 	.word	0x20000004
 8001bb4:	08009dd8 	.word	0x08009dd8
 8001bb8:	08009de4 	.word	0x08009de4
 8001bbc:	20004c70 	.word	0x20004c70

08001bc0 <TM_ILI9341_Init>:
void TM_ILI9341_SendCommand(uint8_t data);
void TM_ILI9341_Delay(volatile unsigned int delay);
void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);

void TM_ILI9341_Init() {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	
	/* Init LCD */
//	ILI9341_BL_RESET;

	TM_ILI9341_InitLCD();	
 8001bc4:	f000 f820 	bl	8001c08 <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <TM_ILI9341_Init+0x3c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	801a      	strh	r2, [r3, #0]
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <TM_ILI9341_Init+0x3c>)
 8001bd0:	881a      	ldrh	r2, [r3, #0]
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <TM_ILI9341_Init+0x40>)
 8001bd4:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <TM_ILI9341_Init+0x44>)
 8001bd8:	22f0      	movs	r2, #240	; 0xf0
 8001bda:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <TM_ILI9341_Init+0x44>)
 8001bde:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001be2:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 8001be4:	4b07      	ldr	r3, [pc, #28]	; (8001c04 <TM_ILI9341_Init+0x44>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	711a      	strb	r2, [r3, #4]

	TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_2);
 8001bea:	2003      	movs	r0, #3
 8001bec:	f000 facc 	bl	8002188 <TM_ILI9341_Rotate>
	
	/* Fill with white color */
	TM_ILI9341_Fill(ILI9341_COLOR_BLACK);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f000 f9f7 	bl	8001fe4 <TM_ILI9341_Fill>

//	ILI9341_BL_SET;
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20004d2a 	.word	0x20004d2a
 8001c00:	20004d20 	.word	0x20004d20
 8001c04:	20004d24 	.word	0x20004d24

08001c08 <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	4899      	ldr	r0, [pc, #612]	; (8001e78 <TM_ILI9341_InitLCD+0x270>)
 8001c12:	f002 f903 	bl	8003e1c <HAL_GPIO_WritePin>
	TM_ILI9341_Delay(20000);
 8001c16:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001c1a:	f000 faa3 	bl	8002164 <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 8001c1e:	2201      	movs	r2, #1
 8001c20:	2140      	movs	r1, #64	; 0x40
 8001c22:	4895      	ldr	r0, [pc, #596]	; (8001e78 <TM_ILI9341_InitLCD+0x270>)
 8001c24:	f002 f8fa 	bl	8003e1c <HAL_GPIO_WritePin>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 8001c28:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001c2c:	f000 fa9a 	bl	8002164 <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f000 f925 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 8001c36:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c3a:	f000 fa93 	bl	8002164 <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 8001c3e:	20cb      	movs	r0, #203	; 0xcb
 8001c40:	f000 f91e 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 8001c44:	2039      	movs	r0, #57	; 0x39
 8001c46:	f000 f93f 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 8001c4a:	202c      	movs	r0, #44	; 0x2c
 8001c4c:	f000 f93c 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f000 f939 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 8001c56:	2034      	movs	r0, #52	; 0x34
 8001c58:	f000 f936 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f000 f933 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 8001c62:	20cf      	movs	r0, #207	; 0xcf
 8001c64:	f000 f90c 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f000 f92d 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 8001c6e:	20c1      	movs	r0, #193	; 0xc1
 8001c70:	f000 f92a 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 8001c74:	2030      	movs	r0, #48	; 0x30
 8001c76:	f000 f927 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 8001c7a:	20e8      	movs	r0, #232	; 0xe8
 8001c7c:	f000 f900 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 8001c80:	2085      	movs	r0, #133	; 0x85
 8001c82:	f000 f921 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f91e 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8001c8c:	2078      	movs	r0, #120	; 0x78
 8001c8e:	f000 f91b 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 8001c92:	20ea      	movs	r0, #234	; 0xea
 8001c94:	f000 f8f4 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f000 f915 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f912 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 8001ca4:	20ed      	movs	r0, #237	; 0xed
 8001ca6:	f000 f8eb 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 8001caa:	2064      	movs	r0, #100	; 0x64
 8001cac:	f000 f90c 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f000 f909 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 8001cb6:	2012      	movs	r0, #18
 8001cb8:	f000 f906 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 8001cbc:	2081      	movs	r0, #129	; 0x81
 8001cbe:	f000 f903 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 8001cc2:	20f7      	movs	r0, #247	; 0xf7
 8001cc4:	f000 f8dc 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 8001cc8:	2020      	movs	r0, #32
 8001cca:	f000 f8fd 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 8001cce:	20c0      	movs	r0, #192	; 0xc0
 8001cd0:	f000 f8d6 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 8001cd4:	2023      	movs	r0, #35	; 0x23
 8001cd6:	f000 f8f7 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 8001cda:	20c1      	movs	r0, #193	; 0xc1
 8001cdc:	f000 f8d0 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 8001ce0:	2010      	movs	r0, #16
 8001ce2:	f000 f8f1 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 8001ce6:	20c5      	movs	r0, #197	; 0xc5
 8001ce8:	f000 f8ca 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 8001cec:	203e      	movs	r0, #62	; 0x3e
 8001cee:	f000 f8eb 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 8001cf2:	2028      	movs	r0, #40	; 0x28
 8001cf4:	f000 f8e8 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 8001cf8:	20c7      	movs	r0, #199	; 0xc7
 8001cfa:	f000 f8c1 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 8001cfe:	2086      	movs	r0, #134	; 0x86
 8001d00:	f000 f8e2 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8001d04:	2036      	movs	r0, #54	; 0x36
 8001d06:	f000 f8bb 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 8001d0a:	2048      	movs	r0, #72	; 0x48
 8001d0c:	f000 f8dc 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 8001d10:	203a      	movs	r0, #58	; 0x3a
 8001d12:	f000 f8b5 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 8001d16:	2055      	movs	r0, #85	; 0x55
 8001d18:	f000 f8d6 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 8001d1c:	20b1      	movs	r0, #177	; 0xb1
 8001d1e:	f000 f8af 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f000 f8d0 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 8001d28:	2018      	movs	r0, #24
 8001d2a:	f000 f8cd 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 8001d2e:	20b6      	movs	r0, #182	; 0xb6
 8001d30:	f000 f8a6 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 8001d34:	2008      	movs	r0, #8
 8001d36:	f000 f8c7 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 8001d3a:	2082      	movs	r0, #130	; 0x82
 8001d3c:	f000 f8c4 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 8001d40:	2027      	movs	r0, #39	; 0x27
 8001d42:	f000 f8c1 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 8001d46:	20f2      	movs	r0, #242	; 0xf2
 8001d48:	f000 f89a 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f000 f8bb 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8001d52:	202a      	movs	r0, #42	; 0x2a
 8001d54:	f000 f894 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f000 f8b5 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f000 f8b2 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f8af 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 8001d6a:	20ef      	movs	r0, #239	; 0xef
 8001d6c:	f000 f8ac 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8001d70:	202b      	movs	r0, #43	; 0x2b
 8001d72:	f000 f885 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f8a6 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f000 f8a3 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 f8a0 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 8001d88:	203f      	movs	r0, #63	; 0x3f
 8001d8a:	f000 f89d 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8001d8e:	2026      	movs	r0, #38	; 0x26
 8001d90:	f000 f876 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8001d94:	2001      	movs	r0, #1
 8001d96:	f000 f897 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8001d9a:	20e0      	movs	r0, #224	; 0xe0
 8001d9c:	f000 f870 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8001da0:	200f      	movs	r0, #15
 8001da2:	f000 f891 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8001da6:	2031      	movs	r0, #49	; 0x31
 8001da8:	f000 f88e 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 8001dac:	202b      	movs	r0, #43	; 0x2b
 8001dae:	f000 f88b 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8001db2:	200c      	movs	r0, #12
 8001db4:	f000 f888 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001db8:	200e      	movs	r0, #14
 8001dba:	f000 f885 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8001dbe:	2008      	movs	r0, #8
 8001dc0:	f000 f882 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8001dc4:	204e      	movs	r0, #78	; 0x4e
 8001dc6:	f000 f87f 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 8001dca:	20f1      	movs	r0, #241	; 0xf1
 8001dcc:	f000 f87c 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 8001dd0:	2037      	movs	r0, #55	; 0x37
 8001dd2:	f000 f879 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8001dd6:	2007      	movs	r0, #7
 8001dd8:	f000 f876 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 8001ddc:	2010      	movs	r0, #16
 8001dde:	f000 f873 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8001de2:	2003      	movs	r0, #3
 8001de4:	f000 f870 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001de8:	200e      	movs	r0, #14
 8001dea:	f000 f86d 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8001dee:	2009      	movs	r0, #9
 8001df0:	f000 f86a 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f867 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 8001dfa:	20e1      	movs	r0, #225	; 0xe1
 8001dfc:	f000 f840 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f000 f861 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8001e06:	200e      	movs	r0, #14
 8001e08:	f000 f85e 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 8001e0c:	2014      	movs	r0, #20
 8001e0e:	f000 f85b 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 8001e12:	2003      	movs	r0, #3
 8001e14:	f000 f858 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8001e18:	2011      	movs	r0, #17
 8001e1a:	f000 f855 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8001e1e:	2007      	movs	r0, #7
 8001e20:	f000 f852 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8001e24:	2031      	movs	r0, #49	; 0x31
 8001e26:	f000 f84f 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 8001e2a:	20c1      	movs	r0, #193	; 0xc1
 8001e2c:	f000 f84c 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 8001e30:	2048      	movs	r0, #72	; 0x48
 8001e32:	f000 f849 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8001e36:	2008      	movs	r0, #8
 8001e38:	f000 f846 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8001e3c:	200f      	movs	r0, #15
 8001e3e:	f000 f843 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8001e42:	200c      	movs	r0, #12
 8001e44:	f000 f840 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8001e48:	2031      	movs	r0, #49	; 0x31
 8001e4a:	f000 f83d 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 8001e4e:	2036      	movs	r0, #54	; 0x36
 8001e50:	f000 f83a 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8001e54:	200f      	movs	r0, #15
 8001e56:	f000 f837 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 8001e5a:	2011      	movs	r0, #17
 8001e5c:	f000 f810 	bl	8001e80 <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 8001e60:	4806      	ldr	r0, [pc, #24]	; (8001e7c <TM_ILI9341_InitLCD+0x274>)
 8001e62:	f000 f97f 	bl	8002164 <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8001e66:	2029      	movs	r0, #41	; 0x29
 8001e68:	f000 f80a 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8001e6c:	202c      	movs	r0, #44	; 0x2c
 8001e6e:	f000 f807 	bl	8001e80 <TM_ILI9341_SendCommand>
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	000f4240 	.word	0x000f4240

08001e80 <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	480b      	ldr	r0, [pc, #44]	; (8001ebc <TM_ILI9341_SendCommand+0x3c>)
 8001e90:	f001 ffc4 	bl	8003e1c <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 8001e94:	2200      	movs	r2, #0
 8001e96:	2110      	movs	r1, #16
 8001e98:	4809      	ldr	r0, [pc, #36]	; (8001ec0 <TM_ILI9341_SendCommand+0x40>)
 8001e9a:	f001 ffbf 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
 8001e9e:	1dfb      	adds	r3, r7, #7
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4807      	ldr	r0, [pc, #28]	; (8001ec4 <TM_ILI9341_SendCommand+0x44>)
 8001ea6:	f003 f91d 	bl	80050e4 <HAL_SPI_Transmit_DMA>
	ILI9341_CS_SET;
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2110      	movs	r1, #16
 8001eae:	4804      	ldr	r0, [pc, #16]	; (8001ec0 <TM_ILI9341_SendCommand+0x40>)
 8001eb0:	f001 ffb4 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	20004c14 	.word	0x20004c14

08001ec8 <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	480b      	ldr	r0, [pc, #44]	; (8001f04 <TM_ILI9341_SendData+0x3c>)
 8001ed8:	f001 ffa0 	bl	8003e1c <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 8001edc:	2200      	movs	r2, #0
 8001ede:	2110      	movs	r1, #16
 8001ee0:	4809      	ldr	r0, [pc, #36]	; (8001f08 <TM_ILI9341_SendData+0x40>)
 8001ee2:	f001 ff9b 	bl	8003e1c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, &data, 1);
 8001ee6:	1dfb      	adds	r3, r7, #7
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	4807      	ldr	r0, [pc, #28]	; (8001f0c <TM_ILI9341_SendData+0x44>)
 8001eee:	f003 f8f9 	bl	80050e4 <HAL_SPI_Transmit_DMA>
	ILI9341_CS_SET;
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2110      	movs	r1, #16
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <TM_ILI9341_SendData+0x40>)
 8001ef8:	f001 ff90 	bl	8003e1c <HAL_GPIO_WritePin>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	20004c14 	.word	0x20004c14

08001f10 <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	603a      	str	r2, [r7, #0]
 8001f1a:	80fb      	strh	r3, [r7, #6]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 8001f20:	88bb      	ldrh	r3, [r7, #4]
 8001f22:	88fa      	ldrh	r2, [r7, #6]
 8001f24:	88b9      	ldrh	r1, [r7, #4]
 8001f26:	88f8      	ldrh	r0, [r7, #6]
 8001f28:	f000 f812 	bl	8001f50 <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8001f2c:	202c      	movs	r0, #44	; 0x2c
 8001f2e:	f7ff ffa7 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	0a1b      	lsrs	r3, r3, #8
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ffc5 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff ffc0 	bl	8001ec8 <TM_ILI9341_SendData>
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4604      	mov	r4, r0
 8001f58:	4608      	mov	r0, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4623      	mov	r3, r4
 8001f60:	80fb      	strh	r3, [r7, #6]
 8001f62:	4603      	mov	r3, r0
 8001f64:	80bb      	strh	r3, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	807b      	strh	r3, [r7, #2]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 8001f6e:	202a      	movs	r0, #42	; 0x2a
 8001f70:	f7ff ff86 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ffa3 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff9e 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 8001f8c:	887b      	ldrh	r3, [r7, #2]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff97 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff92 	bl	8001ec8 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8001fa4:	202b      	movs	r0, #43	; 0x2b
 8001fa6:	f7ff ff6b 	bl	8001e80 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 8001faa:	88bb      	ldrh	r3, [r7, #4]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff88 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff ff83 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 8001fc2:	883b      	ldrh	r3, [r7, #0]
 8001fc4:	0a1b      	lsrs	r3, r3, #8
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff7c 	bl	8001ec8 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 8001fd0:	883b      	ldrh	r3, [r7, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff77 	bl	8001ec8 <TM_ILI9341_SendData>
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd90      	pop	{r4, r7, pc}
	...

08001fe4 <TM_ILI9341_Fill>:

void TM_ILI9341_Fill(uint32_t color) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	6078      	str	r0, [r7, #4]
	/* Fill entire screen */
	TM_ILI9341_INT_Fill(0, 0, ILI9341_Opts.width, ILI9341_Opts.height, color);
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <TM_ILI9341_Fill+0x28>)
 8001fee:	881a      	ldrh	r2, [r3, #0]
 8001ff0:	4b06      	ldr	r3, [pc, #24]	; (800200c <TM_ILI9341_Fill+0x28>)
 8001ff2:	8859      	ldrh	r1, [r3, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f806 	bl	8002010 <TM_ILI9341_INT_Fill>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20004d24 	.word	0x20004d24

08002010 <TM_ILI9341_INT_Fill>:

void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	4604      	mov	r4, r0
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4623      	mov	r3, r4
 8002020:	80fb      	strh	r3, [r7, #6]
 8002022:	4603      	mov	r3, r0
 8002024:	80bb      	strh	r3, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	807b      	strh	r3, [r7, #2]
 800202a:	4613      	mov	r3, r2
 800202c:	803b      	strh	r3, [r7, #0]
	uint32_t pixels_count;
	uint16_t *temp;
	uint32_t i;

	/* Calculate pixels count */
	pixels_count = (x1 - x0) * (y1 - y0);
 800202e:	887a      	ldrh	r2, [r7, #2]
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	8839      	ldrh	r1, [r7, #0]
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	1a8a      	subs	r2, r1, r2
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]

	if (pixels_count > 1024) {
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002046:	d919      	bls.n	800207c <TM_ILI9341_INT_Fill+0x6c>
		temp = malloc(1024 * sizeof(uint16_t));
 8002048:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800204c:	f007 fd88 	bl	8009b60 <malloc>
 8002050:	4603      	mov	r3, r0
 8002052:	613b      	str	r3, [r7, #16]
		if (!temp) return;
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d078      	beq.n	800214c <TM_ILI9341_INT_Fill+0x13c>
		for (i=0 ; i < 1024 ; i++) {
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	e008      	b.n	8002072 <TM_ILI9341_INT_Fill+0x62>
	        temp[i] = color;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800206a:	801a      	strh	r2, [r3, #0]
		for (i=0 ; i < 1024 ; i++) {
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3301      	adds	r3, #1
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d3f2      	bcc.n	8002060 <TM_ILI9341_INT_Fill+0x50>
 800207a:	e017      	b.n	80020ac <TM_ILI9341_INT_Fill+0x9c>
		}
	}
	else{
		temp = malloc(pixels_count);
 800207c:	6978      	ldr	r0, [r7, #20]
 800207e:	f007 fd6f 	bl	8009b60 <malloc>
 8002082:	4603      	mov	r3, r0
 8002084:	613b      	str	r3, [r7, #16]
		if (!temp) return;
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d061      	beq.n	8002150 <TM_ILI9341_INT_Fill+0x140>
		for (i=0 ; i < pixels_count ; i++) {
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e008      	b.n	80020a4 <TM_ILI9341_INT_Fill+0x94>
	        temp[i] = color;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800209c:	801a      	strh	r2, [r3, #0]
		for (i=0 ; i < pixels_count ; i++) {
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3301      	adds	r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d3f2      	bcc.n	8002092 <TM_ILI9341_INT_Fill+0x82>
		}
	}

	/* Set cursor position */
	TM_ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80020ac:	883b      	ldrh	r3, [r7, #0]
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	88b9      	ldrh	r1, [r7, #4]
 80020b2:	88f8      	ldrh	r0, [r7, #6]
 80020b4:	f7ff ff4c 	bl	8001f50 <TM_ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80020b8:	202c      	movs	r0, #44	; 0x2c
 80020ba:	f7ff fee1 	bl	8001e80 <TM_ILI9341_SendCommand>
	
	/* Send everything */
	ILI9341_WRX_SET;
 80020be:	2201      	movs	r2, #1
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	4825      	ldr	r0, [pc, #148]	; (8002158 <TM_ILI9341_INT_Fill+0x148>)
 80020c4:	f001 feaa 	bl	8003e1c <HAL_GPIO_WritePin>
	
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <TM_ILI9341_INT_Fill+0x14c>)
 80020ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020ce:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 80020d0:	4822      	ldr	r0, [pc, #136]	; (800215c <TM_ILI9341_INT_Fill+0x14c>)
 80020d2:	f002 fe42 	bl	8004d5a <HAL_SPI_Init>

	while (pixels_count) {
 80020d6:	e02c      	b.n	8002132 <TM_ILI9341_INT_Fill+0x122>
		if (pixels_count > 1024) {
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020de:	d915      	bls.n	800210c <TM_ILI9341_INT_Fill+0xfc>
			ILI9341_CS_RESET;
 80020e0:	2200      	movs	r2, #0
 80020e2:	2110      	movs	r1, #16
 80020e4:	481e      	ldr	r0, [pc, #120]	; (8002160 <TM_ILI9341_INT_Fill+0x150>)
 80020e6:	f001 fe99 	bl	8003e1c <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)temp, 1024, 5);
 80020ea:	2305      	movs	r3, #5
 80020ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020f0:	6939      	ldr	r1, [r7, #16]
 80020f2:	481a      	ldr	r0, [pc, #104]	; (800215c <TM_ILI9341_INT_Fill+0x14c>)
 80020f4:	f002 feba 	bl	8004e6c <HAL_SPI_Transmit>
			//HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)temp, 1024);
			pixels_count -= 1024;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80020fe:	617b      	str	r3, [r7, #20]
			ILI9341_CS_SET;
 8002100:	2201      	movs	r2, #1
 8002102:	2110      	movs	r1, #16
 8002104:	4816      	ldr	r0, [pc, #88]	; (8002160 <TM_ILI9341_INT_Fill+0x150>)
 8002106:	f001 fe89 	bl	8003e1c <HAL_GPIO_WritePin>
 800210a:	e012      	b.n	8002132 <TM_ILI9341_INT_Fill+0x122>
		}
		else {
			ILI9341_CS_RESET;
 800210c:	2200      	movs	r2, #0
 800210e:	2110      	movs	r1, #16
 8002110:	4813      	ldr	r0, [pc, #76]	; (8002160 <TM_ILI9341_INT_Fill+0x150>)
 8002112:	f001 fe83 	bl	8003e1c <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, (uint8_t *)temp, pixels_count, 5);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	b29a      	uxth	r2, r3
 800211a:	2305      	movs	r3, #5
 800211c:	6939      	ldr	r1, [r7, #16]
 800211e:	480f      	ldr	r0, [pc, #60]	; (800215c <TM_ILI9341_INT_Fill+0x14c>)
 8002120:	f002 fea4 	bl	8004e6c <HAL_SPI_Transmit>
			//HAL_SPI_Transmit_DMA(&hspi1, (uint8_t *)temp, pixels_count);
			pixels_count = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
			ILI9341_CS_SET;
 8002128:	2201      	movs	r2, #1
 800212a:	2110      	movs	r1, #16
 800212c:	480c      	ldr	r0, [pc, #48]	; (8002160 <TM_ILI9341_INT_Fill+0x150>)
 800212e:	f001 fe75 	bl	8003e1c <HAL_GPIO_WritePin>
	while (pixels_count) {
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1cf      	bne.n	80020d8 <TM_ILI9341_INT_Fill+0xc8>
		}
	}

	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <TM_ILI9341_INT_Fill+0x14c>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 800213e:	4807      	ldr	r0, [pc, #28]	; (800215c <TM_ILI9341_INT_Fill+0x14c>)
 8002140:	f002 fe0b 	bl	8004d5a <HAL_SPI_Init>

	free(temp);
 8002144:	6938      	ldr	r0, [r7, #16]
 8002146:	f007 fd13 	bl	8009b70 <free>
 800214a:	e002      	b.n	8002152 <TM_ILI9341_INT_Fill+0x142>
		if (!temp) return;
 800214c:	bf00      	nop
 800214e:	e000      	b.n	8002152 <TM_ILI9341_INT_Fill+0x142>
		if (!temp) return;
 8002150:	bf00      	nop
}
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	40020c00 	.word	0x40020c00
 800215c:	20004c14 	.word	0x20004c14
 8002160:	40020000 	.word	0x40020000

08002164 <TM_ILI9341_Delay>:

void TM_ILI9341_Delay(volatile unsigned int delay) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 800216c:	e002      	b.n	8002174 <TM_ILI9341_Delay+0x10>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	3b01      	subs	r3, #1
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <TM_ILI9341_Delay+0xa>
}
 800217a:	bf00      	nop
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <TM_ILI9341_Rotate>:

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8002192:	2036      	movs	r0, #54	; 0x36
 8002194:	f7ff fe74 	bl	8001e80 <TM_ILI9341_SendCommand>
	if (orientation == TM_ILI9341_Orientation_Portrait_1) {
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <TM_ILI9341_Rotate+0x1e>
		TM_ILI9341_SendData(0x58);
 800219e:	2058      	movs	r0, #88	; 0x58
 80021a0:	f7ff fe92 	bl	8001ec8 <TM_ILI9341_SendData>
 80021a4:	e013      	b.n	80021ce <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Portrait_2) {
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d103      	bne.n	80021b4 <TM_ILI9341_Rotate+0x2c>
		TM_ILI9341_SendData(0x88);
 80021ac:	2088      	movs	r0, #136	; 0x88
 80021ae:	f7ff fe8b 	bl	8001ec8 <TM_ILI9341_SendData>
 80021b2:	e00c      	b.n	80021ce <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_1) {
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d103      	bne.n	80021c2 <TM_ILI9341_Rotate+0x3a>
		TM_ILI9341_SendData(0x28);
 80021ba:	2028      	movs	r0, #40	; 0x28
 80021bc:	f7ff fe84 	bl	8001ec8 <TM_ILI9341_SendData>
 80021c0:	e005      	b.n	80021ce <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_2) {
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d102      	bne.n	80021ce <TM_ILI9341_Rotate+0x46>
		TM_ILI9341_SendData(0xE8);
 80021c8:	20e8      	movs	r0, #232	; 0xe8
 80021ca:	f7ff fe7d 	bl	8001ec8 <TM_ILI9341_SendData>
	}
	
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <TM_ILI9341_Rotate+0x52>
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d10a      	bne.n	80021f0 <TM_ILI9341_Rotate+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <TM_ILI9341_Rotate+0x88>)
 80021dc:	22f0      	movs	r2, #240	; 0xf0
 80021de:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <TM_ILI9341_Rotate+0x88>)
 80021e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021e6:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <TM_ILI9341_Rotate+0x88>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	711a      	strb	r2, [r3, #4]
 80021ee:	e00a      	b.n	8002206 <TM_ILI9341_Rotate+0x7e>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 80021f0:	4b07      	ldr	r3, [pc, #28]	; (8002210 <TM_ILI9341_Rotate+0x88>)
 80021f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021f6:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <TM_ILI9341_Rotate+0x88>)
 80021fa:	22f0      	movs	r2, #240	; 0xf0
 80021fc:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Landscape;
 80021fe:	4b04      	ldr	r3, [pc, #16]	; (8002210 <TM_ILI9341_Rotate+0x88>)
 8002200:	2200      	movs	r2, #0
 8002202:	711a      	strb	r2, [r3, #4]
	}
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20004d24 	.word	0x20004d24

08002214 <TM_ILI9341_Puts>:

void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60ba      	str	r2, [r7, #8]
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	4603      	mov	r3, r0
 8002220:	81fb      	strh	r3, [r7, #14]
 8002222:	460b      	mov	r3, r1
 8002224:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 8002226:	89fb      	ldrh	r3, [r7, #14]
 8002228:	82fb      	strh	r3, [r7, #22]
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 800222a:	4a24      	ldr	r2, [pc, #144]	; (80022bc <TM_ILI9341_Puts+0xa8>)
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 8002230:	4a23      	ldr	r2, [pc, #140]	; (80022c0 <TM_ILI9341_Puts+0xac>)
 8002232:	89bb      	ldrh	r3, [r7, #12]
 8002234:	8013      	strh	r3, [r2, #0]
	
	while (*str) {
 8002236:	e038      	b.n	80022aa <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b0a      	cmp	r3, #10
 800223e:	d11d      	bne.n	800227c <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	b29a      	uxth	r2, r3
 8002246:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <TM_ILI9341_Puts+0xac>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	b29b      	uxth	r3, r3
 800224e:	3301      	adds	r3, #1
 8002250:	b29a      	uxth	r2, r3
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <TM_ILI9341_Puts+0xac>)
 8002254:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b0d      	cmp	r3, #13
 800225e:	d106      	bne.n	800226e <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 8002260:	4b16      	ldr	r3, [pc, #88]	; (80022bc <TM_ILI9341_Puts+0xa8>)
 8002262:	2200      	movs	r2, #0
 8002264:	801a      	strh	r2, [r3, #0]
				str++;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	3301      	adds	r3, #1
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	e002      	b.n	8002274 <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 800226e:	4a13      	ldr	r2, [pc, #76]	; (80022bc <TM_ILI9341_Puts+0xa8>)
 8002270:	8afb      	ldrh	r3, [r7, #22]
 8002272:	8013      	strh	r3, [r2, #0]
			}
			str++;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	3301      	adds	r3, #1
 8002278:	60bb      	str	r3, [r7, #8]
			continue;
 800227a:	e016      	b.n	80022aa <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b0d      	cmp	r3, #13
 8002282:	d103      	bne.n	800228c <TM_ILI9341_Puts+0x78>
			str++;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	3301      	adds	r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
			continue;
 800228a:	e00e      	b.n	80022aa <TM_ILI9341_Puts+0x96>
		}
		
		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <TM_ILI9341_Puts+0xa8>)
 800228e:	8818      	ldrh	r0, [r3, #0]
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <TM_ILI9341_Puts+0xac>)
 8002292:	8819      	ldrh	r1, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	60ba      	str	r2, [r7, #8]
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f000 f80d 	bl	80022c4 <TM_ILI9341_Putc>
	while (*str) {
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1c2      	bne.n	8002238 <TM_ILI9341_Puts+0x24>
	}
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20004d20 	.word	0x20004d20
 80022c0:	20004d2a 	.word	0x20004d2a

080022c4 <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b08b      	sub	sp, #44	; 0x2c
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	4603      	mov	r3, r0
 80022ce:	81fb      	strh	r3, [r7, #14]
 80022d0:	460b      	mov	r3, r1
 80022d2:	81bb      	strh	r3, [r7, #12]
 80022d4:	4613      	mov	r3, r2
 80022d6:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 80022d8:	4a40      	ldr	r2, [pc, #256]	; (80023dc <TM_ILI9341_Putc+0x118>)
 80022da:	89fb      	ldrh	r3, [r7, #14]
 80022dc:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 80022de:	4a40      	ldr	r2, [pc, #256]	; (80023e0 <TM_ILI9341_Putc+0x11c>)
 80022e0:	89bb      	ldrh	r3, [r7, #12]
 80022e2:	8013      	strh	r3, [r2, #0]
	
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 80022e4:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <TM_ILI9341_Putc+0x118>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a3c      	ldr	r2, [pc, #240]	; (80023e4 <TM_ILI9341_Putc+0x120>)
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	4293      	cmp	r3, r2
 80022f6:	dd0b      	ble.n	8002310 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <TM_ILI9341_Putc+0x11c>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	b29a      	uxth	r2, r3
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <TM_ILI9341_Putc+0x11c>)
 8002308:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 800230a:	4b34      	ldr	r3, [pc, #208]	; (80023dc <TM_ILI9341_Putc+0x118>)
 800230c:	2200      	movs	r2, #0
 800230e:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 8002310:	4b32      	ldr	r3, [pc, #200]	; (80023dc <TM_ILI9341_Putc+0x118>)
 8002312:	8818      	ldrh	r0, [r3, #0]
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <TM_ILI9341_Putc+0x11c>)
 8002316:	8819      	ldrh	r1, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b29a      	uxth	r2, r3
 800231e:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <TM_ILI9341_Putc+0x118>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	4413      	add	r3, r2
 8002324:	b29c      	uxth	r4, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	785b      	ldrb	r3, [r3, #1]
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b2c      	ldr	r3, [pc, #176]	; (80023e0 <TM_ILI9341_Putc+0x11c>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	4413      	add	r3, r2
 8002332:	b29a      	uxth	r2, r3
 8002334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002336:	b29b      	uxth	r3, r3
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	4613      	mov	r3, r2
 800233c:	4622      	mov	r2, r4
 800233e:	f7ff fe67 	bl	8002010 <TM_ILI9341_INT_Fill>
	
	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
 8002346:	e035      	b.n	80023b4 <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	3b20      	subs	r3, #32
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	7849      	ldrb	r1, [r1, #1]
 8002354:	fb01 f303 	mul.w	r3, r1, r3
 8002358:	4619      	mov	r1, r3
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	440b      	add	r3, r1
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	881b      	ldrh	r3, [r3, #0]
 8002364:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	e01a      	b.n	80023a2 <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00f      	beq.n	800239c <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	b29a      	uxth	r2, r3
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <TM_ILI9341_Putc+0x118>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	4413      	add	r3, r2
 8002386:	b298      	uxth	r0, r3
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <TM_ILI9341_Putc+0x11c>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	4413      	add	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002396:	4619      	mov	r1, r3
 8002398:	f7ff fdba 	bl	8001f10 <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	3301      	adds	r3, #1
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d3de      	bcc.n	800236c <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	785b      	ldrb	r3, [r3, #1]
 80023b8:	461a      	mov	r2, r3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	4293      	cmp	r3, r2
 80023be:	d3c3      	bcc.n	8002348 <TM_ILI9341_Putc+0x84>
			}
		}
	}
	
	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <TM_ILI9341_Putc+0x118>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b03      	ldr	r3, [pc, #12]	; (80023dc <TM_ILI9341_Putc+0x118>)
 80023d0:	801a      	strh	r2, [r3, #0]
}
 80023d2:	bf00      	nop
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	bf00      	nop
 80023dc:	20004d20 	.word	0x20004d20
 80023e0:	20004d2a 	.word	0x20004d2a
 80023e4:	20004d24 	.word	0x20004d24

080023e8 <TM_ILI9341_DrawFilledRectangle>:
	TM_ILI9341_DrawLine(x0, y0, x0, y1, color);	//Left
	TM_ILI9341_DrawLine(x1, y0, x1, y1, color);	//Right
	TM_ILI9341_DrawLine(x0, y1, x1, y1, color);	//Bottom
}

void TM_ILI9341_DrawFilledRectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {	
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b087      	sub	sp, #28
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	4604      	mov	r4, r0
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	461a      	mov	r2, r3
 80023f6:	4623      	mov	r3, r4
 80023f8:	80fb      	strh	r3, [r7, #6]
 80023fa:	4603      	mov	r3, r0
 80023fc:	80bb      	strh	r3, [r7, #4]
 80023fe:	460b      	mov	r3, r1
 8002400:	807b      	strh	r3, [r7, #2]
 8002402:	4613      	mov	r3, r2
 8002404:	803b      	strh	r3, [r7, #0]
	uint16_t tmp;
	
	/* Check correction */
	if (x0 > x1) {
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	429a      	cmp	r2, r3
 800240c:	d905      	bls.n	800241a <TM_ILI9341_DrawFilledRectangle+0x32>
		tmp = x0;
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	81fb      	strh	r3, [r7, #14]
		x0 = x1;
 8002412:	887b      	ldrh	r3, [r7, #2]
 8002414:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 8002416:	89fb      	ldrh	r3, [r7, #14]
 8002418:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800241a:	88ba      	ldrh	r2, [r7, #4]
 800241c:	883b      	ldrh	r3, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d905      	bls.n	800242e <TM_ILI9341_DrawFilledRectangle+0x46>
		tmp = y0;
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	81fb      	strh	r3, [r7, #14]
		y0 = y1;
 8002426:	883b      	ldrh	r3, [r7, #0]
 8002428:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Fill rectangle */
	TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
 800242e:	6a3b      	ldr	r3, [r7, #32]
 8002430:	b29b      	uxth	r3, r3
 8002432:	883c      	ldrh	r4, [r7, #0]
 8002434:	887a      	ldrh	r2, [r7, #2]
 8002436:	88b9      	ldrh	r1, [r7, #4]
 8002438:	88f8      	ldrh	r0, [r7, #6]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4623      	mov	r3, r4
 800243e:	f7ff fde7 	bl	8002010 <TM_ILI9341_INT_Fill>
	
	/* CS HIGH back */
	ILI9341_CS_SET;
 8002442:	2201      	movs	r2, #1
 8002444:	2110      	movs	r1, #16
 8002446:	4803      	ldr	r0, [pc, #12]	; (8002454 <TM_ILI9341_DrawFilledRectangle+0x6c>)
 8002448:	f001 fce8 	bl	8003e1c <HAL_GPIO_WritePin>
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}
 8002454:	40020000 	.word	0x40020000

08002458 <TM_ILI9341_DrawImage>:
        TM_ILI9341_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
        TM_ILI9341_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
    }
}

void TM_ILI9341_DrawImage(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t imgId) {
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4604      	mov	r4, r0
 8002460:	4608      	mov	r0, r1
 8002462:	4611      	mov	r1, r2
 8002464:	461a      	mov	r2, r3
 8002466:	4623      	mov	r3, r4
 8002468:	80fb      	strh	r3, [r7, #6]
 800246a:	4603      	mov	r3, r0
 800246c:	80bb      	strh	r3, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]
 8002472:	4613      	mov	r3, r2
 8002474:	803b      	strh	r3, [r7, #0]

	TM_ILI9341_SetCursorPosition(x0, y0, x0+x1-1, y0+y1-1);
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	4413      	add	r3, r2
 800247c:	b29b      	uxth	r3, r3
 800247e:	3b01      	subs	r3, #1
 8002480:	b29c      	uxth	r4, r3
 8002482:	88ba      	ldrh	r2, [r7, #4]
 8002484:	883b      	ldrh	r3, [r7, #0]
 8002486:	4413      	add	r3, r2
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29b      	uxth	r3, r3
 800248e:	88b9      	ldrh	r1, [r7, #4]
 8002490:	88f8      	ldrh	r0, [r7, #6]
 8002492:	4622      	mov	r2, r4
 8002494:	f7ff fd5c 	bl	8001f50 <TM_ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8002498:	202c      	movs	r0, #44	; 0x2c
 800249a:	f7ff fcf1 	bl	8001e80 <TM_ILI9341_SendCommand>

	/* Send everything */
	ILI9341_WRX_SET;
 800249e:	2201      	movs	r2, #1
 80024a0:	2180      	movs	r1, #128	; 0x80
 80024a2:	4838      	ldr	r0, [pc, #224]	; (8002584 <TM_ILI9341_DrawImage+0x12c>)
 80024a4:	f001 fcba 	bl	8003e1c <HAL_GPIO_WritePin>

	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80024a8:	4b37      	ldr	r3, [pc, #220]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 80024aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024ae:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 80024b0:	4835      	ldr	r0, [pc, #212]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 80024b2:	f002 fc52 	bl	8004d5a <HAL_SPI_Init>
	ILI9341_CS_RESET;
 80024b6:	2200      	movs	r2, #0
 80024b8:	2110      	movs	r1, #16
 80024ba:	4834      	ldr	r0, [pc, #208]	; (800258c <TM_ILI9341_DrawImage+0x134>)
 80024bc:	f001 fcae 	bl	8003e1c <HAL_GPIO_WritePin>
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b07      	cmp	r3, #7
 80024c4:	d84f      	bhi.n	8002566 <TM_ILI9341_DrawImage+0x10e>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <TM_ILI9341_DrawImage+0x74>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	080024ed 	.word	0x080024ed
 80024d0:	080024fd 	.word	0x080024fd
 80024d4:	0800250b 	.word	0x0800250b
 80024d8:	08002519 	.word	0x08002519
 80024dc:	08002527 	.word	0x08002527
 80024e0:	08002537 	.word	0x08002537
 80024e4:	08002547 	.word	0x08002547
 80024e8:	08002557 	.word	0x08002557
	switch(imgId){
	 	case BAT:
	 		HAL_SPI_Transmit(&hspi1, &bat, 95*30, 100);
 80024ec:	2364      	movs	r3, #100	; 0x64
 80024ee:	f640 3222 	movw	r2, #2850	; 0xb22
 80024f2:	4927      	ldr	r1, [pc, #156]	; (8002590 <TM_ILI9341_DrawImage+0x138>)
 80024f4:	4824      	ldr	r0, [pc, #144]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 80024f6:	f002 fcb9 	bl	8004e6c <HAL_SPI_Transmit>
	 		break;
 80024fa:	e034      	b.n	8002566 <TM_ILI9341_DrawImage+0x10e>
	 	case BAT_R:
	 	    HAL_SPI_Transmit(&hspi1, &bat_red, 26*7, 100);
 80024fc:	2364      	movs	r3, #100	; 0x64
 80024fe:	22b6      	movs	r2, #182	; 0xb6
 8002500:	4924      	ldr	r1, [pc, #144]	; (8002594 <TM_ILI9341_DrawImage+0x13c>)
 8002502:	4821      	ldr	r0, [pc, #132]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002504:	f002 fcb2 	bl	8004e6c <HAL_SPI_Transmit>
	 		break;
 8002508:	e02d      	b.n	8002566 <TM_ILI9341_DrawImage+0x10e>
	 	case BAT_O:
	 	    HAL_SPI_Transmit(&hspi1, &bat_orange, 26*7, 100);
 800250a:	2364      	movs	r3, #100	; 0x64
 800250c:	22b6      	movs	r2, #182	; 0xb6
 800250e:	4922      	ldr	r1, [pc, #136]	; (8002598 <TM_ILI9341_DrawImage+0x140>)
 8002510:	481d      	ldr	r0, [pc, #116]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002512:	f002 fcab 	bl	8004e6c <HAL_SPI_Transmit>
	 		break;
 8002516:	e026      	b.n	8002566 <TM_ILI9341_DrawImage+0x10e>
	 	case BAT_G:
	 	    HAL_SPI_Transmit(&hspi1, &bat_green, 26*7, 100);
 8002518:	2364      	movs	r3, #100	; 0x64
 800251a:	22b6      	movs	r2, #182	; 0xb6
 800251c:	491f      	ldr	r1, [pc, #124]	; (800259c <TM_ILI9341_DrawImage+0x144>)
 800251e:	481a      	ldr	r0, [pc, #104]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002520:	f002 fca4 	bl	8004e6c <HAL_SPI_Transmit>
	 		break;
 8002524:	e01f      	b.n	8002566 <TM_ILI9341_DrawImage+0x10e>
	 	case THERM:
	 	    HAL_SPI_Transmit(&hspi1, &therm, 90*30, 100);
 8002526:	2364      	movs	r3, #100	; 0x64
 8002528:	f640 228c 	movw	r2, #2700	; 0xa8c
 800252c:	491c      	ldr	r1, [pc, #112]	; (80025a0 <TM_ILI9341_DrawImage+0x148>)
 800252e:	4816      	ldr	r0, [pc, #88]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002530:	f002 fc9c 	bl	8004e6c <HAL_SPI_Transmit>
	 		break;
 8002534:	e017      	b.n	8002566 <TM_ILI9341_DrawImage+0x10e>
	 	case BON:
	 	    HAL_SPI_Transmit(&hspi1, &bon, 40*20, 100);
 8002536:	2364      	movs	r3, #100	; 0x64
 8002538:	f44f 7248 	mov.w	r2, #800	; 0x320
 800253c:	4919      	ldr	r1, [pc, #100]	; (80025a4 <TM_ILI9341_DrawImage+0x14c>)
 800253e:	4812      	ldr	r0, [pc, #72]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002540:	f002 fc94 	bl	8004e6c <HAL_SPI_Transmit>
	 		break;
 8002544:	e00f      	b.n	8002566 <TM_ILI9341_DrawImage+0x10e>
	 	case BOFF:
	 	    HAL_SPI_Transmit(&hspi1, &boff, 40*20, 100);
 8002546:	2364      	movs	r3, #100	; 0x64
 8002548:	f44f 7248 	mov.w	r2, #800	; 0x320
 800254c:	4916      	ldr	r1, [pc, #88]	; (80025a8 <TM_ILI9341_DrawImage+0x150>)
 800254e:	480e      	ldr	r0, [pc, #56]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002550:	f002 fc8c 	bl	8004e6c <HAL_SPI_Transmit>
	 		break;
 8002554:	e007      	b.n	8002566 <TM_ILI9341_DrawImage+0x10e>
	 	case ERR:
	 	    HAL_SPI_Transmit(&hspi1, &error, 36*30, 100);
 8002556:	2364      	movs	r3, #100	; 0x64
 8002558:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800255c:	4913      	ldr	r1, [pc, #76]	; (80025ac <TM_ILI9341_DrawImage+0x154>)
 800255e:	480a      	ldr	r0, [pc, #40]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002560:	f002 fc84 	bl	8004e6c <HAL_SPI_Transmit>
	 		break;
 8002564:	bf00      	nop
	}
	ILI9341_CS_SET;
 8002566:	2201      	movs	r2, #1
 8002568:	2110      	movs	r1, #16
 800256a:	4808      	ldr	r0, [pc, #32]	; (800258c <TM_ILI9341_DrawImage+0x134>)
 800256c:	f001 fc56 	bl	8003e1c <HAL_GPIO_WritePin>

	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002570:	4b05      	ldr	r3, [pc, #20]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
	HAL_SPI_Init(&hspi1);
 8002576:	4804      	ldr	r0, [pc, #16]	; (8002588 <TM_ILI9341_DrawImage+0x130>)
 8002578:	f002 fbef 	bl	8004d5a <HAL_SPI_Init>

}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	40020c00 	.word	0x40020c00
 8002588:	20004c14 	.word	0x20004c14
 800258c:	40020000 	.word	0x40020000
 8002590:	0800b3f8 	.word	0x0800b3f8
 8002594:	0800ca3c 	.word	0x0800ca3c
 8002598:	0800cba8 	.word	0x0800cba8
 800259c:	0800cd14 	.word	0x0800cd14
 80025a0:	0800ce80 	.word	0x0800ce80
 80025a4:	0800e398 	.word	0x0800e398
 80025a8:	0800e9d8 	.word	0x0800e9d8
 80025ac:	0800f018 	.word	0x0800f018

080025b0 <Task_Ds18b20>:
	#endif
}
//###########################################################################################
#if (_DS18B20_USE_FREERTOS==1)
void Task_Ds18b20(void const * argument)
{
 80025b0:	b590      	push	{r4, r7, lr}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	uint8_t	Ds18b20TryToFind=5;
 80025b8:	2305      	movs	r3, #5
 80025ba:	73fb      	strb	r3, [r7, #15]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 80025bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025c0:	4969      	ldr	r1, [pc, #420]	; (8002768 <Task_Ds18b20+0x1b8>)
 80025c2:	486a      	ldr	r0, [pc, #424]	; (800276c <Task_Ds18b20+0x1bc>)
 80025c4:	f000 fb60 	bl	8002c88 <OneWire_Init>
		TempSensorCount = 0;
 80025c8:	4b69      	ldr	r3, [pc, #420]	; (8002770 <Task_Ds18b20+0x1c0>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 80025ce:	e002      	b.n	80025d6 <Task_Ds18b20+0x26>
			Ds18b20Delay(100);
 80025d0:	2064      	movs	r0, #100	; 0x64
 80025d2:	f004 fc29 	bl	8006e28 <osDelay>
		while(HAL_GetTick() < 3000)
 80025d6:	f000 fdeb 	bl	80031b0 <HAL_GetTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d9f5      	bls.n	80025d0 <Task_Ds18b20+0x20>
		OneWireDevices = OneWire_First(&OneWire);
 80025e4:	4861      	ldr	r0, [pc, #388]	; (800276c <Task_Ds18b20+0x1bc>)
 80025e6:	f000 fc42 	bl	8002e6e <OneWire_First>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b61      	ldr	r3, [pc, #388]	; (8002774 <Task_Ds18b20+0x1c4>)
 80025f0:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 80025f2:	e019      	b.n	8002628 <Task_Ds18b20+0x78>
		{
			Ds18b20Delay(100);
 80025f4:	2064      	movs	r0, #100	; 0x64
 80025f6:	f004 fc17 	bl	8006e28 <osDelay>
			TempSensorCount++;
 80025fa:	4b5d      	ldr	r3, [pc, #372]	; (8002770 <Task_Ds18b20+0x1c0>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	3301      	adds	r3, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	4b5b      	ldr	r3, [pc, #364]	; (8002770 <Task_Ds18b20+0x1c0>)
 8002604:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8002606:	4b5a      	ldr	r3, [pc, #360]	; (8002770 <Task_Ds18b20+0x1c0>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	3b01      	subs	r3, #1
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <Task_Ds18b20+0x1c8>)
 8002610:	4413      	add	r3, r2
 8002612:	4619      	mov	r1, r3
 8002614:	4855      	ldr	r0, [pc, #340]	; (800276c <Task_Ds18b20+0x1bc>)
 8002616:	f000 fd3f 	bl	8003098 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 800261a:	4854      	ldr	r0, [pc, #336]	; (800276c <Task_Ds18b20+0x1bc>)
 800261c:	f000 fc37 	bl	8002e8e <OneWire_Next>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b53      	ldr	r3, [pc, #332]	; (8002774 <Task_Ds18b20+0x1c4>)
 8002626:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8002628:	4b52      	ldr	r3, [pc, #328]	; (8002774 <Task_Ds18b20+0x1c4>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e1      	bne.n	80025f4 <Task_Ds18b20+0x44>
		}
		if(TempSensorCount>0)
 8002630:	4b4f      	ldr	r3, [pc, #316]	; (8002770 <Task_Ds18b20+0x1c0>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d106      	bne.n	8002646 <Task_Ds18b20+0x96>
			break;
		Ds18b20TryToFind--;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	3b01      	subs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
	}while(Ds18b20TryToFind>0);
 800263e:	7bfb      	ldrb	r3, [r7, #15]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1bb      	bne.n	80025bc <Task_Ds18b20+0xc>
 8002644:	e000      	b.n	8002648 <Task_Ds18b20+0x98>
			break;
 8002646:	bf00      	nop
	if(Ds18b20TryToFind==0)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d104      	bne.n	8002658 <Task_Ds18b20+0xa8>
		vTaskDelete(Ds18b20Handle);
 800264e:	4b4b      	ldr	r3, [pc, #300]	; (800277c <Task_Ds18b20+0x1cc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f005 fd04 	bl	8008060 <vTaskDelete>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	73bb      	strb	r3, [r7, #14]
 800265c:	e019      	b.n	8002692 <Task_Ds18b20+0xe2>
	{
		Ds18b20Delay(50);
 800265e:	2032      	movs	r0, #50	; 0x32
 8002660:	f004 fbe2 	bl	8006e28 <osDelay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8002664:	7bbb      	ldrb	r3, [r7, #14]
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4a43      	ldr	r2, [pc, #268]	; (8002778 <Task_Ds18b20+0x1c8>)
 800266a:	4413      	add	r3, r2
 800266c:	220c      	movs	r2, #12
 800266e:	4619      	mov	r1, r3
 8002670:	483e      	ldr	r0, [pc, #248]	; (800276c <Task_Ds18b20+0x1bc>)
 8002672:	f000 f99d 	bl	80029b0 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 8002676:	2032      	movs	r0, #50	; 0x32
 8002678:	f004 fbd6 	bl	8006e28 <osDelay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 800267c:	7bbb      	ldrb	r3, [r7, #14]
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	4a3d      	ldr	r2, [pc, #244]	; (8002778 <Task_Ds18b20+0x1c8>)
 8002682:	4413      	add	r3, r2
 8002684:	4619      	mov	r1, r3
 8002686:	4839      	ldr	r0, [pc, #228]	; (800276c <Task_Ds18b20+0x1bc>)
 8002688:	f000 fa2b 	bl	8002ae2 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	3301      	adds	r3, #1
 8002690:	73bb      	strb	r3, [r7, #14]
 8002692:	4b37      	ldr	r3, [pc, #220]	; (8002770 <Task_Ds18b20+0x1c0>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	7bba      	ldrb	r2, [r7, #14]
 8002698:	429a      	cmp	r2, r3
 800269a:	d3e0      	bcc.n	800265e <Task_Ds18b20+0xae>
  }
	for(;;)
	{
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 800269c:	bf00      	nop
		{
			if(Ds18b20StartConvert==1)
				break;
			Ds18b20Delay(10);
		}
		Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <Task_Ds18b20+0x1d0>)
 80026a0:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80026a4:	801a      	strh	r2, [r3, #0]
		DS18B20_StartAll(&OneWire);
 80026a6:	4831      	ldr	r0, [pc, #196]	; (800276c <Task_Ds18b20+0x1bc>)
 80026a8:	f000 f86e 	bl	8002788 <DS18B20_StartAll>
		osDelay(100);
 80026ac:	2064      	movs	r0, #100	; 0x64
 80026ae:	f004 fbbb 	bl	8006e28 <osDelay>
    while (!DS18B20_AllDone(&OneWire))
 80026b2:	e00c      	b.n	80026ce <Task_Ds18b20+0x11e>
		{
			osDelay(10);
 80026b4:	200a      	movs	r0, #10
 80026b6:	f004 fbb7 	bl	8006e28 <osDelay>
			Ds18b20Timeout-=1;
 80026ba:	4b31      	ldr	r3, [pc, #196]	; (8002780 <Task_Ds18b20+0x1d0>)
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	3b01      	subs	r3, #1
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <Task_Ds18b20+0x1d0>)
 80026c4:	801a      	strh	r2, [r3, #0]
			if(Ds18b20Timeout==0)
 80026c6:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <Task_Ds18b20+0x1d0>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d006      	beq.n	80026dc <Task_Ds18b20+0x12c>
    while (!DS18B20_AllDone(&OneWire))
 80026ce:	4827      	ldr	r0, [pc, #156]	; (800276c <Task_Ds18b20+0x1bc>)
 80026d0:	f000 fa62 	bl	8002b98 <DS18B20_AllDone>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0ec      	beq.n	80026b4 <Task_Ds18b20+0x104>
 80026da:	e000      	b.n	80026de <Task_Ds18b20+0x12e>
				break;
 80026dc:	bf00      	nop
		}
		if(Ds18b20Timeout>0)
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <Task_Ds18b20+0x1d0>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d025      	beq.n	8002732 <Task_Ds18b20+0x182>
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	737b      	strb	r3, [r7, #13]
 80026ea:	e01c      	b.n	8002726 <Task_Ds18b20+0x176>
			{
				Ds18b20Delay(1000);
 80026ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026f0:	f004 fb9a 	bl	8006e28 <osDelay>
				ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 80026f4:	7b7b      	ldrb	r3, [r7, #13]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <Task_Ds18b20+0x1c8>)
 80026fa:	1899      	adds	r1, r3, r2
 80026fc:	7b7b      	ldrb	r3, [r7, #13]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	3308      	adds	r3, #8
 8002702:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <Task_Ds18b20+0x1c8>)
 8002704:	4413      	add	r3, r2
 8002706:	7b7c      	ldrb	r4, [r7, #13]
 8002708:	461a      	mov	r2, r3
 800270a:	4818      	ldr	r0, [pc, #96]	; (800276c <Task_Ds18b20+0x1bc>)
 800270c:	f000 f850 	bl	80027b0 <DS18B20_Read>
 8002710:	4603      	mov	r3, r0
 8002712:	4619      	mov	r1, r3
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <Task_Ds18b20+0x1c8>)
 8002716:	0123      	lsls	r3, r4, #4
 8002718:	4413      	add	r3, r2
 800271a:	330c      	adds	r3, #12
 800271c:	460a      	mov	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8002720:	7b7b      	ldrb	r3, [r7, #13]
 8002722:	3301      	adds	r3, #1
 8002724:	737b      	strb	r3, [r7, #13]
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <Task_Ds18b20+0x1c0>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	7b7a      	ldrb	r2, [r7, #13]
 800272c:	429a      	cmp	r2, r3
 800272e:	d3dd      	bcc.n	80026ec <Task_Ds18b20+0x13c>
 8002730:	e011      	b.n	8002756 <Task_Ds18b20+0x1a6>
			}
		}
		else
		{
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8002732:	2300      	movs	r3, #0
 8002734:	733b      	strb	r3, [r7, #12]
 8002736:	e009      	b.n	800274c <Task_Ds18b20+0x19c>
				ds18b20[i].DataIsValid = false;
 8002738:	7b3b      	ldrb	r3, [r7, #12]
 800273a:	4a0f      	ldr	r2, [pc, #60]	; (8002778 <Task_Ds18b20+0x1c8>)
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	330c      	adds	r3, #12
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < TempSensorCount; i++)
 8002746:	7b3b      	ldrb	r3, [r7, #12]
 8002748:	3301      	adds	r3, #1
 800274a:	733b      	strb	r3, [r7, #12]
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <Task_Ds18b20+0x1c0>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	7b3a      	ldrb	r2, [r7, #12]
 8002752:	429a      	cmp	r2, r3
 8002754:	d3f0      	bcc.n	8002738 <Task_Ds18b20+0x188>
		}
		Ds18b20StartConvert=0;
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <Task_Ds18b20+0x1d4>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
    osDelay(_DS18B20_UPDATE_INTERVAL_MS);
 800275c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002760:	f004 fb62 	bl	8006e28 <osDelay>
		while(_DS18B20_UPDATE_INTERVAL_MS==0)
 8002764:	e79a      	b.n	800269c <Task_Ds18b20+0xec>
 8002766:	bf00      	nop
 8002768:	40020c00 	.word	0x40020c00
 800276c:	20004d44 	.word	0x20004d44
 8002770:	200000a4 	.word	0x200000a4
 8002774:	20004d2c 	.word	0x20004d2c
 8002778:	20004d30 	.word	0x20004d30
 800277c:	20004d40 	.word	0x20004d40
 8002780:	200000a6 	.word	0x200000a6
 8002784:	200000a5 	.word	0x200000a5

08002788 <DS18B20_StartAll>:

	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 faa7 	bl	8002ce4 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8002796:	21cc      	movs	r1, #204	; 0xcc
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fb29 	bl	8002df0 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 800279e:	2144      	movs	r1, #68	; 0x44
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fb25 	bl	8002df0 <OneWire_WriteByte>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b08b      	sub	sp, #44	; 0x2c
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	float decimal;
	uint8_t i = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;

	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 80027c6:	68b8      	ldr	r0, [r7, #8]
 80027c8:	f000 f97a 	bl	8002ac0 <DS18B20_Is>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <DS18B20_Read+0x26>
		return false;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e0e1      	b.n	800299a <DS18B20_Read+0x1ea>
	}

	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire))
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fae0 	bl	8002d9c <OneWire_ReadBit>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e0d9      	b.n	800299a <DS18B20_Read+0x1ea>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fa7c 	bl	8002ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 fc33 	bl	800305a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80027f4:	21be      	movs	r1, #190	; 0xbe
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fafa 	bl	8002df0 <OneWire_WriteByte>

	/* Get data */
	for (i = 0; i < 9; i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e00d      	b.n	800281e <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8002802:	7ffc      	ldrb	r4, [r7, #31]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 fb11 	bl	8002e2c <OneWire_ReadByte>
 800280a:	4603      	mov	r3, r0
 800280c:	461a      	mov	r2, r3
 800280e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002812:	4423      	add	r3, r4
 8002814:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++)
 8002818:	7ffb      	ldrb	r3, [r7, #31]
 800281a:	3301      	adds	r3, #1
 800281c:	77fb      	strb	r3, [r7, #31]
 800281e:	7ffb      	ldrb	r3, [r7, #31]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d9ee      	bls.n	8002802 <DS18B20_Read+0x52>
	}

	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2108      	movs	r1, #8
 800282a:	4618      	mov	r0, r3
 800282c:	f000 fc51 	bl	80030d2 <OneWire_CRC8>
 8002830:	4603      	mov	r3, r0
 8002832:	77bb      	strb	r3, [r7, #30]

	/* Check if CRC is ok */
	if (crc != data[8])
 8002834:	7f3b      	ldrb	r3, [r7, #28]
 8002836:	7fba      	ldrb	r2, [r7, #30]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 800283c:	2300      	movs	r3, #0
 800283e:	e0ac      	b.n	800299a <DS18B20_Read+0x1ea>


	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 8002840:	7d3b      	ldrb	r3, [r7, #20]
 8002842:	b21a      	sxth	r2, r3
 8002844:	7d7b      	ldrb	r3, [r7, #21]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	b21b      	sxth	r3, r3
 800284a:	4313      	orrs	r3, r2
 800284c:	b21b      	sxth	r3, r3
 800284e:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fa47 	bl	8002ce4 <OneWire_Reset>

	/* Check if temperature is negative */
	if (temperature & 0x8000)
 8002856:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800285a:	2b00      	cmp	r3, #0
 800285c:	da05      	bge.n	800286a <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 800285e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002860:	425b      	negs	r3, r3
 8002862:	84fb      	strh	r3, [r7, #38]	; 0x26
		minus = 1;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	}


	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 800286a:	7e3b      	ldrb	r3, [r7, #24]
 800286c:	115b      	asrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	b2db      	uxtb	r3, r3
 8002876:	3309      	adds	r3, #9
 8002878:	777b      	strb	r3, [r7, #29]


	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 800287a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	b29b      	uxth	r3, r3
 8002880:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8002884:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	b29b      	uxth	r3, r3
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	b25b      	sxtb	r3, r3
 800288e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002892:	b25a      	sxtb	r2, r3
 8002894:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002898:	4313      	orrs	r3, r2
 800289a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	/* Store decimal digits */
	switch (resolution)
 800289e:	7f7b      	ldrb	r3, [r7, #29]
 80028a0:	3b09      	subs	r3, #9
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d858      	bhi.n	8002958 <DS18B20_Read+0x1a8>
 80028a6:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <DS18B20_Read+0xfc>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	080028e5 	.word	0x080028e5
 80028b4:	0800290d 	.word	0x0800290d
 80028b8:	08002935 	.word	0x08002935
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 80028bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028be:	08db      	lsrs	r3, r3, #3
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ce:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 80028d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80028d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028de:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 80028e2:	e03e      	b.n	8002962 <DS18B20_Read+0x1b2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 80028e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80028e6:	089b      	lsrs	r3, r3, #2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	ee07 3a90 	vmov	s15, r3
 80028f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f6:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 80028fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80028fe:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002906:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 800290a:	e02a      	b.n	8002962 <DS18B20_Read+0x1b2>
		case 11:
			decimal = (temperature >> 1) & 0x07;
 800290c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	b29b      	uxth	r3, r3
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 8002922:	edd7 7a08 	vldr	s15, [r7, #32]
 8002926:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800292a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800292e:	edc7 7a08 	vstr	s15, [r7, #32]
		break;
 8002932:	e016      	b.n	8002962 <DS18B20_Read+0x1b2>
		case 12:
			decimal = temperature & 0x0F;
 8002934:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002942:	edc7 7a08 	vstr	s15, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 8002946:	edd7 7a08 	vldr	s15, [r7, #32]
 800294a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80029a4 <DS18B20_Read+0x1f4>
 800294e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002952:	edc7 7a08 	vstr	s15, [r7, #32]
		 break;
 8002956:	e004      	b.n	8002962 <DS18B20_Read+0x1b2>
		default:
			decimal = 0xFF;
 8002958:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <DS18B20_Read+0x1f8>)
 800295a:	623b      	str	r3, [r7, #32]
			digit = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	/* Check for negative part */
	decimal = digit + decimal;
 8002962:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8002966:	ee07 3a90 	vmov	s15, r3
 800296a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002976:	edc7 7a08 	vstr	s15, [r7, #32]
	if (minus)
 800297a:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <DS18B20_Read+0x1e2>
		decimal = 0 - decimal;
 8002982:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80029ac <DS18B20_Read+0x1fc>
 8002986:	edd7 7a08 	vldr	s15, [r7, #32]
 800298a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800298e:	edc7 7a08 	vstr	s15, [r7, #32]


	/* Set to pointer */
	*destination = decimal;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	601a      	str	r2, [r3, #0]

	/* Return 1, temperature valid */
	return true;
 8002998:	2301      	movs	r3, #1
}
 800299a:	4618      	mov	r0, r3
 800299c:	372c      	adds	r7, #44	; 0x2c
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	bf00      	nop
 80029a4:	3d800000 	.word	0x3d800000
 80029a8:	437f0000 	.word	0x437f0000
 80029ac:	00000000 	.word	0x00000000

080029b0 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	4613      	mov	r3, r2
 80029bc:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM))
 80029be:	68b8      	ldr	r0, [r7, #8]
 80029c0:	f000 f87e 	bl	8002ac0 <DS18B20_Is>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <DS18B20_SetResolution+0x1e>
		return 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e074      	b.n	8002ab8 <DS18B20_SetResolution+0x108>


	/* Reset line */
	OneWire_Reset(OneWire);
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f988 	bl	8002ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fb3f 	bl	800305a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80029dc:	21be      	movs	r1, #190	; 0xbe
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fa06 	bl	8002df0 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 fa21 	bl	8002e2c <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa1e 	bl	8002e2c <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fa1b 	bl	8002e2c <OneWire_ReadByte>
 80029f6:	4603      	mov	r3, r0
 80029f8:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fa16 	bl	8002e2c <OneWire_ReadByte>
 8002a00:	4603      	mov	r3, r0
 8002a02:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fa11 	bl	8002e2c <OneWire_ReadByte>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	75fb      	strb	r3, [r7, #23]

	if (resolution == DS18B20_Resolution_9bits)
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	d108      	bne.n	8002a26 <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a1a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002a1c:	7dfb      	ldrb	r3, [r7, #23]
 8002a1e:	f023 0320 	bic.w	r3, r3, #32
 8002a22:	75fb      	strb	r3, [r7, #23]
 8002a24:	e022      	b.n	8002a6c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2b0a      	cmp	r3, #10
 8002a2a:	d108      	bne.n	8002a3e <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002a2c:	7dfb      	ldrb	r3, [r7, #23]
 8002a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a32:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
 8002a36:	f043 0320 	orr.w	r3, r3, #32
 8002a3a:	75fb      	strb	r3, [r7, #23]
 8002a3c:	e016      	b.n	8002a6c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b0b      	cmp	r3, #11
 8002a42:	d108      	bne.n	8002a56 <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a4a:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	f023 0320 	bic.w	r3, r3, #32
 8002a52:	75fb      	strb	r3, [r7, #23]
 8002a54:	e00a      	b.n	8002a6c <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002a56:	79fb      	ldrb	r3, [r7, #7]
 8002a58:	2b0c      	cmp	r3, #12
 8002a5a:	d107      	bne.n	8002a6c <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a62:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002a64:	7dfb      	ldrb	r3, [r7, #23]
 8002a66:	f043 0320 	orr.w	r3, r3, #32
 8002a6a:	75fb      	strb	r3, [r7, #23]
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f939 	bl	8002ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002a72:	68b9      	ldr	r1, [r7, #8]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 faf0 	bl	800305a <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002a7a:	214e      	movs	r1, #78	; 0x4e
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f9b7 	bl	8002df0 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002a82:	7dbb      	ldrb	r3, [r7, #22]
 8002a84:	4619      	mov	r1, r3
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f9b2 	bl	8002df0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002a8c:	7d7b      	ldrb	r3, [r7, #21]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 f9ad 	bl	8002df0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002a96:	7dfb      	ldrb	r3, [r7, #23]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f000 f9a8 	bl	8002df0 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f91f 	bl	8002ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002aa6:	68b9      	ldr	r1, [r7, #8]
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fad6 	bl	800305a <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002aae:	2148      	movs	r1, #72	; 0x48
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f99d 	bl	8002df0 <OneWire_WriteByte>

	return 1;
 8002ab6:	2301      	movs	r3, #1
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b28      	cmp	r3, #40	; 0x28
 8002ace:	d101      	bne.n	8002ad4 <DS18B20_Is+0x14>
		return 1;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <DS18B20_Is+0x16>

	return 0;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <DS18B20_DisableAlarmTemperature>:

	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM))
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	f7ff ffe7 	bl	8002ac0 <DS18B20_Is>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e049      	b.n	8002b90 <DS18B20_DisableAlarmTemperature+0xae>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8f1 	bl	8002ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 faa8 	bl	800305a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002b0a:	21be      	movs	r1, #190	; 0xbe
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f96f 	bl	8002df0 <OneWire_WriteByte>

	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f98a 	bl	8002e2c <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f987 	bl	8002e2c <OneWire_ReadByte>

	th = OneWire_ReadByte(OneWire);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f984 	bl	8002e2c <OneWire_ReadByte>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f97f 	bl	8002e2c <OneWire_ReadByte>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f97a 	bl	8002e2c <OneWire_ReadByte>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	737b      	strb	r3, [r7, #13]

	th = 125;
 8002b3c:	237d      	movs	r3, #125	; 0x7d
 8002b3e:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8002b40:	23c9      	movs	r3, #201	; 0xc9
 8002b42:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f8cd 	bl	8002ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa84 	bl	800305a <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002b52:	214e      	movs	r1, #78	; 0x4e
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f94b 	bl	8002df0 <OneWire_WriteByte>

	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f946 	bl	8002df0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8002b64:	7bbb      	ldrb	r3, [r7, #14]
 8002b66:	4619      	mov	r1, r3
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f941 	bl	8002df0 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8002b6e:	7b7b      	ldrb	r3, [r7, #13]
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f93c 	bl	8002df0 <OneWire_WriteByte>

	/* Reset line */
	OneWire_Reset(OneWire);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8b3 	bl	8002ce4 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fa6a 	bl	800305a <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002b86:	2148      	movs	r1, #72	; 0x48
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f931 	bl	8002df0 <OneWire_WriteByte>

	return 1;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f8fb 	bl	8002d9c <OneWire_ReadBit>
 8002ba6:	4603      	mov	r3, r0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <ONEWIRE_DELAY>:
#include "stm32f4xx_hal.h"

extern TIM_HandleTypeDef htim5;

void ONEWIRE_DELAY(uint16_t time_us)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
	htim5.Instance->CNT = 0;
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <ONEWIRE_DELAY+0x30>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
	while(htim5.Instance->CNT <= time_us);
 8002bc2:	bf00      	nop
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <ONEWIRE_DELAY+0x30>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bca:	88fb      	ldrh	r3, [r7, #6]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d9f9      	bls.n	8002bc4 <ONEWIRE_DELAY+0x14>
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20004ab8 	.word	0x20004ab8

08002be4 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	889b      	ldrh	r3, [r3, #4]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	619a      	str	r2, [r3, #24]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	889a      	ldrh	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	619a      	str	r2, [r3, #24]
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b088      	sub	sp, #32
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c32:	2302      	movs	r3, #2
 8002c34:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	889b      	ldrh	r3, [r3, #4]
 8002c3a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f107 020c 	add.w	r2, r7, #12
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 ff34 	bl	8003ab4 <HAL_GPIO_Init>
}
 8002c4c:	bf00      	nop
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8002c5c:	2311      	movs	r3, #17
 8002c5e:	613b      	str	r3, [r7, #16]
	gpinit.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c64:	2302      	movs	r3, #2
 8002c66:	61bb      	str	r3, [r7, #24]
	gpinit.Pin = gp->GPIO_Pin;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	889b      	ldrh	r3, [r3, #4]
 8002c6c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f107 020c 	add.w	r2, r7, #12
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 ff1b 	bl	8003ab4 <HAL_GPIO_Init>

}
 8002c7e:	bf00      	nop
 8002c80:	3720      	adds	r7, #32
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	4613      	mov	r3, r2
 8002c94:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&htim5);
 8002c96:	4812      	ldr	r0, [pc, #72]	; (8002ce0 <OneWire_Init+0x58>)
 8002c98:	f002 fc94 	bl	80055c4 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff ffd3 	bl	8002c54 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff ffa8 	bl	8002c04 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8002cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb8:	f000 fa86 	bl	80031c8 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f7ff ff91 	bl	8002be4 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8002cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cc6:	f000 fa7f 	bl	80031c8 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f7ff ff9a 	bl	8002c04 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8002cd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cd4:	f000 fa78 	bl	80031c8 <HAL_Delay>
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20004ab8 	.word	0x20004ab8

08002ce4 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	uint8_t i;

	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f7ff ff79 	bl	8002be4 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ffae 	bl	8002c54 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8002cf8:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002cfc:	f7ff ff58 	bl	8002bb0 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8002d00:	2014      	movs	r0, #20
 8002d02:	f7ff ff55 	bl	8002bb0 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ff8b 	bl	8002c22 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8002d0c:	2046      	movs	r0, #70	; 0x46
 8002d0e:	f7ff ff4f 	bl	8002bb0 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	889b      	ldrh	r3, [r3, #4]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f001 f865 	bl	8003dec <HAL_GPIO_ReadPin>
 8002d22:	4603      	mov	r3, r0
 8002d24:	73fb      	strb	r3, [r7, #15]

	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8002d26:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8002d2a:	f7ff ff41 	bl	8002bb0 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
	if (bit)
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d012      	beq.n	8002d70 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f7ff ff4a 	bl	8002be4 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f7ff ff7f 	bl	8002c54 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8002d56:	200a      	movs	r0, #10
 8002d58:	f7ff ff2a 	bl	8002bb0 <ONEWIRE_DELAY>

		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff60 	bl	8002c22 <ONEWIRE_INPUT>

		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8002d62:	2037      	movs	r0, #55	; 0x37
 8002d64:	f7ff ff24 	bl	8002bb0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ff5a 	bl	8002c22 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8002d6e:	e011      	b.n	8002d94 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff37 	bl	8002be4 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff ff6c 	bl	8002c54 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8002d7c:	2041      	movs	r0, #65	; 0x41
 8002d7e:	f7ff ff17 	bl	8002bb0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f7ff ff4d 	bl	8002c22 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8002d88:	2005      	movs	r0, #5
 8002d8a:	f7ff ff11 	bl	8002bb0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f7ff ff47 	bl	8002c22 <ONEWIRE_INPUT>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]

	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff ff1b 	bl	8002be4 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff ff50 	bl	8002c54 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8002db4:	2002      	movs	r0, #2
 8002db6:	f7ff fefb 	bl	8002bb0 <ONEWIRE_DELAY>

	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7ff ff31 	bl	8002c22 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8002dc0:	200a      	movs	r0, #10
 8002dc2:	f7ff fef5 	bl	8002bb0 <ONEWIRE_DELAY>

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	889b      	ldrh	r3, [r3, #4]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f001 f80b 	bl	8003dec <HAL_GPIO_ReadPin>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
	}

	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8002de0:	2032      	movs	r0, #50	; 0x32
 8002de2:	f7ff fee5 	bl	8002bb0 <ONEWIRE_DELAY>

	/* Return bit value */
	return bit;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8002e00:	e00a      	b.n	8002e18 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff93 	bl	8002d38 <OneWire_WriteBit>
		byte >>= 1;
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	085b      	lsrs	r3, r3, #1
 8002e16:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	1e5a      	subs	r2, r3, #1
 8002e1c:	73fa      	strb	r2, [r7, #15]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ef      	bne.n	8002e02 <OneWire_WriteByte+0x12>
	}
}
 8002e22:	bf00      	nop
 8002e24:	bf00      	nop
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8002e34:	2308      	movs	r3, #8
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8002e3c:	e00d      	b.n	8002e5a <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8002e3e:	7bbb      	ldrb	r3, [r7, #14]
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ffa9 	bl	8002d9c <OneWire_ReadBit>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	01db      	lsls	r3, r3, #7
 8002e4e:	b25a      	sxtb	r2, r3
 8002e50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	b25b      	sxtb	r3, r3
 8002e58:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	1e5a      	subs	r2, r3, #1
 8002e5e:	73fa      	strb	r2, [r7, #15]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ec      	bne.n	8002e3e <OneWire_ReadByte+0x12>
	}

	return byte;
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 f816 	bl	8002ea8 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002e7c:	21f0      	movs	r1, #240	; 0xf0
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f825 	bl	8002ece <OneWire_Search>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8002e96:	21f0      	movs	r1, #240	; 0xf0
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f818 	bl	8002ece <OneWire_Search>
 8002e9e:	4603      	mov	r3, r0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	71da      	strb	r2, [r3, #7]
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7a1b      	ldrb	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f040 809a 	bne.w	800302c <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct))
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff fef3 	bl	8002ce4 <OneWire_Reset>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	71da      	strb	r2, [r3, #7]
			return 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	e09b      	b.n	8003052 <OneWire_Search+0x184>
		}

		// issue the search command
		OneWire_WriteByte(OneWireStruct, command);
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7ff ff66 	bl	8002df0 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff39 	bl	8002d9c <OneWire_ReadBit>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ff34 	bl	8002d9c <OneWire_ReadBit>
 8002f34:	4603      	mov	r3, r0
 8002f36:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8002f38:	7a7b      	ldrb	r3, [r7, #9]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d102      	bne.n	8002f44 <OneWire_Search+0x76>
 8002f3e:	7a3b      	ldrb	r3, [r7, #8]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d064      	beq.n	800300e <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8002f44:	7a7a      	ldrb	r2, [r7, #9]
 8002f46:	7a3b      	ldrb	r3, [r7, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d002      	beq.n	8002f52 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8002f4c:	7a7b      	ldrb	r3, [r7, #9]
 8002f4e:	72bb      	strb	r3, [r7, #10]
 8002f50:	e026      	b.n	8002fa0 <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	799b      	ldrb	r3, [r3, #6]
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d20d      	bcs.n	8002f78 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8002f5c:	7b7b      	ldrb	r3, [r7, #13]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	7a5a      	ldrb	r2, [r3, #9]
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	4013      	ands	r3, r2
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf14      	ite	ne
 8002f6e:	2301      	movne	r3, #1
 8002f70:	2300      	moveq	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	72bb      	strb	r3, [r7, #10]
 8002f76:	e008      	b.n	8002f8a <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	799b      	ldrb	r3, [r3, #6]
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	bf0c      	ite	eq
 8002f82:	2301      	moveq	r3, #1
 8002f84:	2300      	movne	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	72bb      	strb	r3, [r7, #10]
					}

					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8002f8a:	7abb      	ldrb	r3, [r7, #10]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d107      	bne.n	8002fa0 <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d802      	bhi.n	8002fa0 <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7bba      	ldrb	r2, [r7, #14]
 8002f9e:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8002fa0:	7abb      	ldrb	r3, [r7, #10]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10c      	bne.n	8002fc0 <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8002fa6:	7b7b      	ldrb	r3, [r7, #13]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	7a59      	ldrb	r1, [r3, #9]
 8002fae:	7b7b      	ldrb	r3, [r7, #13]
 8002fb0:	7afa      	ldrb	r2, [r7, #11]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	b2d1      	uxtb	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	460a      	mov	r2, r1
 8002fbc:	725a      	strb	r2, [r3, #9]
 8002fbe:	e010      	b.n	8002fe2 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002fc0:	7b7b      	ldrb	r3, [r7, #13]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	7a5b      	ldrb	r3, [r3, #9]
 8002fc8:	b25a      	sxtb	r2, r3
 8002fca:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	b25b      	sxtb	r3, r3
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b25a      	sxtb	r2, r3
 8002fd6:	7b7b      	ldrb	r3, [r7, #13]
 8002fd8:	b2d1      	uxtb	r1, r2
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4413      	add	r3, r2
 8002fde:	460a      	mov	r2, r1
 8002fe0:	725a      	strb	r2, [r3, #9]
				}

				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8002fe2:	7abb      	ldrb	r3, [r7, #10]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f7ff fea6 	bl	8002d38 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8002ffe:	7b7b      	ldrb	r3, [r7, #13]
 8003000:	3301      	adds	r3, #1
 8003002:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8003004:	2301      	movs	r3, #1
 8003006:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8003008:	7b7b      	ldrb	r3, [r7, #13]
 800300a:	2b07      	cmp	r3, #7
 800300c:	d98a      	bls.n	8002f24 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b40      	cmp	r3, #64	; 0x40
 8003012:	d90b      	bls.n	800302c <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7bba      	ldrb	r2, [r7, #14]
 8003018:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	799b      	ldrb	r3, [r3, #6]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8003028:	2301      	movs	r3, #1
 800302a:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 800302c:	7b3b      	ldrb	r3, [r7, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <OneWire_Search+0x16c>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7a5b      	ldrb	r3, [r3, #9]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8003050:	7b3b      	ldrb	r3, [r7, #12]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8003064:	2155      	movs	r1, #85	; 0x55
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7ff fec2 	bl	8002df0 <OneWire_WriteByte>

	for (i = 0; i < 8; i++) {
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	e00a      	b.n	8003088 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff feb7 	bl	8002df0 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	3301      	adds	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b07      	cmp	r3, #7
 800308c:	d9f1      	bls.n	8003072 <OneWire_SelectWithPointer+0x18>
	}
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e00a      	b.n	80030be <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	6839      	ldr	r1, [r7, #0]
 80030ae:	440b      	add	r3, r1
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	440a      	add	r2, r1
 80030b4:	7a52      	ldrb	r2, [r2, #9]
 80030b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	3301      	adds	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b07      	cmp	r3, #7
 80030c2:	d9f1      	bls.n	80030a8 <OneWire_GetFullROM+0x10>
	}
}
 80030c4:	bf00      	nop
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	460b      	mov	r3, r1
 80030dc:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]

	while (len--) {
 80030e2:	e022      	b.n	800312a <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80030ee:	2308      	movs	r3, #8
 80030f0:	737b      	strb	r3, [r7, #13]
 80030f2:	e017      	b.n	8003124 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	7bbb      	ldrb	r3, [r7, #14]
 80030f8:	4053      	eors	r3, r2
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	085b      	lsrs	r3, r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8003108:	7b3b      	ldrb	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d004      	beq.n	8003118 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003114:	43db      	mvns	r3, r3
 8003116:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8003118:	7bbb      	ldrb	r3, [r7, #14]
 800311a:	085b      	lsrs	r3, r3, #1
 800311c:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800311e:	7b7b      	ldrb	r3, [r7, #13]
 8003120:	3b01      	subs	r3, #1
 8003122:	737b      	strb	r3, [r7, #13]
 8003124:	7b7b      	ldrb	r3, [r7, #13]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1e4      	bne.n	80030f4 <OneWire_CRC8+0x22>
	while (len--) {
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	1e5a      	subs	r2, r3, #1
 800312e:	70fa      	strb	r2, [r7, #3]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1d7      	bne.n	80030e4 <OneWire_CRC8+0x12>
		}
	}

	/* Return calculated CRC */
	return crc;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <HAL_Init+0x40>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <HAL_Init+0x40>)
 800314e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_Init+0x40>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <HAL_Init+0x40>)
 800315a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800315e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003160:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_Init+0x40>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a07      	ldr	r2, [pc, #28]	; (8003184 <HAL_Init+0x40>)
 8003166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800316c:	2003      	movs	r0, #3
 800316e:	f000 f8fc 	bl	800336a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003172:	2000      	movs	r0, #0
 8003174:	f7fe fb44 	bl	8001800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003178:	f7fe f8a0 	bl	80012bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023c00 	.word	0x40023c00

08003188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800318c:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_IncTick+0x20>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_IncTick+0x24>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4413      	add	r3, r2
 8003198:	4a04      	ldr	r2, [pc, #16]	; (80031ac <HAL_IncTick+0x24>)
 800319a:	6013      	str	r3, [r2, #0]
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000018 	.word	0x20000018
 80031ac:	20004d58 	.word	0x20004d58

080031b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return uwTick;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_GetTick+0x14>)
 80031b6:	681b      	ldr	r3, [r3, #0]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	20004d58 	.word	0x20004d58

080031c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff ffee 	bl	80031b0 <HAL_GetTick>
 80031d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e0:	d005      	beq.n	80031ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031e2:	4b0a      	ldr	r3, [pc, #40]	; (800320c <HAL_Delay+0x44>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4413      	add	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ee:	bf00      	nop
 80031f0:	f7ff ffde 	bl	80031b0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d8f7      	bhi.n	80031f0 <HAL_Delay+0x28>
  {
  }
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	20000018 	.word	0x20000018

08003210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003220:	4b0c      	ldr	r3, [pc, #48]	; (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800322c:	4013      	ands	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800323c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003242:	4a04      	ldr	r2, [pc, #16]	; (8003254 <__NVIC_SetPriorityGrouping+0x44>)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	60d3      	str	r3, [r2, #12]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000ed00 	.word	0xe000ed00

08003258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <__NVIC_GetPriorityGrouping+0x18>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	f003 0307 	and.w	r3, r3, #7
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003282:	2b00      	cmp	r3, #0
 8003284:	db0b      	blt.n	800329e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 021f 	and.w	r2, r3, #31
 800328c:	4907      	ldr	r1, [pc, #28]	; (80032ac <__NVIC_EnableIRQ+0x38>)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2001      	movs	r0, #1
 8003296:	fa00 f202 	lsl.w	r2, r0, r2
 800329a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	e000e100 	.word	0xe000e100

080032b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db0a      	blt.n	80032da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	490c      	ldr	r1, [pc, #48]	; (80032fc <__NVIC_SetPriority+0x4c>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	0112      	lsls	r2, r2, #4
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	440b      	add	r3, r1
 80032d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d8:	e00a      	b.n	80032f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	4908      	ldr	r1, [pc, #32]	; (8003300 <__NVIC_SetPriority+0x50>)
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	3b04      	subs	r3, #4
 80032e8:	0112      	lsls	r2, r2, #4
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	440b      	add	r3, r1
 80032ee:	761a      	strb	r2, [r3, #24]
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f1c3 0307 	rsb	r3, r3, #7
 800331e:	2b04      	cmp	r3, #4
 8003320:	bf28      	it	cs
 8003322:	2304      	movcs	r3, #4
 8003324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3304      	adds	r3, #4
 800332a:	2b06      	cmp	r3, #6
 800332c:	d902      	bls.n	8003334 <NVIC_EncodePriority+0x30>
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3b03      	subs	r3, #3
 8003332:	e000      	b.n	8003336 <NVIC_EncodePriority+0x32>
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	401a      	ands	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800334c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	fa01 f303 	lsl.w	r3, r1, r3
 8003356:	43d9      	mvns	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800335c:	4313      	orrs	r3, r2
         );
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	; 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ff4c 	bl	8003210 <__NVIC_SetPriorityGrouping>
}
 8003378:	bf00      	nop
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
 800338c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003392:	f7ff ff61 	bl	8003258 <__NVIC_GetPriorityGrouping>
 8003396:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	6978      	ldr	r0, [r7, #20]
 800339e:	f7ff ffb1 	bl	8003304 <NVIC_EncodePriority>
 80033a2:	4602      	mov	r2, r0
 80033a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff ff80 	bl	80032b0 <__NVIC_SetPriority>
}
 80033b0:	bf00      	nop
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff ff54 	bl	8003274 <__NVIC_EnableIRQ>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff fee6 	bl	80031b0 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e099      	b.n	8003524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003410:	e00f      	b.n	8003432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003412:	f7ff fecd 	bl	80031b0 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b05      	cmp	r3, #5
 800341e:	d908      	bls.n	8003432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e078      	b.n	8003524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e8      	bne.n	8003412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4b38      	ldr	r3, [pc, #224]	; (800352c <HAL_DMA_Init+0x158>)
 800344c:	4013      	ands	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b04      	cmp	r3, #4
 800348a:	d107      	bne.n	800349c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	4313      	orrs	r3, r2
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 0307 	bic.w	r3, r3, #7
 80034b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d117      	bne.n	80034f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fa6f 	bl	80039bc <DMA_CheckFifoParam>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2240      	movs	r2, #64	; 0x40
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034f2:	2301      	movs	r3, #1
 80034f4:	e016      	b.n	8003524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa26 	bl	8003950 <DMA_CalcBaseAndBitshift>
 8003504:	4603      	mov	r3, r0
 8003506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	223f      	movs	r2, #63	; 0x3f
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	f010803f 	.word	0xf010803f

08003530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_DMA_Start_IT+0x26>
 8003552:	2302      	movs	r3, #2
 8003554:	e040      	b.n	80035d8 <HAL_DMA_Start_IT+0xa8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d12f      	bne.n	80035ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f9b8 	bl	80038f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0216 	orr.w	r2, r2, #22
 800359e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e005      	b.n	80035d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035ec:	4b92      	ldr	r3, [pc, #584]	; (8003838 <HAL_DMA_IRQHandler+0x258>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a92      	ldr	r2, [pc, #584]	; (800383c <HAL_DMA_IRQHandler+0x25c>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a9b      	lsrs	r3, r3, #10
 80035f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800360a:	2208      	movs	r2, #8
 800360c:	409a      	lsls	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d01a      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d013      	beq.n	800364c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0204 	bic.w	r2, r2, #4
 8003632:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003638:	2208      	movs	r2, #8
 800363a:	409a      	lsls	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366e:	2201      	movs	r2, #1
 8003670:	409a      	lsls	r2, r3
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	f043 0202 	orr.w	r2, r3, #2
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	2204      	movs	r2, #4
 8003688:	409a      	lsls	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	2204      	movs	r2, #4
 80036a6:	409a      	lsls	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f043 0204 	orr.w	r2, r3, #4
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	2210      	movs	r2, #16
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d043      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d03c      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036da:	2210      	movs	r2, #16
 80036dc:	409a      	lsls	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d018      	beq.n	8003722 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d108      	bne.n	8003710 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d024      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	4798      	blx	r3
 800370e:	e01f      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003714:	2b00      	cmp	r3, #0
 8003716:	d01b      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	4798      	blx	r3
 8003720:	e016      	b.n	8003750 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372c:	2b00      	cmp	r3, #0
 800372e:	d107      	bne.n	8003740 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0208 	bic.w	r2, r2, #8
 800373e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003754:	2220      	movs	r2, #32
 8003756:	409a      	lsls	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 808e 	beq.w	800387e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 8086 	beq.w	800387e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003776:	2220      	movs	r2, #32
 8003778:	409a      	lsls	r2, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b05      	cmp	r3, #5
 8003788:	d136      	bne.n	80037f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0216 	bic.w	r2, r2, #22
 8003798:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <HAL_DMA_IRQHandler+0x1da>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0208 	bic.w	r2, r2, #8
 80037c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ce:	223f      	movs	r2, #63	; 0x3f
 80037d0:	409a      	lsls	r2, r3
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d07d      	beq.n	80038ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	4798      	blx	r3
        }
        return;
 80037f6:	e078      	b.n	80038ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d01c      	beq.n	8003840 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d108      	bne.n	8003826 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003818:	2b00      	cmp	r3, #0
 800381a:	d030      	beq.n	800387e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	4798      	blx	r3
 8003824:	e02b      	b.n	800387e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d027      	beq.n	800387e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	4798      	blx	r3
 8003836:	e022      	b.n	800387e <HAL_DMA_IRQHandler+0x29e>
 8003838:	20000000 	.word	0x20000000
 800383c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0210 	bic.w	r2, r2, #16
 800385c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	2b00      	cmp	r3, #0
 8003884:	d032      	beq.n	80038ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d022      	beq.n	80038d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2205      	movs	r2, #5
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 0201 	bic.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3301      	adds	r3, #1
 80038ae:	60bb      	str	r3, [r7, #8]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d307      	bcc.n	80038c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f2      	bne.n	80038aa <HAL_DMA_IRQHandler+0x2ca>
 80038c4:	e000      	b.n	80038c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
 80038e8:	e000      	b.n	80038ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80038ea:	bf00      	nop
    }
  }
}
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop

080038f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003910:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b40      	cmp	r3, #64	; 0x40
 8003920:	d108      	bne.n	8003934 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003932:	e007      	b.n	8003944 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	60da      	str	r2, [r3, #12]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	3b10      	subs	r3, #16
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <DMA_CalcBaseAndBitshift+0x64>)
 8003962:	fba2 2303 	umull	r2, r3, r2, r3
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800396a:	4a13      	ldr	r2, [pc, #76]	; (80039b8 <DMA_CalcBaseAndBitshift+0x68>)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b03      	cmp	r3, #3
 800397c:	d909      	bls.n	8003992 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003986:	f023 0303 	bic.w	r3, r3, #3
 800398a:	1d1a      	adds	r2, r3, #4
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	659a      	str	r2, [r3, #88]	; 0x58
 8003990:	e007      	b.n	80039a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800399a:	f023 0303 	bic.w	r3, r3, #3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	aaaaaaab 	.word	0xaaaaaaab
 80039b8:	0800f888 	.word	0x0800f888

080039bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d11f      	bne.n	8003a16 <DMA_CheckFifoParam+0x5a>
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d856      	bhi.n	8003a8a <DMA_CheckFifoParam+0xce>
 80039dc:	a201      	add	r2, pc, #4	; (adr r2, 80039e4 <DMA_CheckFifoParam+0x28>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	080039f5 	.word	0x080039f5
 80039e8:	08003a07 	.word	0x08003a07
 80039ec:	080039f5 	.word	0x080039f5
 80039f0:	08003a8b 	.word	0x08003a8b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d046      	beq.n	8003a8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a04:	e043      	b.n	8003a8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a0e:	d140      	bne.n	8003a92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e03d      	b.n	8003a92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1e:	d121      	bne.n	8003a64 <DMA_CheckFifoParam+0xa8>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d837      	bhi.n	8003a96 <DMA_CheckFifoParam+0xda>
 8003a26:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <DMA_CheckFifoParam+0x70>)
 8003a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2c:	08003a3d 	.word	0x08003a3d
 8003a30:	08003a43 	.word	0x08003a43
 8003a34:	08003a3d 	.word	0x08003a3d
 8003a38:	08003a55 	.word	0x08003a55
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e030      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d025      	beq.n	8003a9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a52:	e022      	b.n	8003a9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5c:	d11f      	bne.n	8003a9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a62:	e01c      	b.n	8003a9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d903      	bls.n	8003a72 <DMA_CheckFifoParam+0xb6>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d003      	beq.n	8003a78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a70:	e018      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
      break;
 8003a76:	e015      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00e      	beq.n	8003aa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
      break;
 8003a88:	e00b      	b.n	8003aa2 <DMA_CheckFifoParam+0xe6>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e00a      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e008      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a92:	bf00      	nop
 8003a94:	e006      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e004      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e002      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a9e:	bf00      	nop
 8003aa0:	e000      	b.n	8003aa4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
    }
  } 
  
  return status; 
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop

08003ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b089      	sub	sp, #36	; 0x24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	e16b      	b.n	8003da8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	f040 815a 	bne.w	8003da2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d005      	beq.n	8003b06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d130      	bne.n	8003b68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	2203      	movs	r2, #3
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	69ba      	ldr	r2, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 0201 	and.w	r2, r3, #1
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d017      	beq.n	8003ba4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	2203      	movs	r2, #3
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d123      	bne.n	8003bf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	08da      	lsrs	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3208      	adds	r2, #8
 8003bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	220f      	movs	r2, #15
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	08da      	lsrs	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3208      	adds	r2, #8
 8003bf2:	69b9      	ldr	r1, [r7, #24]
 8003bf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	2203      	movs	r2, #3
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0203 	and.w	r2, r3, #3
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	005b      	lsls	r3, r3, #1
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 80b4 	beq.w	8003da2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	4b60      	ldr	r3, [pc, #384]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	4a5f      	ldr	r2, [pc, #380]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c48:	6453      	str	r3, [r2, #68]	; 0x44
 8003c4a:	4b5d      	ldr	r3, [pc, #372]	; (8003dc0 <HAL_GPIO_Init+0x30c>)
 8003c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c56:	4a5b      	ldr	r2, [pc, #364]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	3302      	adds	r3, #2
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4013      	ands	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a52      	ldr	r2, [pc, #328]	; (8003dc8 <HAL_GPIO_Init+0x314>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02b      	beq.n	8003cda <HAL_GPIO_Init+0x226>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a51      	ldr	r2, [pc, #324]	; (8003dcc <HAL_GPIO_Init+0x318>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d025      	beq.n	8003cd6 <HAL_GPIO_Init+0x222>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a50      	ldr	r2, [pc, #320]	; (8003dd0 <HAL_GPIO_Init+0x31c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01f      	beq.n	8003cd2 <HAL_GPIO_Init+0x21e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4f      	ldr	r2, [pc, #316]	; (8003dd4 <HAL_GPIO_Init+0x320>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d019      	beq.n	8003cce <HAL_GPIO_Init+0x21a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4e      	ldr	r2, [pc, #312]	; (8003dd8 <HAL_GPIO_Init+0x324>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_GPIO_Init+0x216>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4d      	ldr	r2, [pc, #308]	; (8003ddc <HAL_GPIO_Init+0x328>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_GPIO_Init+0x212>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4c      	ldr	r2, [pc, #304]	; (8003de0 <HAL_GPIO_Init+0x32c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <HAL_GPIO_Init+0x20e>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4b      	ldr	r2, [pc, #300]	; (8003de4 <HAL_GPIO_Init+0x330>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_GPIO_Init+0x20a>
 8003cba:	2307      	movs	r3, #7
 8003cbc:	e00e      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	e00c      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	e00a      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	e008      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e004      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_GPIO_Init+0x228>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	f002 0203 	and.w	r2, r2, #3
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	4093      	lsls	r3, r2
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cec:	4935      	ldr	r1, [pc, #212]	; (8003dc4 <HAL_GPIO_Init+0x310>)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4013      	ands	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d1e:	4a32      	ldr	r2, [pc, #200]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d24:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_GPIO_Init+0x334>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3301      	adds	r3, #1
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	f67f ae90 	bls.w	8003ad0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003db0:	bf00      	nop
 8003db2:	bf00      	nop
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40013800 	.word	0x40013800
 8003dc8:	40020000 	.word	0x40020000
 8003dcc:	40020400 	.word	0x40020400
 8003dd0:	40020800 	.word	0x40020800
 8003dd4:	40020c00 	.word	0x40020c00
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	40021400 	.word	0x40021400
 8003de0:	40021800 	.word	0x40021800
 8003de4:	40021c00 	.word	0x40021c00
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e001      	b.n	8003e0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	460b      	mov	r3, r1
 8003e26:	807b      	strh	r3, [r7, #2]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e2c:	787b      	ldrb	r3, [r7, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e32:	887a      	ldrh	r2, [r7, #2]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e38:	e003      	b.n	8003e42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e3a:	887b      	ldrh	r3, [r7, #2]
 8003e3c:	041a      	lsls	r2, r3, #16
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	619a      	str	r2, [r3, #24]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
	...

08003e50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e12b      	b.n	80040ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d106      	bne.n	8003e7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd fa4c 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2224      	movs	r2, #36	; 0x24
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ea2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003eb4:	f000 fd30 	bl	8004918 <HAL_RCC_GetPCLK1Freq>
 8003eb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a81      	ldr	r2, [pc, #516]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d807      	bhi.n	8003ed4 <HAL_I2C_Init+0x84>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4a80      	ldr	r2, [pc, #512]	; (80040c8 <HAL_I2C_Init+0x278>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	bf94      	ite	ls
 8003ecc:	2301      	movls	r3, #1
 8003ece:	2300      	movhi	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e006      	b.n	8003ee2 <HAL_I2C_Init+0x92>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a7d      	ldr	r2, [pc, #500]	; (80040cc <HAL_I2C_Init+0x27c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	bf94      	ite	ls
 8003edc:	2301      	movls	r3, #1
 8003ede:	2300      	movhi	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e0e7      	b.n	80040ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4a78      	ldr	r2, [pc, #480]	; (80040d0 <HAL_I2C_Init+0x280>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	0c9b      	lsrs	r3, r3, #18
 8003ef4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68ba      	ldr	r2, [r7, #8]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a6a      	ldr	r2, [pc, #424]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d802      	bhi.n	8003f24 <HAL_I2C_Init+0xd4>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	e009      	b.n	8003f38 <HAL_I2C_Init+0xe8>
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f2a:	fb02 f303 	mul.w	r3, r2, r3
 8003f2e:	4a69      	ldr	r2, [pc, #420]	; (80040d4 <HAL_I2C_Init+0x284>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	3301      	adds	r3, #1
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	495c      	ldr	r1, [pc, #368]	; (80040c4 <HAL_I2C_Init+0x274>)
 8003f54:	428b      	cmp	r3, r1
 8003f56:	d819      	bhi.n	8003f8c <HAL_I2C_Init+0x13c>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1e59      	subs	r1, r3, #1
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f66:	1c59      	adds	r1, r3, #1
 8003f68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f6c:	400b      	ands	r3, r1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_I2C_Init+0x138>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	1e59      	subs	r1, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f80:	3301      	adds	r3, #1
 8003f82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f86:	e051      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f88:	2304      	movs	r3, #4
 8003f8a:	e04f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d111      	bne.n	8003fb8 <HAL_I2C_Init+0x168>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	440b      	add	r3, r1
 8003fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	bf0c      	ite	eq
 8003fb0:	2301      	moveq	r3, #1
 8003fb2:	2300      	movne	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e012      	b.n	8003fde <HAL_I2C_Init+0x18e>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e58      	subs	r0, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	0099      	lsls	r1, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Init+0x196>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e022      	b.n	800402c <HAL_I2C_Init+0x1dc>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10e      	bne.n	800400c <HAL_I2C_Init+0x1bc>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e58      	subs	r0, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6859      	ldr	r1, [r3, #4]
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	440b      	add	r3, r1
 8003ffc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004000:	3301      	adds	r3, #1
 8004002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800400a:	e00f      	b.n	800402c <HAL_I2C_Init+0x1dc>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	0099      	lsls	r1, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	6809      	ldr	r1, [r1, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69da      	ldr	r2, [r3, #28]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800405a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6911      	ldr	r1, [r2, #16]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	68d2      	ldr	r2, [r2, #12]
 8004066:	4311      	orrs	r1, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6812      	ldr	r2, [r2, #0]
 800406c:	430b      	orrs	r3, r1
 800406e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695a      	ldr	r2, [r3, #20]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	000186a0 	.word	0x000186a0
 80040c8:	001e847f 	.word	0x001e847f
 80040cc:	003d08ff 	.word	0x003d08ff
 80040d0:	431bde83 	.word	0x431bde83
 80040d4:	10624dd3 	.word	0x10624dd3

080040d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e264      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d075      	beq.n	80041e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040f6:	4ba3      	ldr	r3, [pc, #652]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d00c      	beq.n	800411c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004102:	4ba0      	ldr	r3, [pc, #640]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410a:	2b08      	cmp	r3, #8
 800410c:	d112      	bne.n	8004134 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800410e:	4b9d      	ldr	r3, [pc, #628]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004116:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411a:	d10b      	bne.n	8004134 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	4b99      	ldr	r3, [pc, #612]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05b      	beq.n	80041e0 <HAL_RCC_OscConfig+0x108>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d157      	bne.n	80041e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e23f      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d106      	bne.n	800414c <HAL_RCC_OscConfig+0x74>
 800413e:	4b91      	ldr	r3, [pc, #580]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a90      	ldr	r2, [pc, #576]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6013      	str	r3, [r2, #0]
 800414a:	e01d      	b.n	8004188 <HAL_RCC_OscConfig+0xb0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004154:	d10c      	bne.n	8004170 <HAL_RCC_OscConfig+0x98>
 8004156:	4b8b      	ldr	r3, [pc, #556]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a8a      	ldr	r2, [pc, #552]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004160:	6013      	str	r3, [r2, #0]
 8004162:	4b88      	ldr	r3, [pc, #544]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a87      	ldr	r2, [pc, #540]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e00b      	b.n	8004188 <HAL_RCC_OscConfig+0xb0>
 8004170:	4b84      	ldr	r3, [pc, #528]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a83      	ldr	r2, [pc, #524]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	4b81      	ldr	r3, [pc, #516]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a80      	ldr	r2, [pc, #512]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d013      	beq.n	80041b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7ff f80e 	bl	80031b0 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004198:	f7ff f80a 	bl	80031b0 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b64      	cmp	r3, #100	; 0x64
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e204      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b76      	ldr	r3, [pc, #472]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0xc0>
 80041b6:	e014      	b.n	80041e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fffa 	bl	80031b0 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fe fff6 	bl	80031b0 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	; 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e1f0      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d2:	4b6c      	ldr	r3, [pc, #432]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1f0      	bne.n	80041c0 <HAL_RCC_OscConfig+0xe8>
 80041de:	e000      	b.n	80041e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d063      	beq.n	80042b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ee:	4b65      	ldr	r3, [pc, #404]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fa:	4b62      	ldr	r3, [pc, #392]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004202:	2b08      	cmp	r3, #8
 8004204:	d11c      	bne.n	8004240 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004206:	4b5f      	ldr	r3, [pc, #380]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d116      	bne.n	8004240 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004212:	4b5c      	ldr	r3, [pc, #368]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_RCC_OscConfig+0x152>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e1c4      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422a:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4952      	ldr	r1, [pc, #328]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423e:	e03a      	b.n	80042b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d020      	beq.n	800428a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004248:	4b4f      	ldr	r3, [pc, #316]	; (8004388 <HAL_RCC_OscConfig+0x2b0>)
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fe ffaf 	bl	80031b0 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004256:	f7fe ffab 	bl	80031b0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e1a5      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004274:	4b43      	ldr	r3, [pc, #268]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4940      	ldr	r1, [pc, #256]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004284:	4313      	orrs	r3, r2
 8004286:	600b      	str	r3, [r1, #0]
 8004288:	e015      	b.n	80042b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428a:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <HAL_RCC_OscConfig+0x2b0>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004290:	f7fe ff8e 	bl	80031b0 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004298:	f7fe ff8a 	bl	80031b0 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e184      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042aa:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1f0      	bne.n	8004298 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d030      	beq.n	8004324 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ca:	4b30      	ldr	r3, [pc, #192]	; (800438c <HAL_RCC_OscConfig+0x2b4>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d0:	f7fe ff6e 	bl	80031b0 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d8:	f7fe ff6a 	bl	80031b0 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e164      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ea:	4b26      	ldr	r3, [pc, #152]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0f0      	beq.n	80042d8 <HAL_RCC_OscConfig+0x200>
 80042f6:	e015      	b.n	8004324 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f8:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_OscConfig+0x2b4>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042fe:	f7fe ff57 	bl	80031b0 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004304:	e008      	b.n	8004318 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004306:	f7fe ff53 	bl	80031b0 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d901      	bls.n	8004318 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e14d      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800431a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1f0      	bne.n	8004306 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 80a0 	beq.w	8004472 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004336:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10f      	bne.n	8004362 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004342:	2300      	movs	r3, #0
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004350:	6413      	str	r3, [r2, #64]	; 0x40
 8004352:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800435e:	2301      	movs	r3, #1
 8004360:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_OscConfig+0x2b8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436a:	2b00      	cmp	r3, #0
 800436c:	d121      	bne.n	80043b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <HAL_RCC_OscConfig+0x2b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a07      	ldr	r2, [pc, #28]	; (8004390 <HAL_RCC_OscConfig+0x2b8>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437a:	f7fe ff19 	bl	80031b0 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	e011      	b.n	80043a6 <HAL_RCC_OscConfig+0x2ce>
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	42470000 	.word	0x42470000
 800438c:	42470e80 	.word	0x42470e80
 8004390:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004394:	f7fe ff0c 	bl	80031b0 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e106      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a6:	4b85      	ldr	r3, [pc, #532]	; (80045bc <HAL_RCC_OscConfig+0x4e4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d106      	bne.n	80043c8 <HAL_RCC_OscConfig+0x2f0>
 80043ba:	4b81      	ldr	r3, [pc, #516]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043be:	4a80      	ldr	r2, [pc, #512]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	f043 0301 	orr.w	r3, r3, #1
 80043c4:	6713      	str	r3, [r2, #112]	; 0x70
 80043c6:	e01c      	b.n	8004402 <HAL_RCC_OscConfig+0x32a>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b05      	cmp	r3, #5
 80043ce:	d10c      	bne.n	80043ea <HAL_RCC_OscConfig+0x312>
 80043d0:	4b7b      	ldr	r3, [pc, #492]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d4:	4a7a      	ldr	r2, [pc, #488]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	f043 0304 	orr.w	r3, r3, #4
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
 80043dc:	4b78      	ldr	r3, [pc, #480]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	4a77      	ldr	r2, [pc, #476]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	; 0x70
 80043e8:	e00b      	b.n	8004402 <HAL_RCC_OscConfig+0x32a>
 80043ea:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	4a74      	ldr	r2, [pc, #464]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	6713      	str	r3, [r2, #112]	; 0x70
 80043f6:	4b72      	ldr	r3, [pc, #456]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	4a71      	ldr	r2, [pc, #452]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	f023 0304 	bic.w	r3, r3, #4
 8004400:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d015      	beq.n	8004436 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440a:	f7fe fed1 	bl	80031b0 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004412:	f7fe fecd 	bl	80031b0 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004420:	4293      	cmp	r3, r2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e0c5      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004428:	4b65      	ldr	r3, [pc, #404]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 800442a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0ee      	beq.n	8004412 <HAL_RCC_OscConfig+0x33a>
 8004434:	e014      	b.n	8004460 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004436:	f7fe febb 	bl	80031b0 <HAL_GetTick>
 800443a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800443c:	e00a      	b.n	8004454 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800443e:	f7fe feb7 	bl	80031b0 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	f241 3288 	movw	r2, #5000	; 0x1388
 800444c:	4293      	cmp	r3, r2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0af      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004454:	4b5a      	ldr	r3, [pc, #360]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ee      	bne.n	800443e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004460:	7dfb      	ldrb	r3, [r7, #23]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d105      	bne.n	8004472 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004466:	4b56      	ldr	r3, [pc, #344]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a55      	ldr	r2, [pc, #340]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 800446c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 809b 	beq.w	80045b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800447c:	4b50      	ldr	r3, [pc, #320]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 030c 	and.w	r3, r3, #12
 8004484:	2b08      	cmp	r3, #8
 8004486:	d05c      	beq.n	8004542 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d141      	bne.n	8004514 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004490:	4b4c      	ldr	r3, [pc, #304]	; (80045c4 <HAL_RCC_OscConfig+0x4ec>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004496:	f7fe fe8b 	bl	80031b0 <HAL_GetTick>
 800449a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449e:	f7fe fe87 	bl	80031b0 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e081      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b0:	4b43      	ldr	r3, [pc, #268]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69da      	ldr	r2, [r3, #28]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	019b      	lsls	r3, r3, #6
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	3b01      	subs	r3, #1
 80044d6:	041b      	lsls	r3, r3, #16
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	061b      	lsls	r3, r3, #24
 80044e0:	4937      	ldr	r1, [pc, #220]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044e6:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <HAL_RCC_OscConfig+0x4ec>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fe fe60 	bl	80031b0 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fe fe5c 	bl	80031b0 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e056      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004506:	4b2e      	ldr	r3, [pc, #184]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x41c>
 8004512:	e04e      	b.n	80045b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004514:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCC_OscConfig+0x4ec>)
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451a:	f7fe fe49 	bl	80031b0 <HAL_GetTick>
 800451e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004520:	e008      	b.n	8004534 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004522:	f7fe fe45 	bl	80031b0 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e03f      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004534:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1f0      	bne.n	8004522 <HAL_RCC_OscConfig+0x44a>
 8004540:	e037      	b.n	80045b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e032      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800454e:	4b1c      	ldr	r3, [pc, #112]	; (80045c0 <HAL_RCC_OscConfig+0x4e8>)
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d028      	beq.n	80045ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004566:	429a      	cmp	r2, r3
 8004568:	d121      	bne.n	80045ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d11a      	bne.n	80045ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800457e:	4013      	ands	r3, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004584:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004586:	4293      	cmp	r3, r2
 8004588:	d111      	bne.n	80045ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	3b01      	subs	r3, #1
 8004598:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459a:	429a      	cmp	r2, r3
 800459c:	d107      	bne.n	80045ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d001      	beq.n	80045b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e000      	b.n	80045b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40007000 	.word	0x40007000
 80045c0:	40023800 	.word	0x40023800
 80045c4:	42470060 	.word	0x42470060

080045c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0cc      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045dc:	4b68      	ldr	r3, [pc, #416]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d90c      	bls.n	8004604 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b65      	ldr	r3, [pc, #404]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f2:	4b63      	ldr	r3, [pc, #396]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d001      	beq.n	8004604 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0b8      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d005      	beq.n	8004628 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800461c:	4b59      	ldr	r3, [pc, #356]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a58      	ldr	r2, [pc, #352]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004626:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0308 	and.w	r3, r3, #8
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004634:	4b53      	ldr	r3, [pc, #332]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	4a52      	ldr	r2, [pc, #328]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800463e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004640:	4b50      	ldr	r3, [pc, #320]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	494d      	ldr	r1, [pc, #308]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d044      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b01      	cmp	r3, #1
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004666:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d119      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e07f      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d003      	beq.n	8004686 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004682:	2b03      	cmp	r3, #3
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004686:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e06f      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004696:	4b3b      	ldr	r3, [pc, #236]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e067      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a6:	4b37      	ldr	r3, [pc, #220]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 0203 	bic.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4934      	ldr	r1, [pc, #208]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b8:	f7fe fd7a 	bl	80031b0 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c0:	f7fe fd76 	bl	80031b0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e04f      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 020c 	and.w	r2, r3, #12
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d1eb      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d20c      	bcs.n	8004710 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0307 	and.w	r3, r3, #7
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e032      	b.n	8004776 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d008      	beq.n	800472e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800471c:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	4916      	ldr	r1, [pc, #88]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d009      	beq.n	800474e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473a:	4b12      	ldr	r3, [pc, #72]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	490e      	ldr	r1, [pc, #56]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800474e:	f000 f821 	bl	8004794 <HAL_RCC_GetSysClockFreq>
 8004752:	4602      	mov	r2, r0
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 030f 	and.w	r3, r3, #15
 800475e:	490a      	ldr	r1, [pc, #40]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 8004760:	5ccb      	ldrb	r3, [r1, r3]
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	4a09      	ldr	r2, [pc, #36]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800476a:	4b09      	ldr	r3, [pc, #36]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fd f846 	bl	8001800 <HAL_InitTick>

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40023c00 	.word	0x40023c00
 8004784:	40023800 	.word	0x40023800
 8004788:	08009f18 	.word	0x08009f18
 800478c:	20000000 	.word	0x20000000
 8004790:	20000014 	.word	0x20000014

08004794 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004794:	b5b0      	push	{r4, r5, r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800479a:	2100      	movs	r1, #0
 800479c:	6079      	str	r1, [r7, #4]
 800479e:	2100      	movs	r1, #0
 80047a0:	60f9      	str	r1, [r7, #12]
 80047a2:	2100      	movs	r1, #0
 80047a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047a6:	2100      	movs	r1, #0
 80047a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047aa:	4952      	ldr	r1, [pc, #328]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80047ac:	6889      	ldr	r1, [r1, #8]
 80047ae:	f001 010c 	and.w	r1, r1, #12
 80047b2:	2908      	cmp	r1, #8
 80047b4:	d00d      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80047b6:	2908      	cmp	r1, #8
 80047b8:	f200 8094 	bhi.w	80048e4 <HAL_RCC_GetSysClockFreq+0x150>
 80047bc:	2900      	cmp	r1, #0
 80047be:	d002      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x32>
 80047c0:	2904      	cmp	r1, #4
 80047c2:	d003      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x38>
 80047c4:	e08e      	b.n	80048e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047c6:	4b4c      	ldr	r3, [pc, #304]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80047c8:	60bb      	str	r3, [r7, #8]
       break;
 80047ca:	e08e      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047cc:	4b4b      	ldr	r3, [pc, #300]	; (80048fc <HAL_RCC_GetSysClockFreq+0x168>)
 80047ce:	60bb      	str	r3, [r7, #8]
      break;
 80047d0:	e08b      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d2:	4948      	ldr	r1, [pc, #288]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80047d4:	6849      	ldr	r1, [r1, #4]
 80047d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80047da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047dc:	4945      	ldr	r1, [pc, #276]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80047de:	6849      	ldr	r1, [r1, #4]
 80047e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80047e4:	2900      	cmp	r1, #0
 80047e6:	d024      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047e8:	4942      	ldr	r1, [pc, #264]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80047ea:	6849      	ldr	r1, [r1, #4]
 80047ec:	0989      	lsrs	r1, r1, #6
 80047ee:	4608      	mov	r0, r1
 80047f0:	f04f 0100 	mov.w	r1, #0
 80047f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80047f8:	f04f 0500 	mov.w	r5, #0
 80047fc:	ea00 0204 	and.w	r2, r0, r4
 8004800:	ea01 0305 	and.w	r3, r1, r5
 8004804:	493d      	ldr	r1, [pc, #244]	; (80048fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004806:	fb01 f003 	mul.w	r0, r1, r3
 800480a:	2100      	movs	r1, #0
 800480c:	fb01 f102 	mul.w	r1, r1, r2
 8004810:	1844      	adds	r4, r0, r1
 8004812:	493a      	ldr	r1, [pc, #232]	; (80048fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004814:	fba2 0101 	umull	r0, r1, r2, r1
 8004818:	1863      	adds	r3, r4, r1
 800481a:	4619      	mov	r1, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	461a      	mov	r2, r3
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	f7fb fcd4 	bl	80001d0 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4613      	mov	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	e04a      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004832:	4b30      	ldr	r3, [pc, #192]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	099b      	lsrs	r3, r3, #6
 8004838:	461a      	mov	r2, r3
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004842:	f04f 0100 	mov.w	r1, #0
 8004846:	ea02 0400 	and.w	r4, r2, r0
 800484a:	ea03 0501 	and.w	r5, r3, r1
 800484e:	4620      	mov	r0, r4
 8004850:	4629      	mov	r1, r5
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	014b      	lsls	r3, r1, #5
 800485c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004860:	0142      	lsls	r2, r0, #5
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	1b00      	subs	r0, r0, r4
 8004868:	eb61 0105 	sbc.w	r1, r1, r5
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	018b      	lsls	r3, r1, #6
 8004876:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800487a:	0182      	lsls	r2, r0, #6
 800487c:	1a12      	subs	r2, r2, r0
 800487e:	eb63 0301 	sbc.w	r3, r3, r1
 8004882:	f04f 0000 	mov.w	r0, #0
 8004886:	f04f 0100 	mov.w	r1, #0
 800488a:	00d9      	lsls	r1, r3, #3
 800488c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004890:	00d0      	lsls	r0, r2, #3
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	1912      	adds	r2, r2, r4
 8004898:	eb45 0303 	adc.w	r3, r5, r3
 800489c:	f04f 0000 	mov.w	r0, #0
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	0299      	lsls	r1, r3, #10
 80048a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048aa:	0290      	lsls	r0, r2, #10
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	461a      	mov	r2, r3
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	f7fb fc88 	bl	80001d0 <__aeabi_uldivmod>
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4613      	mov	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	f003 0303 	and.w	r3, r3, #3
 80048d2:	3301      	adds	r3, #1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	60bb      	str	r3, [r7, #8]
      break;
 80048e2:	e002      	b.n	80048ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80048e6:	60bb      	str	r3, [r7, #8]
      break;
 80048e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048ea:	68bb      	ldr	r3, [r7, #8]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bdb0      	pop	{r4, r5, r7, pc}
 80048f4:	40023800 	.word	0x40023800
 80048f8:	00f42400 	.word	0x00f42400
 80048fc:	00b71b00 	.word	0x00b71b00

08004900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004904:	4b03      	ldr	r3, [pc, #12]	; (8004914 <HAL_RCC_GetHCLKFreq+0x14>)
 8004906:	681b      	ldr	r3, [r3, #0]
}
 8004908:	4618      	mov	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000000 	.word	0x20000000

08004918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800491c:	f7ff fff0 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b05      	ldr	r3, [pc, #20]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0a9b      	lsrs	r3, r3, #10
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4903      	ldr	r1, [pc, #12]	; (800493c <HAL_RCC_GetPCLK1Freq+0x24>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004934:	4618      	mov	r0, r3
 8004936:	bd80      	pop	{r7, pc}
 8004938:	40023800 	.word	0x40023800
 800493c:	08009f28 	.word	0x08009f28

08004940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004944:	f7ff ffdc 	bl	8004900 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b05      	ldr	r3, [pc, #20]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0b5b      	lsrs	r3, r3, #13
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4903      	ldr	r1, [pc, #12]	; (8004964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40023800 	.word	0x40023800
 8004964:	08009f28 	.word	0x08009f28

08004968 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	220f      	movs	r2, #15
 8004976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004978:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_RCC_GetClockConfig+0x5c>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0203 	and.w	r2, r3, #3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004984:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800499c:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_GetClockConfig+0x5c>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	08db      	lsrs	r3, r3, #3
 80049a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <HAL_RCC_GetClockConfig+0x60>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0207 	and.w	r2, r3, #7
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40023800 	.word	0x40023800
 80049c8:	40023c00 	.word	0x40023c00

080049cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d105      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d035      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049f4:	4b62      	ldr	r3, [pc, #392]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049fa:	f7fe fbd9 	bl	80031b0 <HAL_GetTick>
 80049fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a00:	e008      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a02:	f7fe fbd5 	bl	80031b0 <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0b0      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a14:	4b5b      	ldr	r3, [pc, #364]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f0      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	019a      	lsls	r2, r3, #6
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	071b      	lsls	r3, r3, #28
 8004a2c:	4955      	ldr	r1, [pc, #340]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a34:	4b52      	ldr	r3, [pc, #328]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004a36:	2201      	movs	r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a3a:	f7fe fbb9 	bl	80031b0 <HAL_GetTick>
 8004a3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a40:	e008      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a42:	f7fe fbb5 	bl	80031b0 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e090      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a54:	4b4b      	ldr	r3, [pc, #300]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d0f0      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0302 	and.w	r3, r3, #2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8083 	beq.w	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	4b44      	ldr	r3, [pc, #272]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a43      	ldr	r2, [pc, #268]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a8a:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a3e      	ldr	r2, [pc, #248]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a96:	f7fe fb8b 	bl	80031b0 <HAL_GetTick>
 8004a9a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a9c:	e008      	b.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a9e:	f7fe fb87 	bl	80031b0 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e062      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ab0:	4b35      	ldr	r3, [pc, #212]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d0f0      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004abc:	4b31      	ldr	r3, [pc, #196]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d02f      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d028      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ada:	4b2a      	ldr	r3, [pc, #168]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ae4:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004af0:	4a24      	ldr	r2, [pc, #144]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004af6:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d114      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b02:	f7fe fb55 	bl	80031b0 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b08:	e00a      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b0a:	f7fe fb51 	bl	80031b0 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e02a      	b.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b20:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ee      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b38:	d10d      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4e:	490d      	ldr	r1, [pc, #52]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	608b      	str	r3, [r1, #8]
 8004b54:	e005      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004b56:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	4a0a      	ldr	r2, [pc, #40]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b60:	6093      	str	r3, [r2, #8]
 8004b62:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b6e:	4905      	ldr	r1, [pc, #20]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	42470068 	.word	0x42470068
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40007000 	.word	0x40007000
 8004b8c:	42470e40 	.word	0x42470e40

08004b90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e083      	b.n	8004caa <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	7f5b      	ldrb	r3, [r3, #29]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d105      	bne.n	8004bb8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7fc fc2a 	bl	800140c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	22ca      	movs	r2, #202	; 0xca
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2253      	movs	r2, #83	; 0x53
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f897 	bl	8004d02 <RTC_EnterInitMode>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d008      	beq.n	8004bec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	22ff      	movs	r2, #255	; 0xff
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2204      	movs	r2, #4
 8004be6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e05e      	b.n	8004caa <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfe:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6899      	ldr	r1, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	68d2      	ldr	r2, [r2, #12]
 8004c26:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6919      	ldr	r1, [r3, #16]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	041a      	lsls	r2, r3, #16
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c4a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10e      	bne.n	8004c78 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f829 	bl	8004cb2 <HAL_RTC_WaitForSynchro>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d008      	beq.n	8004c78 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	22ff      	movs	r2, #255	; 0xff
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e018      	b.n	8004caa <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	22ff      	movs	r2, #255	; 0xff
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68da      	ldr	r2, [r3, #12]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ccc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cce:	f7fe fa6f 	bl	80031b0 <HAL_GetTick>
 8004cd2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cd4:	e009      	b.n	8004cea <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004cd6:	f7fe fa6b 	bl	80031b0 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ce4:	d901      	bls.n	8004cea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e007      	b.n	8004cfa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0ee      	beq.n	8004cd6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b084      	sub	sp, #16
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d119      	bne.n	8004d50 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d26:	f7fe fa43 	bl	80031b0 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d2c:	e009      	b.n	8004d42 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004d2e:	f7fe fa3f 	bl	80031b0 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3c:	d901      	bls.n	8004d42 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e007      	b.n	8004d52 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ee      	beq.n	8004d2e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e07b      	b.n	8004e64 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7c:	d009      	beq.n	8004d92 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	61da      	str	r2, [r3, #28]
 8004d84:	e005      	b.n	8004d92 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d106      	bne.n	8004db2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7fc fb43 	bl	8001438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	ea42 0103 	orr.w	r1, r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	0c1b      	lsrs	r3, r3, #16
 8004e30:	f003 0104 	and.w	r1, r3, #4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	f003 0210 	and.w	r2, r3, #16
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_SPI_Transmit+0x22>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e126      	b.n	80050dc <HAL_SPI_Transmit+0x270>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e96:	f7fe f98b 	bl	80031b0 <HAL_GetTick>
 8004e9a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d002      	beq.n	8004eb2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
 8004eae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004eb0:	e10b      	b.n	80050ca <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_SPI_Transmit+0x52>
 8004eb8:	88fb      	ldrh	r3, [r7, #6]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ec2:	e102      	b.n	80050ca <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	88fa      	ldrh	r2, [r7, #6]
 8004ee2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0a:	d10f      	bne.n	8004f2c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f2a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f36:	2b40      	cmp	r3, #64	; 0x40
 8004f38:	d007      	beq.n	8004f4a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f52:	d14b      	bne.n	8004fec <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_SPI_Transmit+0xf6>
 8004f5c:	8afb      	ldrh	r3, [r7, #22]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d13e      	bne.n	8004fe0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	881a      	ldrh	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004f86:	e02b      	b.n	8004fe0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d112      	bne.n	8004fbc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	881a      	ldrh	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	1c9a      	adds	r2, r3, #2
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004fba:	e011      	b.n	8004fe0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fbc:	f7fe f8f8 	bl	80031b0 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d803      	bhi.n	8004fd4 <HAL_SPI_Transmit+0x168>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd2:	d102      	bne.n	8004fda <HAL_SPI_Transmit+0x16e>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fde:	e074      	b.n	80050ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1ce      	bne.n	8004f88 <HAL_SPI_Transmit+0x11c>
 8004fea:	e04c      	b.n	8005086 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_SPI_Transmit+0x18e>
 8004ff4:	8afb      	ldrh	r3, [r7, #22]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d140      	bne.n	800507c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005020:	e02c      	b.n	800507c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d113      	bne.n	8005058 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	7812      	ldrb	r2, [r2, #0]
 800503c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504c:	b29b      	uxth	r3, r3
 800504e:	3b01      	subs	r3, #1
 8005050:	b29a      	uxth	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	86da      	strh	r2, [r3, #54]	; 0x36
 8005056:	e011      	b.n	800507c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005058:	f7fe f8aa 	bl	80031b0 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d803      	bhi.n	8005070 <HAL_SPI_Transmit+0x204>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800506e:	d102      	bne.n	8005076 <HAL_SPI_Transmit+0x20a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	77fb      	strb	r3, [r7, #31]
          goto error;
 800507a:	e026      	b.n	80050ca <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1cd      	bne.n	8005022 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fa08 	bl	80054a0 <SPI_EndRxTxTransaction>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2220      	movs	r2, #32
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	613b      	str	r3, [r7, #16]
 80050b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	77fb      	strb	r3, [r7, #31]
 80050c6:	e000      	b.n	80050ca <HAL_SPI_Transmit+0x25e>
  }

error:
 80050c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050da:	7ffb      	ldrb	r3, [r7, #31]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_SPI_Transmit_DMA+0x20>
 8005100:	2302      	movs	r3, #2
 8005102:	e09b      	b.n	800523c <HAL_SPI_Transmit_DMA+0x158>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b01      	cmp	r3, #1
 8005116:	d002      	beq.n	800511e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005118:	2302      	movs	r3, #2
 800511a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800511c:	e089      	b.n	8005232 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <HAL_SPI_Transmit_DMA+0x46>
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d102      	bne.n	8005130 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800512e:	e080      	b.n	8005232 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2203      	movs	r2, #3
 8005134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2200      	movs	r2, #0
 800513c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	88fa      	ldrh	r2, [r7, #6]
 8005148:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2200      	movs	r2, #0
 800516c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005176:	d10f      	bne.n	8005198 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005186:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005196:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800519c:	4a29      	ldr	r2, [pc, #164]	; (8005244 <HAL_SPI_Transmit_DMA+0x160>)
 800519e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a4:	4a28      	ldr	r2, [pc, #160]	; (8005248 <HAL_SPI_Transmit_DMA+0x164>)
 80051a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ac:	4a27      	ldr	r2, [pc, #156]	; (800524c <HAL_SPI_Transmit_DMA+0x168>)
 80051ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b4:	2200      	movs	r2, #0
 80051b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c0:	4619      	mov	r1, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80051d0:	f7fe f9ae 	bl	8003530 <HAL_DMA_Start_IT>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00c      	beq.n	80051f4 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051de:	f043 0210 	orr.w	r2, r3, #16
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80051f2:	e01e      	b.n	8005232 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d007      	beq.n	8005212 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005210:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0220 	orr.w	r2, r2, #32
 8005220:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0202 	orr.w	r2, r2, #2
 8005230:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3718      	adds	r7, #24
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	08005335 	.word	0x08005335
 8005248:	0800528d 	.word	0x0800528d
 800524c:	08005351 	.word	0x08005351

08005250 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800529a:	f7fd ff89 	bl	80031b0 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ae:	d03b      	beq.n	8005328 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0220 	bic.w	r2, r2, #32
 80052be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0202 	bic.w	r2, r2, #2
 80052ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	2164      	movs	r1, #100	; 0x64
 80052d4:	6978      	ldr	r0, [r7, #20]
 80052d6:	f000 f8e3 	bl	80054a0 <SPI_EndRxTxTransaction>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10a      	bne.n	800530a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005320:	6978      	ldr	r0, [r7, #20]
 8005322:	f7ff ffa9 	bl	8005278 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005326:	e002      	b.n	800532e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005328:	6978      	ldr	r0, [r7, #20]
 800532a:	f7ff ff91 	bl	8005250 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800532e:	3718      	adds	r7, #24
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7ff ff8e 	bl	8005264 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005348:	bf00      	nop
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0203 	bic.w	r2, r2, #3
 800536c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005372:	f043 0210 	orr.w	r2, r3, #16
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f7ff ff78 	bl	8005278 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	4613      	mov	r3, r2
 800539e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053a0:	f7fd ff06 	bl	80031b0 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	4413      	add	r3, r2
 80053ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80053b0:	f7fd fefe 	bl	80031b0 <HAL_GetTick>
 80053b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053b6:	4b39      	ldr	r3, [pc, #228]	; (800549c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	015b      	lsls	r3, r3, #5
 80053bc:	0d1b      	lsrs	r3, r3, #20
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053c6:	e054      	b.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ce:	d050      	beq.n	8005472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053d0:	f7fd feee 	bl	80031b0 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d902      	bls.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d13d      	bne.n	8005462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fe:	d111      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005408:	d004      	beq.n	8005414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005412:	d107      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800542c:	d10f      	bne.n	800544e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800544c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e017      	b.n	8005492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	3b01      	subs	r3, #1
 8005470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	429a      	cmp	r2, r3
 800548e:	d19b      	bne.n	80053c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3720      	adds	r7, #32
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000000 	.word	0x20000000

080054a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b088      	sub	sp, #32
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054ac:	4b1b      	ldr	r3, [pc, #108]	; (800551c <SPI_EndRxTxTransaction+0x7c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <SPI_EndRxTxTransaction+0x80>)
 80054b2:	fba2 2303 	umull	r2, r3, r2, r3
 80054b6:	0d5b      	lsrs	r3, r3, #21
 80054b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054bc:	fb02 f303 	mul.w	r3, r2, r3
 80054c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054ca:	d112      	bne.n	80054f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	2180      	movs	r1, #128	; 0x80
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff ff5a 	bl	8005390 <SPI_WaitFlagStateUntilTimeout>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e00f      	b.n	8005512 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00a      	beq.n	800550e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005508:	2b80      	cmp	r3, #128	; 0x80
 800550a:	d0f2      	beq.n	80054f2 <SPI_EndRxTxTransaction+0x52>
 800550c:	e000      	b.n	8005510 <SPI_EndRxTxTransaction+0x70>
        break;
 800550e:	bf00      	nop
  }

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000000 	.word	0x20000000
 8005520:	165e9f81 	.word	0x165e9f81

08005524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e041      	b.n	80055ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fc f846 	bl	80015dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f000 fe24 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d001      	beq.n	80055dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e046      	b.n	800566a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a23      	ldr	r2, [pc, #140]	; (8005678 <HAL_TIM_Base_Start+0xb4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d022      	beq.n	8005634 <HAL_TIM_Base_Start+0x70>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f6:	d01d      	beq.n	8005634 <HAL_TIM_Base_Start+0x70>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1f      	ldr	r2, [pc, #124]	; (800567c <HAL_TIM_Base_Start+0xb8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d018      	beq.n	8005634 <HAL_TIM_Base_Start+0x70>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1e      	ldr	r2, [pc, #120]	; (8005680 <HAL_TIM_Base_Start+0xbc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <HAL_TIM_Base_Start+0x70>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1c      	ldr	r2, [pc, #112]	; (8005684 <HAL_TIM_Base_Start+0xc0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00e      	beq.n	8005634 <HAL_TIM_Base_Start+0x70>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <HAL_TIM_Base_Start+0xc4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d009      	beq.n	8005634 <HAL_TIM_Base_Start+0x70>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a19      	ldr	r2, [pc, #100]	; (800568c <HAL_TIM_Base_Start+0xc8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_TIM_Base_Start+0x70>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a18      	ldr	r2, [pc, #96]	; (8005690 <HAL_TIM_Base_Start+0xcc>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d111      	bne.n	8005658 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b06      	cmp	r3, #6
 8005644:	d010      	beq.n	8005668 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005656:	e007      	b.n	8005668 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40010000 	.word	0x40010000
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40010400 	.word	0x40010400
 800568c:	40014000 	.word	0x40014000
 8005690:	40001800 	.word	0x40001800

08005694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d001      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e04e      	b.n	800574a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a23      	ldr	r2, [pc, #140]	; (8005758 <HAL_TIM_Base_Start_IT+0xc4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d022      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d01d      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1f      	ldr	r2, [pc, #124]	; (800575c <HAL_TIM_Base_Start_IT+0xc8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_TIM_Base_Start_IT+0xcc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <HAL_TIM_Base_Start_IT+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <HAL_TIM_Base_Start_IT+0xd4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_TIM_Base_Start_IT+0xd8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a18      	ldr	r2, [pc, #96]	; (8005770 <HAL_TIM_Base_Start_IT+0xdc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d010      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	e007      	b.n	8005748 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40001800 	.word	0x40001800

08005774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e041      	b.n	800580a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fb ff64 	bl	8001668 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 fcfc 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d109      	bne.n	8005838 <HAL_TIM_PWM_Start+0x24>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b01      	cmp	r3, #1
 800582e:	bf14      	ite	ne
 8005830:	2301      	movne	r3, #1
 8005832:	2300      	moveq	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	e022      	b.n	800587e <HAL_TIM_PWM_Start+0x6a>
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b04      	cmp	r3, #4
 800583c:	d109      	bne.n	8005852 <HAL_TIM_PWM_Start+0x3e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e015      	b.n	800587e <HAL_TIM_PWM_Start+0x6a>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b08      	cmp	r3, #8
 8005856:	d109      	bne.n	800586c <HAL_TIM_PWM_Start+0x58>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e008      	b.n	800587e <HAL_TIM_PWM_Start+0x6a>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e07c      	b.n	8005980 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d104      	bne.n	8005896 <HAL_TIM_PWM_Start+0x82>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005894:	e013      	b.n	80058be <HAL_TIM_PWM_Start+0xaa>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b04      	cmp	r3, #4
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_PWM_Start+0x92>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058a4:	e00b      	b.n	80058be <HAL_TIM_PWM_Start+0xaa>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b08      	cmp	r3, #8
 80058aa:	d104      	bne.n	80058b6 <HAL_TIM_PWM_Start+0xa2>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2202      	movs	r2, #2
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b4:	e003      	b.n	80058be <HAL_TIM_PWM_Start+0xaa>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2202      	movs	r2, #2
 80058ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2201      	movs	r2, #1
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f001 f886 	bl	80069d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a2d      	ldr	r2, [pc, #180]	; (8005988 <HAL_TIM_PWM_Start+0x174>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <HAL_TIM_PWM_Start+0xcc>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2c      	ldr	r2, [pc, #176]	; (800598c <HAL_TIM_PWM_Start+0x178>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_PWM_Start+0xd0>
 80058e0:	2301      	movs	r3, #1
 80058e2:	e000      	b.n	80058e6 <HAL_TIM_PWM_Start+0xd2>
 80058e4:	2300      	movs	r3, #0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a22      	ldr	r2, [pc, #136]	; (8005988 <HAL_TIM_PWM_Start+0x174>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d022      	beq.n	800594a <HAL_TIM_PWM_Start+0x136>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800590c:	d01d      	beq.n	800594a <HAL_TIM_PWM_Start+0x136>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a1f      	ldr	r2, [pc, #124]	; (8005990 <HAL_TIM_PWM_Start+0x17c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d018      	beq.n	800594a <HAL_TIM_PWM_Start+0x136>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1d      	ldr	r2, [pc, #116]	; (8005994 <HAL_TIM_PWM_Start+0x180>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d013      	beq.n	800594a <HAL_TIM_PWM_Start+0x136>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1c      	ldr	r2, [pc, #112]	; (8005998 <HAL_TIM_PWM_Start+0x184>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <HAL_TIM_PWM_Start+0x136>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a16      	ldr	r2, [pc, #88]	; (800598c <HAL_TIM_PWM_Start+0x178>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_TIM_PWM_Start+0x136>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a18      	ldr	r2, [pc, #96]	; (800599c <HAL_TIM_PWM_Start+0x188>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_TIM_PWM_Start+0x136>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <HAL_TIM_PWM_Start+0x18c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d111      	bne.n	800596e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b06      	cmp	r3, #6
 800595a:	d010      	beq.n	800597e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	e007      	b.n	800597e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f042 0201 	orr.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}
 8005988:	40010000 	.word	0x40010000
 800598c:	40010400 	.word	0x40010400
 8005990:	40000400 	.word	0x40000400
 8005994:	40000800 	.word	0x40000800
 8005998:	40000c00 	.word	0x40000c00
 800599c:	40014000 	.word	0x40014000
 80059a0:	40001800 	.word	0x40001800

080059a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 f80e 	bl	80069d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2e      	ldr	r2, [pc, #184]	; (8005a7c <HAL_TIM_PWM_Stop+0xd8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d004      	beq.n	80059d0 <HAL_TIM_PWM_Stop+0x2c>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2d      	ldr	r2, [pc, #180]	; (8005a80 <HAL_TIM_PWM_Stop+0xdc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d101      	bne.n	80059d4 <HAL_TIM_PWM_Stop+0x30>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <HAL_TIM_PWM_Stop+0x32>
 80059d4:	2300      	movs	r3, #0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d017      	beq.n	8005a0a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6a1a      	ldr	r2, [r3, #32]
 80059e0:	f241 1311 	movw	r3, #4369	; 0x1111
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10f      	bne.n	8005a0a <HAL_TIM_PWM_Stop+0x66>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a1a      	ldr	r2, [r3, #32]
 80059f0:	f240 4344 	movw	r3, #1092	; 0x444
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <HAL_TIM_PWM_Stop+0x66>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6a1a      	ldr	r2, [r3, #32]
 8005a10:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10f      	bne.n	8005a3a <HAL_TIM_PWM_Stop+0x96>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	f240 4344 	movw	r3, #1092	; 0x444
 8005a24:	4013      	ands	r3, r2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <HAL_TIM_PWM_Stop+0x96>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0201 	bic.w	r2, r2, #1
 8005a38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_PWM_Stop+0xa6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a48:	e013      	b.n	8005a72 <HAL_TIM_PWM_Stop+0xce>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_PWM_Stop+0xb6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a58:	e00b      	b.n	8005a72 <HAL_TIM_PWM_Stop+0xce>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_PWM_Stop+0xc6>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a68:	e003      	b.n	8005a72 <HAL_TIM_PWM_Stop+0xce>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40010400 	.word	0x40010400

08005a84 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e041      	b.n	8005b1a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fb fdfe 	bl	80016ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 fb74 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b082      	sub	sp, #8
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d122      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0302 	and.w	r3, r3, #2
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d11b      	bne.n	8005b7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0202 	mvn.w	r2, #2
 8005b4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fb05 	bl	8006174 <HAL_TIM_IC_CaptureCallback>
 8005b6a:	e005      	b.n	8005b78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 faf7 	bl	8006160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fb08 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	f003 0304 	and.w	r3, r3, #4
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	d122      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d11b      	bne.n	8005bd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f06f 0204 	mvn.w	r2, #4
 8005ba2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fadb 	bl	8006174 <HAL_TIM_IC_CaptureCallback>
 8005bbe:	e005      	b.n	8005bcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 facd 	bl	8006160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fade 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d122      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0308 	and.w	r3, r3, #8
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d11b      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f06f 0208 	mvn.w	r2, #8
 8005bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f003 0303 	and.w	r3, r3, #3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fab1 	bl	8006174 <HAL_TIM_IC_CaptureCallback>
 8005c12:	e005      	b.n	8005c20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 faa3 	bl	8006160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fab4 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0310 	and.w	r3, r3, #16
 8005c30:	2b10      	cmp	r3, #16
 8005c32:	d122      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d11b      	bne.n	8005c7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f06f 0210 	mvn.w	r2, #16
 8005c4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2208      	movs	r2, #8
 8005c50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d003      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fa87 	bl	8006174 <HAL_TIM_IC_CaptureCallback>
 8005c66:	e005      	b.n	8005c74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fa79 	bl	8006160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa8a 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691b      	ldr	r3, [r3, #16]
 8005c80:	f003 0301 	and.w	r3, r3, #1
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10e      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d107      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f06f 0201 	mvn.w	r2, #1
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fb faf3 	bl	800128c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d10e      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cbe:	2b80      	cmp	r3, #128	; 0x80
 8005cc0:	d107      	bne.n	8005cd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 ff81 	bl	8006bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	d10e      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d107      	bne.n	8005cfe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fa4f 	bl	800619c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0320 	and.w	r3, r3, #32
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d10e      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0320 	and.w	r3, r3, #32
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d107      	bne.n	8005d2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0220 	mvn.w	r2, #32
 8005d22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 ff4b 	bl	8006bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d2a:	bf00      	nop
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIM_IC_ConfigChannel+0x1a>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e082      	b.n	8005e52 <HAL_TIM_IC_ConfigChannel+0x120>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d11b      	bne.n	8005d92 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6819      	ldr	r1, [r3, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f000 fc71 	bl	8006650 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 020c 	bic.w	r2, r2, #12
 8005d7c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	6999      	ldr	r1, [r3, #24]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]
 8005d90:	e05a      	b.n	8005e48 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d11c      	bne.n	8005dd2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6819      	ldr	r1, [r3, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f000 fcf5 	bl	8006796 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005dba:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	021a      	lsls	r2, r3, #8
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	619a      	str	r2, [r3, #24]
 8005dd0:	e03a      	b.n	8005e48 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d11b      	bne.n	8005e10 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	6819      	ldr	r1, [r3, #0]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f000 fd42 	bl	8006870 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f022 020c 	bic.w	r2, r2, #12
 8005dfa:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69d9      	ldr	r1, [r3, #28]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	689a      	ldr	r2, [r3, #8]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	61da      	str	r2, [r3, #28]
 8005e0e:	e01b      	b.n	8005e48 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6819      	ldr	r1, [r3, #0]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	f000 fd62 	bl	80068e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69da      	ldr	r2, [r3, #28]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	69d9      	ldr	r1, [r3, #28]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	021a      	lsls	r2, r3, #8
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
	...

08005e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005e72:	2302      	movs	r3, #2
 8005e74:	e0ac      	b.n	8005fd0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b0c      	cmp	r3, #12
 8005e82:	f200 809f 	bhi.w	8005fc4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005ec1 	.word	0x08005ec1
 8005e90:	08005fc5 	.word	0x08005fc5
 8005e94:	08005fc5 	.word	0x08005fc5
 8005e98:	08005fc5 	.word	0x08005fc5
 8005e9c:	08005f01 	.word	0x08005f01
 8005ea0:	08005fc5 	.word	0x08005fc5
 8005ea4:	08005fc5 	.word	0x08005fc5
 8005ea8:	08005fc5 	.word	0x08005fc5
 8005eac:	08005f43 	.word	0x08005f43
 8005eb0:	08005fc5 	.word	0x08005fc5
 8005eb4:	08005fc5 	.word	0x08005fc5
 8005eb8:	08005fc5 	.word	0x08005fc5
 8005ebc:	08005f83 	.word	0x08005f83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fa12 	bl	80062f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0208 	orr.w	r2, r2, #8
 8005eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0204 	bic.w	r2, r2, #4
 8005eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6999      	ldr	r1, [r3, #24]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	619a      	str	r2, [r3, #24]
      break;
 8005efe:	e062      	b.n	8005fc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68b9      	ldr	r1, [r7, #8]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 fa62 	bl	80063d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	699a      	ldr	r2, [r3, #24]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699a      	ldr	r2, [r3, #24]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6999      	ldr	r1, [r3, #24]
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	021a      	lsls	r2, r3, #8
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	619a      	str	r2, [r3, #24]
      break;
 8005f40:	e041      	b.n	8005fc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fab7 	bl	80064bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0208 	orr.w	r2, r2, #8
 8005f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 0204 	bic.w	r2, r2, #4
 8005f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69d9      	ldr	r1, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691a      	ldr	r2, [r3, #16]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	61da      	str	r2, [r3, #28]
      break;
 8005f80:	e021      	b.n	8005fc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68b9      	ldr	r1, [r7, #8]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fb0b 	bl	80065a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69d9      	ldr	r1, [r3, #28]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	021a      	lsls	r2, r3, #8
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	61da      	str	r2, [r3, #28]
      break;
 8005fc2:	e000      	b.n	8005fc6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005fc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_TIM_ConfigClockSource+0x18>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e0b3      	b.n	8006158 <HAL_TIM_ConfigClockSource+0x180>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800600e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006016:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006028:	d03e      	beq.n	80060a8 <HAL_TIM_ConfigClockSource+0xd0>
 800602a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800602e:	f200 8087 	bhi.w	8006140 <HAL_TIM_ConfigClockSource+0x168>
 8006032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006036:	f000 8085 	beq.w	8006144 <HAL_TIM_ConfigClockSource+0x16c>
 800603a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603e:	d87f      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x168>
 8006040:	2b70      	cmp	r3, #112	; 0x70
 8006042:	d01a      	beq.n	800607a <HAL_TIM_ConfigClockSource+0xa2>
 8006044:	2b70      	cmp	r3, #112	; 0x70
 8006046:	d87b      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x168>
 8006048:	2b60      	cmp	r3, #96	; 0x60
 800604a:	d050      	beq.n	80060ee <HAL_TIM_ConfigClockSource+0x116>
 800604c:	2b60      	cmp	r3, #96	; 0x60
 800604e:	d877      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x168>
 8006050:	2b50      	cmp	r3, #80	; 0x50
 8006052:	d03c      	beq.n	80060ce <HAL_TIM_ConfigClockSource+0xf6>
 8006054:	2b50      	cmp	r3, #80	; 0x50
 8006056:	d873      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x168>
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d058      	beq.n	800610e <HAL_TIM_ConfigClockSource+0x136>
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d86f      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x168>
 8006060:	2b30      	cmp	r3, #48	; 0x30
 8006062:	d064      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x156>
 8006064:	2b30      	cmp	r3, #48	; 0x30
 8006066:	d86b      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x168>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d060      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x156>
 800606c:	2b20      	cmp	r3, #32
 800606e:	d867      	bhi.n	8006140 <HAL_TIM_ConfigClockSource+0x168>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d05c      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x156>
 8006074:	2b10      	cmp	r3, #16
 8006076:	d05a      	beq.n	800612e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006078:	e062      	b.n	8006140 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6899      	ldr	r1, [r3, #8]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	f000 fc85 	bl	8006998 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800609c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	609a      	str	r2, [r3, #8]
      break;
 80060a6:	e04e      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6818      	ldr	r0, [r3, #0]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	6899      	ldr	r1, [r3, #8]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f000 fc6e 	bl	8006998 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	689a      	ldr	r2, [r3, #8]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060ca:	609a      	str	r2, [r3, #8]
      break;
 80060cc:	e03b      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6818      	ldr	r0, [r3, #0]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	6859      	ldr	r1, [r3, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	461a      	mov	r2, r3
 80060dc:	f000 fb2c 	bl	8006738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2150      	movs	r1, #80	; 0x50
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fc3b 	bl	8006962 <TIM_ITRx_SetConfig>
      break;
 80060ec:	e02b      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	6859      	ldr	r1, [r3, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f000 fb88 	bl	8006810 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2160      	movs	r1, #96	; 0x60
 8006106:	4618      	mov	r0, r3
 8006108:	f000 fc2b 	bl	8006962 <TIM_ITRx_SetConfig>
      break;
 800610c:	e01b      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6859      	ldr	r1, [r3, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	461a      	mov	r2, r3
 800611c:	f000 fb0c 	bl	8006738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2140      	movs	r1, #64	; 0x40
 8006126:	4618      	mov	r0, r3
 8006128:	f000 fc1b 	bl	8006962 <TIM_ITRx_SetConfig>
      break;
 800612c:	e00b      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f000 fc12 	bl	8006962 <TIM_ITRx_SetConfig>
        break;
 800613e:	e002      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006144:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a40      	ldr	r2, [pc, #256]	; (80062c4 <TIM_Base_SetConfig+0x114>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d00f      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3d      	ldr	r2, [pc, #244]	; (80062c8 <TIM_Base_SetConfig+0x118>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00b      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3c      	ldr	r2, [pc, #240]	; (80062cc <TIM_Base_SetConfig+0x11c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a3b      	ldr	r2, [pc, #236]	; (80062d0 <TIM_Base_SetConfig+0x120>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a3a      	ldr	r2, [pc, #232]	; (80062d4 <TIM_Base_SetConfig+0x124>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d108      	bne.n	8006202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <TIM_Base_SetConfig+0x114>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d02b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006210:	d027      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2c      	ldr	r2, [pc, #176]	; (80062c8 <TIM_Base_SetConfig+0x118>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d023      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <TIM_Base_SetConfig+0x11c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01f      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2a      	ldr	r2, [pc, #168]	; (80062d0 <TIM_Base_SetConfig+0x120>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a29      	ldr	r2, [pc, #164]	; (80062d4 <TIM_Base_SetConfig+0x124>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d017      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a28      	ldr	r2, [pc, #160]	; (80062d8 <TIM_Base_SetConfig+0x128>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a27      	ldr	r2, [pc, #156]	; (80062dc <TIM_Base_SetConfig+0x12c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00f      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a26      	ldr	r2, [pc, #152]	; (80062e0 <TIM_Base_SetConfig+0x130>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <TIM_Base_SetConfig+0x134>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a24      	ldr	r2, [pc, #144]	; (80062e8 <TIM_Base_SetConfig+0x138>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a23      	ldr	r2, [pc, #140]	; (80062ec <TIM_Base_SetConfig+0x13c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <TIM_Base_SetConfig+0x114>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_Base_SetConfig+0xf8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a0c      	ldr	r2, [pc, #48]	; (80062d4 <TIM_Base_SetConfig+0x124>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d103      	bne.n	80062b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	615a      	str	r2, [r3, #20]
}
 80062b6:	bf00      	nop
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40000c00 	.word	0x40000c00
 80062d4:	40010400 	.word	0x40010400
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800
 80062e4:	40001800 	.word	0x40001800
 80062e8:	40001c00 	.word	0x40001c00
 80062ec:	40002000 	.word	0x40002000

080062f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f023 0201 	bic.w	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f023 0302 	bic.w	r3, r3, #2
 8006338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	4313      	orrs	r3, r2
 8006342:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a20      	ldr	r2, [pc, #128]	; (80063c8 <TIM_OC1_SetConfig+0xd8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_OC1_SetConfig+0x64>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a1f      	ldr	r2, [pc, #124]	; (80063cc <TIM_OC1_SetConfig+0xdc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d10c      	bne.n	800636e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f023 0308 	bic.w	r3, r3, #8
 800635a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f023 0304 	bic.w	r3, r3, #4
 800636c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a15      	ldr	r2, [pc, #84]	; (80063c8 <TIM_OC1_SetConfig+0xd8>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_OC1_SetConfig+0x8e>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a14      	ldr	r2, [pc, #80]	; (80063cc <TIM_OC1_SetConfig+0xdc>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d111      	bne.n	80063a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4313      	orrs	r3, r2
 80063a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	697a      	ldr	r2, [r7, #20]
 80063ba:	621a      	str	r2, [r3, #32]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	40010000 	.word	0x40010000
 80063cc:	40010400 	.word	0x40010400

080063d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	f023 0210 	bic.w	r2, r3, #16
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	021b      	lsls	r3, r3, #8
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	f023 0320 	bic.w	r3, r3, #32
 800641a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <TIM_OC2_SetConfig+0xe4>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC2_SetConfig+0x68>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a21      	ldr	r2, [pc, #132]	; (80064b8 <TIM_OC2_SetConfig+0xe8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d10d      	bne.n	8006454 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800643e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a17      	ldr	r2, [pc, #92]	; (80064b4 <TIM_OC2_SetConfig+0xe4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_OC2_SetConfig+0x94>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a16      	ldr	r2, [pc, #88]	; (80064b8 <TIM_OC2_SetConfig+0xe8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d113      	bne.n	800648c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800646a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	695b      	ldr	r3, [r3, #20]
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	4313      	orrs	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	621a      	str	r2, [r3, #32]
}
 80064a6:	bf00      	nop
 80064a8:	371c      	adds	r7, #28
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40010400 	.word	0x40010400

080064bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	4313      	orrs	r3, r2
 8006510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a21      	ldr	r2, [pc, #132]	; (800659c <TIM_OC3_SetConfig+0xe0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d003      	beq.n	8006522 <TIM_OC3_SetConfig+0x66>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a20      	ldr	r2, [pc, #128]	; (80065a0 <TIM_OC3_SetConfig+0xe4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d10d      	bne.n	800653e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	021b      	lsls	r3, r3, #8
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800653c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a16      	ldr	r2, [pc, #88]	; (800659c <TIM_OC3_SetConfig+0xe0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_OC3_SetConfig+0x92>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a15      	ldr	r2, [pc, #84]	; (80065a0 <TIM_OC3_SetConfig+0xe4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d113      	bne.n	8006576 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800655c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	011b      	lsls	r3, r3, #4
 8006564:	693a      	ldr	r2, [r7, #16]
 8006566:	4313      	orrs	r3, r2
 8006568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	621a      	str	r2, [r3, #32]
}
 8006590:	bf00      	nop
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	40010000 	.word	0x40010000
 80065a0:	40010400 	.word	0x40010400

080065a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	69db      	ldr	r3, [r3, #28]
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	021b      	lsls	r3, r3, #8
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	031b      	lsls	r3, r3, #12
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a12      	ldr	r2, [pc, #72]	; (8006648 <TIM_OC4_SetConfig+0xa4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC4_SetConfig+0x68>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a11      	ldr	r2, [pc, #68]	; (800664c <TIM_OC4_SetConfig+0xa8>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d109      	bne.n	8006620 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	019b      	lsls	r3, r3, #6
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40010000 	.word	0x40010000
 800664c:	40010400 	.word	0x40010400

08006650 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f023 0201 	bic.w	r2, r3, #1
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4a28      	ldr	r2, [pc, #160]	; (800671c <TIM_TI1_SetConfig+0xcc>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d01b      	beq.n	80066b6 <TIM_TI1_SetConfig+0x66>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006684:	d017      	beq.n	80066b6 <TIM_TI1_SetConfig+0x66>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4a25      	ldr	r2, [pc, #148]	; (8006720 <TIM_TI1_SetConfig+0xd0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <TIM_TI1_SetConfig+0x66>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4a24      	ldr	r2, [pc, #144]	; (8006724 <TIM_TI1_SetConfig+0xd4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00f      	beq.n	80066b6 <TIM_TI1_SetConfig+0x66>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	4a23      	ldr	r2, [pc, #140]	; (8006728 <TIM_TI1_SetConfig+0xd8>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00b      	beq.n	80066b6 <TIM_TI1_SetConfig+0x66>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a22      	ldr	r2, [pc, #136]	; (800672c <TIM_TI1_SetConfig+0xdc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <TIM_TI1_SetConfig+0x66>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4a21      	ldr	r2, [pc, #132]	; (8006730 <TIM_TI1_SetConfig+0xe0>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_TI1_SetConfig+0x66>
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	4a20      	ldr	r2, [pc, #128]	; (8006734 <TIM_TI1_SetConfig+0xe4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d101      	bne.n	80066ba <TIM_TI1_SetConfig+0x6a>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <TIM_TI1_SetConfig+0x6c>
 80066ba:	2300      	movs	r3, #0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f023 0303 	bic.w	r3, r3, #3
 80066c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	e003      	b.n	80066da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f043 0301 	orr.w	r3, r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f023 030a 	bic.w	r3, r3, #10
 80066f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f003 030a 	and.w	r3, r3, #10
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	4313      	orrs	r3, r2
 8006700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
 800671a:	bf00      	nop
 800671c:	40010000 	.word	0x40010000
 8006720:	40000400 	.word	0x40000400
 8006724:	40000800 	.word	0x40000800
 8006728:	40000c00 	.word	0x40000c00
 800672c:	40010400 	.word	0x40010400
 8006730:	40014000 	.word	0x40014000
 8006734:	40001800 	.word	0x40001800

08006738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f023 0201 	bic.w	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f023 030a 	bic.w	r3, r3, #10
 8006774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006776:	697a      	ldr	r2, [r7, #20]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006796:	b480      	push	{r7}
 8006798:	b087      	sub	sp, #28
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
 80067a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	f023 0210 	bic.w	r2, r3, #16
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	031b      	lsls	r3, r3, #12
 80067da:	b29b      	uxth	r3, r3
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	4313      	orrs	r3, r2
 80067e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80067e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80067f2:	693a      	ldr	r2, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	621a      	str	r2, [r3, #32]
}
 8006804:	bf00      	nop
 8006806:	371c      	adds	r7, #28
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	f023 0210 	bic.w	r2, r3, #16
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	699b      	ldr	r3, [r3, #24]
 800682c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800683a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	031b      	lsls	r3, r3, #12
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800684c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	011b      	lsls	r3, r3, #4
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	621a      	str	r2, [r3, #32]
}
 8006864:	bf00      	nop
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f023 0303 	bic.w	r3, r3, #3
 800689c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	011b      	lsls	r3, r3, #4
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80068c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	021b      	lsls	r3, r3, #8
 80068c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006914:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	021b      	lsls	r3, r3, #8
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006926:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	031b      	lsls	r3, r3, #12
 800692c:	b29b      	uxth	r3, r3
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800693a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	031b      	lsls	r3, r3, #12
 8006940:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800697a:	683a      	ldr	r2, [r7, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4313      	orrs	r3, r2
 8006980:	f043 0307 	orr.w	r3, r3, #7
 8006984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	609a      	str	r2, [r3, #8]
}
 800698c:	bf00      	nop
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	021a      	lsls	r2, r3, #8
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	4313      	orrs	r3, r2
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	609a      	str	r2, [r3, #8]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr

080069d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 031f 	and.w	r3, r3, #31
 80069ea:	2201      	movs	r2, #1
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1a      	ldr	r2, [r3, #32]
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	43db      	mvns	r3, r3
 80069fa:	401a      	ands	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a1a      	ldr	r2, [r3, #32]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a10:	431a      	orrs	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e05a      	b.n	8006af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2202      	movs	r2, #2
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a21      	ldr	r2, [pc, #132]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d022      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a88:	d01d      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1a      	ldr	r2, [pc, #104]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a15      	ldr	r2, [pc, #84]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d10c      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	40010000 	.word	0x40010000
 8006b04:	40000400 	.word	0x40000400
 8006b08:	40000800 	.word	0x40000800
 8006b0c:	40000c00 	.word	0x40000c00
 8006b10:	40010400 	.word	0x40010400
 8006b14:	40014000 	.word	0x40014000
 8006b18:	40001800 	.word	0x40001800

08006b1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e03d      	b.n	8006bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <__NVIC_SetPriority>:
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	4603      	mov	r3, r0
 8006bf0:	6039      	str	r1, [r7, #0]
 8006bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	db0a      	blt.n	8006c12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	490c      	ldr	r1, [pc, #48]	; (8006c34 <__NVIC_SetPriority+0x4c>)
 8006c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c06:	0112      	lsls	r2, r2, #4
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	440b      	add	r3, r1
 8006c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c10:	e00a      	b.n	8006c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	4908      	ldr	r1, [pc, #32]	; (8006c38 <__NVIC_SetPriority+0x50>)
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	3b04      	subs	r3, #4
 8006c20:	0112      	lsls	r2, r2, #4
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	440b      	add	r3, r1
 8006c26:	761a      	strb	r2, [r3, #24]
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	e000e100 	.word	0xe000e100
 8006c38:	e000ed00 	.word	0xe000ed00

08006c3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <SysTick_Handler+0x1c>)
 8006c42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006c44:	f001 fefa 	bl	8008a3c <xTaskGetSchedulerState>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d001      	beq.n	8006c52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006c4e:	f002 fce3 	bl	8009618 <xPortSysTickHandler>
  }
}
 8006c52:	bf00      	nop
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	e000e010 	.word	0xe000e010

08006c5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006c60:	2100      	movs	r1, #0
 8006c62:	f06f 0004 	mvn.w	r0, #4
 8006c66:	f7ff ffbf 	bl	8006be8 <__NVIC_SetPriority>
#endif
}
 8006c6a:	bf00      	nop
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c76:	f3ef 8305 	mrs	r3, IPSR
 8006c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8006c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006c82:	f06f 0305 	mvn.w	r3, #5
 8006c86:	607b      	str	r3, [r7, #4]
 8006c88:	e00c      	b.n	8006ca4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <osKernelInitialize+0x44>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d105      	bne.n	8006c9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006c92:	4b08      	ldr	r3, [pc, #32]	; (8006cb4 <osKernelInitialize+0x44>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	607b      	str	r3, [r7, #4]
 8006c9c:	e002      	b.n	8006ca4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ca2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ca4:	687b      	ldr	r3, [r7, #4]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	200000a8 	.word	0x200000a8

08006cb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cbe:	f3ef 8305 	mrs	r3, IPSR
 8006cc2:	603b      	str	r3, [r7, #0]
  return(result);
 8006cc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006cca:	f06f 0305 	mvn.w	r3, #5
 8006cce:	607b      	str	r3, [r7, #4]
 8006cd0:	e010      	b.n	8006cf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <osKernelStart+0x48>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d109      	bne.n	8006cee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006cda:	f7ff ffbf 	bl	8006c5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006cde:	4b08      	ldr	r3, [pc, #32]	; (8006d00 <osKernelStart+0x48>)
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ce4:	f001 fa62 	bl	80081ac <vTaskStartScheduler>
      stat = osOK;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	e002      	b.n	8006cf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006cf4:	687b      	ldr	r3, [r7, #4]
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	200000a8 	.word	0x200000a8

08006d04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08e      	sub	sp, #56	; 0x38
 8006d08:	af04      	add	r7, sp, #16
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d14:	f3ef 8305 	mrs	r3, IPSR
 8006d18:	617b      	str	r3, [r7, #20]
  return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d17e      	bne.n	8006e1e <osThreadNew+0x11a>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d07b      	beq.n	8006e1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006d26:	2380      	movs	r3, #128	; 0x80
 8006d28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006d2a:	2318      	movs	r3, #24
 8006d2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d045      	beq.n	8006dca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <osThreadNew+0x48>
        name = attr->name;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d008      	beq.n	8006d72 <osThreadNew+0x6e>
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	2b38      	cmp	r3, #56	; 0x38
 8006d64:	d805      	bhi.n	8006d72 <osThreadNew+0x6e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <osThreadNew+0x72>
        return (NULL);
 8006d72:	2300      	movs	r3, #0
 8006d74:	e054      	b.n	8006e20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	089b      	lsrs	r3, r3, #2
 8006d84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00e      	beq.n	8006dac <osThreadNew+0xa8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	2b5b      	cmp	r3, #91	; 0x5b
 8006d94:	d90a      	bls.n	8006dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d006      	beq.n	8006dac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <osThreadNew+0xa8>
        mem = 1;
 8006da6:	2301      	movs	r3, #1
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	e010      	b.n	8006dce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10c      	bne.n	8006dce <osThreadNew+0xca>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d108      	bne.n	8006dce <osThreadNew+0xca>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d104      	bne.n	8006dce <osThreadNew+0xca>
          mem = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61bb      	str	r3, [r7, #24]
 8006dc8:	e001      	b.n	8006dce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d110      	bne.n	8006df6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ddc:	9202      	str	r2, [sp, #8]
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	6a3a      	ldr	r2, [r7, #32]
 8006de8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f000 ff96 	bl	8007d1c <xTaskCreateStatic>
 8006df0:	4603      	mov	r3, r0
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	e013      	b.n	8006e1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d110      	bne.n	8006e1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	f107 0310 	add.w	r3, r7, #16
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 ffe1 	bl	8007dd6 <xTaskCreate>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d001      	beq.n	8006e1e <osThreadNew+0x11a>
            hTask = NULL;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006e1e:	693b      	ldr	r3, [r7, #16]
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3728      	adds	r7, #40	; 0x28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e30:	f3ef 8305 	mrs	r3, IPSR
 8006e34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <osDelay+0x1c>
    stat = osErrorISR;
 8006e3c:	f06f 0305 	mvn.w	r3, #5
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	e007      	b.n	8006e54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006e44:	2300      	movs	r3, #0
 8006e46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 f978 	bl	8008144 <vTaskDelay>
    }
  }

  return (stat);
 8006e54:	68fb      	ldr	r3, [r7, #12]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b08a      	sub	sp, #40	; 0x28
 8006e62:	af02      	add	r7, sp, #8
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e6e:	f3ef 8305 	mrs	r3, IPSR
 8006e72:	613b      	str	r3, [r7, #16]
  return(result);
 8006e74:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d15f      	bne.n	8006f3a <osMessageQueueNew+0xdc>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d05c      	beq.n	8006f3a <osMessageQueueNew+0xdc>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d059      	beq.n	8006f3a <osMessageQueueNew+0xdc>
    mem = -1;
 8006e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d029      	beq.n	8006ee6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d012      	beq.n	8006ec0 <osMessageQueueNew+0x62>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	2b4f      	cmp	r3, #79	; 0x4f
 8006ea0:	d90e      	bls.n	8006ec0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695a      	ldr	r2, [r3, #20]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	fb01 f303 	mul.w	r3, r1, r3
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d302      	bcc.n	8006ec0 <osMessageQueueNew+0x62>
        mem = 1;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	e014      	b.n	8006eea <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d110      	bne.n	8006eea <osMessageQueueNew+0x8c>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10c      	bne.n	8006eea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d108      	bne.n	8006eea <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d104      	bne.n	8006eea <osMessageQueueNew+0x8c>
          mem = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	61bb      	str	r3, [r7, #24]
 8006ee4:	e001      	b.n	8006eea <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d10b      	bne.n	8006f08 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	2100      	movs	r1, #0
 8006efa:	9100      	str	r1, [sp, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 f9ce 	bl	80072a0 <xQueueGenericCreateStatic>
 8006f04:	61f8      	str	r0, [r7, #28]
 8006f06:	e008      	b.n	8006f1a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d105      	bne.n	8006f1a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006f0e:	2200      	movs	r2, #0
 8006f10:	68b9      	ldr	r1, [r7, #8]
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 fa3c 	bl	8007390 <xQueueGenericCreate>
 8006f18:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00c      	beq.n	8006f3a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <osMessageQueueNew+0xd0>
        name = attr->name;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e001      	b.n	8006f32 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006f32:	6979      	ldr	r1, [r7, #20]
 8006f34:	69f8      	ldr	r0, [r7, #28]
 8006f36:	f000 fe93 	bl	8007c60 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006f3a:	69fb      	ldr	r3, [r7, #28]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3720      	adds	r7, #32
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5a:	f3ef 8305 	mrs	r3, IPSR
 8006f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8006f60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d028      	beq.n	8006fb8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <osMessageQueueGet+0x34>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <osMessageQueueGet+0x34>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006f78:	f06f 0303 	mvn.w	r3, #3
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	e037      	b.n	8006ff0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f84:	f107 0310 	add.w	r3, r7, #16
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	69b8      	ldr	r0, [r7, #24]
 8006f8e:	f000 fcd7 	bl	8007940 <xQueueReceiveFromISR>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d003      	beq.n	8006fa0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006f98:	f06f 0302 	mvn.w	r3, #2
 8006f9c:	61fb      	str	r3, [r7, #28]
 8006f9e:	e027      	b.n	8006ff0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d024      	beq.n	8006ff0 <osMessageQueueGet+0xac>
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <osMessageQueueGet+0xb8>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	e01b      	b.n	8006ff0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <osMessageQueueGet+0x80>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006fc4:	f06f 0303 	mvn.w	r3, #3
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	e011      	b.n	8006ff0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	69b8      	ldr	r0, [r7, #24]
 8006fd2:	f000 fbd5 	bl	8007780 <xQueueReceive>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d009      	beq.n	8006ff0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006fe2:	f06f 0301 	mvn.w	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e002      	b.n	8006ff0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006fea:	f06f 0302 	mvn.w	r3, #2
 8006fee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a07      	ldr	r2, [pc, #28]	; (800702c <vApplicationGetIdleTaskMemory+0x2c>)
 8007010:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4a06      	ldr	r2, [pc, #24]	; (8007030 <vApplicationGetIdleTaskMemory+0x30>)
 8007016:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2280      	movs	r2, #128	; 0x80
 800701c:	601a      	str	r2, [r3, #0]
}
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	200000ac 	.word	0x200000ac
 8007030:	20000108 	.word	0x20000108

08007034 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a07      	ldr	r2, [pc, #28]	; (8007060 <vApplicationGetTimerTaskMemory+0x2c>)
 8007044:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4a06      	ldr	r2, [pc, #24]	; (8007064 <vApplicationGetTimerTaskMemory+0x30>)
 800704a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007052:	601a      	str	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000308 	.word	0x20000308
 8007064:	20000364 	.word	0x20000364

08007068 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f103 0208 	add.w	r2, r3, #8
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007080:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f103 0208 	add.w	r2, r3, #8
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f103 0208 	add.w	r2, r3, #8
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	683a      	ldr	r2, [r7, #0]
 80070e6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800710a:	b480      	push	{r7}
 800710c:	b085      	sub	sp, #20
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007120:	d103      	bne.n	800712a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	e00c      	b.n	8007144 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3308      	adds	r3, #8
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	e002      	b.n	8007138 <vListInsert+0x2e>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	429a      	cmp	r2, r3
 8007142:	d2f6      	bcs.n	8007132 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	683a      	ldr	r2, [r7, #0]
 8007152:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	601a      	str	r2, [r3, #0]
}
 8007170:	bf00      	nop
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	6892      	ldr	r2, [r2, #8]
 8007192:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6852      	ldr	r2, [r2, #4]
 800719c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d103      	bne.n	80071b0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	1e5a      	subs	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10a      	bne.n	80071fa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071fa:	f002 f97b 	bl	80094f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800720a:	fb01 f303 	mul.w	r3, r1, r3
 800720e:	441a      	add	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722a:	3b01      	subs	r3, #1
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007230:	fb01 f303 	mul.w	r3, r1, r3
 8007234:	441a      	add	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	22ff      	movs	r2, #255	; 0xff
 800723e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	22ff      	movs	r2, #255	; 0xff
 8007246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d114      	bne.n	800727a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d01a      	beq.n	800728e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3310      	adds	r3, #16
 800725c:	4618      	mov	r0, r3
 800725e:	f001 fa2f 	bl	80086c0 <xTaskRemoveFromEventList>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d012      	beq.n	800728e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007268:	4b0c      	ldr	r3, [pc, #48]	; (800729c <xQueueGenericReset+0xcc>)
 800726a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	e009      	b.n	800728e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	3310      	adds	r3, #16
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff fef2 	bl	8007068 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	3324      	adds	r3, #36	; 0x24
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff feed 	bl	8007068 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800728e:	f002 f961 	bl	8009554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007292:	2301      	movs	r3, #1
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	e000ed04 	.word	0xe000ed04

080072a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08e      	sub	sp, #56	; 0x38
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80072b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b8:	f383 8811 	msr	BASEPRI, r3
 80072bc:	f3bf 8f6f 	isb	sy
 80072c0:	f3bf 8f4f 	dsb	sy
 80072c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80072c6:	bf00      	nop
 80072c8:	e7fe      	b.n	80072c8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <xQueueGenericCreateStatic+0x52>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <xQueueGenericCreateStatic+0x56>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e000      	b.n	80072f8 <xQueueGenericCreateStatic+0x58>
 80072f6:	2300      	movs	r3, #0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	623b      	str	r3, [r7, #32]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d102      	bne.n	800731e <xQueueGenericCreateStatic+0x7e>
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <xQueueGenericCreateStatic+0x82>
 800731e:	2301      	movs	r3, #1
 8007320:	e000      	b.n	8007324 <xQueueGenericCreateStatic+0x84>
 8007322:	2300      	movs	r3, #0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	61fb      	str	r3, [r7, #28]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800733e:	2350      	movs	r3, #80	; 0x50
 8007340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	2b50      	cmp	r3, #80	; 0x50
 8007346:	d00a      	beq.n	800735e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	61bb      	str	r3, [r7, #24]
}
 800735a:	bf00      	nop
 800735c:	e7fe      	b.n	800735c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800735e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d00d      	beq.n	8007386 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	2201      	movs	r2, #1
 800736e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007372:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	4613      	mov	r3, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	68b9      	ldr	r1, [r7, #8]
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 f83f 	bl	8007404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007388:	4618      	mov	r0, r3
 800738a:	3730      	adds	r7, #48	; 0x30
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	; 0x28
 8007394:	af02      	add	r7, sp, #8
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	4613      	mov	r3, r2
 800739c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10a      	bne.n	80073ba <xQueueGenericCreate+0x2a>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	613b      	str	r3, [r7, #16]
}
 80073b6:	bf00      	nop
 80073b8:	e7fe      	b.n	80073b8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	fb02 f303 	mul.w	r3, r2, r3
 80073c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	3350      	adds	r3, #80	; 0x50
 80073c8:	4618      	mov	r0, r3
 80073ca:	f002 f9b5 	bl	8009738 <pvPortMalloc>
 80073ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d011      	beq.n	80073fa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	3350      	adds	r3, #80	; 0x50
 80073de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073e8:	79fa      	ldrb	r2, [r7, #7]
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	9300      	str	r3, [sp, #0]
 80073ee:	4613      	mov	r3, r2
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f805 	bl	8007404 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073fa:	69bb      	ldr	r3, [r7, #24]
	}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
 8007410:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d103      	bne.n	8007420 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	69ba      	ldr	r2, [r7, #24]
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	e002      	b.n	8007426 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007432:	2101      	movs	r1, #1
 8007434:	69b8      	ldr	r0, [r7, #24]
 8007436:	f7ff fecb 	bl	80071d0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007442:	bf00      	nop
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b08e      	sub	sp, #56	; 0x38
 8007450:	af00      	add	r7, sp, #0
 8007452:	60f8      	str	r0, [r7, #12]
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	607a      	str	r2, [r7, #4]
 8007458:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800745a:	2300      	movs	r3, #0
 800745c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10a      	bne.n	800747e <xQueueGenericSend+0x32>
	__asm volatile
 8007468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746c:	f383 8811 	msr	BASEPRI, r3
 8007470:	f3bf 8f6f 	isb	sy
 8007474:	f3bf 8f4f 	dsb	sy
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800747a:	bf00      	nop
 800747c:	e7fe      	b.n	800747c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d103      	bne.n	800748c <xQueueGenericSend+0x40>
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <xQueueGenericSend+0x44>
 800748c:	2301      	movs	r3, #1
 800748e:	e000      	b.n	8007492 <xQueueGenericSend+0x46>
 8007490:	2300      	movs	r3, #0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <xQueueGenericSend+0x60>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074a8:	bf00      	nop
 80074aa:	e7fe      	b.n	80074aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b02      	cmp	r3, #2
 80074b0:	d103      	bne.n	80074ba <xQueueGenericSend+0x6e>
 80074b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d101      	bne.n	80074be <xQueueGenericSend+0x72>
 80074ba:	2301      	movs	r3, #1
 80074bc:	e000      	b.n	80074c0 <xQueueGenericSend+0x74>
 80074be:	2300      	movs	r3, #0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <xQueueGenericSend+0x8e>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	623b      	str	r3, [r7, #32]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074da:	f001 faaf 	bl	8008a3c <xTaskGetSchedulerState>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d102      	bne.n	80074ea <xQueueGenericSend+0x9e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <xQueueGenericSend+0xa2>
 80074ea:	2301      	movs	r3, #1
 80074ec:	e000      	b.n	80074f0 <xQueueGenericSend+0xa4>
 80074ee:	2300      	movs	r3, #0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10a      	bne.n	800750a <xQueueGenericSend+0xbe>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	61fb      	str	r3, [r7, #28]
}
 8007506:	bf00      	nop
 8007508:	e7fe      	b.n	8007508 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800750a:	f001 fff3 	bl	80094f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007516:	429a      	cmp	r2, r3
 8007518:	d302      	bcc.n	8007520 <xQueueGenericSend+0xd4>
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b02      	cmp	r3, #2
 800751e:	d129      	bne.n	8007574 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007526:	f000 fa8b 	bl	8007a40 <prvCopyDataToQueue>
 800752a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d010      	beq.n	8007556 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007536:	3324      	adds	r3, #36	; 0x24
 8007538:	4618      	mov	r0, r3
 800753a:	f001 f8c1 	bl	80086c0 <xTaskRemoveFromEventList>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d013      	beq.n	800756c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007544:	4b3f      	ldr	r3, [pc, #252]	; (8007644 <xQueueGenericSend+0x1f8>)
 8007546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	f3bf 8f6f 	isb	sy
 8007554:	e00a      	b.n	800756c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	2b00      	cmp	r3, #0
 800755a:	d007      	beq.n	800756c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800755c:	4b39      	ldr	r3, [pc, #228]	; (8007644 <xQueueGenericSend+0x1f8>)
 800755e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	f3bf 8f4f 	dsb	sy
 8007568:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800756c:	f001 fff2 	bl	8009554 <vPortExitCritical>
				return pdPASS;
 8007570:	2301      	movs	r3, #1
 8007572:	e063      	b.n	800763c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d103      	bne.n	8007582 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800757a:	f001 ffeb 	bl	8009554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800757e:	2300      	movs	r3, #0
 8007580:	e05c      	b.n	800763c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007584:	2b00      	cmp	r3, #0
 8007586:	d106      	bne.n	8007596 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007588:	f107 0314 	add.w	r3, r7, #20
 800758c:	4618      	mov	r0, r3
 800758e:	f001 f8fb 	bl	8008788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007592:	2301      	movs	r3, #1
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007596:	f001 ffdd 	bl	8009554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800759a:	f000 fe6d 	bl	8008278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800759e:	f001 ffa9 	bl	80094f4 <vPortEnterCritical>
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075a8:	b25b      	sxtb	r3, r3
 80075aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075ae:	d103      	bne.n	80075b8 <xQueueGenericSend+0x16c>
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075be:	b25b      	sxtb	r3, r3
 80075c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075c4:	d103      	bne.n	80075ce <xQueueGenericSend+0x182>
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ce:	f001 ffc1 	bl	8009554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075d2:	1d3a      	adds	r2, r7, #4
 80075d4:	f107 0314 	add.w	r3, r7, #20
 80075d8:	4611      	mov	r1, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f8ea 	bl	80087b4 <xTaskCheckForTimeOut>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d124      	bne.n	8007630 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075e8:	f000 fb22 	bl	8007c30 <prvIsQueueFull>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d018      	beq.n	8007624 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	3310      	adds	r3, #16
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 f810 	bl	8008620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007602:	f000 faad 	bl	8007b60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007606:	f000 fe45 	bl	8008294 <xTaskResumeAll>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	f47f af7c 	bne.w	800750a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007612:	4b0c      	ldr	r3, [pc, #48]	; (8007644 <xQueueGenericSend+0x1f8>)
 8007614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	e772      	b.n	800750a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007624:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007626:	f000 fa9b 	bl	8007b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800762a:	f000 fe33 	bl	8008294 <xTaskResumeAll>
 800762e:	e76c      	b.n	800750a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007632:	f000 fa95 	bl	8007b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007636:	f000 fe2d 	bl	8008294 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800763a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800763c:	4618      	mov	r0, r3
 800763e:	3738      	adds	r7, #56	; 0x38
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	e000ed04 	.word	0xe000ed04

08007648 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b090      	sub	sp, #64	; 0x40
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800765a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <xQueueGenericSendFromISR+0x3c>
 800767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <xQueueGenericSendFromISR+0x40>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <xQueueGenericSendFromISR+0x42>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d103      	bne.n	80076b2 <xQueueGenericSendFromISR+0x6a>
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <xQueueGenericSendFromISR+0x6e>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <xQueueGenericSendFromISR+0x70>
 80076b6:	2300      	movs	r3, #0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10a      	bne.n	80076d2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	623b      	str	r3, [r7, #32]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076d2:	f001 fff1 	bl	80096b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80076d6:	f3ef 8211 	mrs	r2, BASEPRI
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	61fa      	str	r2, [r7, #28]
 80076ec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80076ee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80076f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d302      	bcc.n	8007704 <xQueueGenericSendFromISR+0xbc>
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d12f      	bne.n	8007764 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800770a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800771a:	f000 f991 	bl	8007a40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800771e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007726:	d112      	bne.n	800774e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772c:	2b00      	cmp	r3, #0
 800772e:	d016      	beq.n	800775e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	3324      	adds	r3, #36	; 0x24
 8007734:	4618      	mov	r0, r3
 8007736:	f000 ffc3 	bl	80086c0 <xTaskRemoveFromEventList>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00e      	beq.n	800775e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00b      	beq.n	800775e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	e007      	b.n	800775e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800774e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007752:	3301      	adds	r3, #1
 8007754:	b2db      	uxtb	r3, r3
 8007756:	b25a      	sxtb	r2, r3
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800775e:	2301      	movs	r3, #1
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007762:	e001      	b.n	8007768 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007764:	2300      	movs	r3, #0
 8007766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800776a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007772:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007776:	4618      	mov	r0, r3
 8007778:	3740      	adds	r7, #64	; 0x40
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08c      	sub	sp, #48	; 0x30
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800778c:	2300      	movs	r3, #0
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10a      	bne.n	80077b0 <xQueueReceive+0x30>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	f383 8811 	msr	BASEPRI, r3
 80077a2:	f3bf 8f6f 	isb	sy
 80077a6:	f3bf 8f4f 	dsb	sy
 80077aa:	623b      	str	r3, [r7, #32]
}
 80077ac:	bf00      	nop
 80077ae:	e7fe      	b.n	80077ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d103      	bne.n	80077be <xQueueReceive+0x3e>
 80077b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <xQueueReceive+0x42>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <xQueueReceive+0x44>
 80077c2:	2300      	movs	r3, #0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <xQueueReceive+0x5e>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	61fb      	str	r3, [r7, #28]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077de:	f001 f92d 	bl	8008a3c <xTaskGetSchedulerState>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d102      	bne.n	80077ee <xQueueReceive+0x6e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <xQueueReceive+0x72>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e000      	b.n	80077f4 <xQueueReceive+0x74>
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <xQueueReceive+0x8e>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	61bb      	str	r3, [r7, #24]
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800780e:	f001 fe71 	bl	80094f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007816:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	2b00      	cmp	r3, #0
 800781c:	d01f      	beq.n	800785e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007822:	f000 f977 	bl	8007b14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	1e5a      	subs	r2, r3, #1
 800782a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800782e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00f      	beq.n	8007856 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007838:	3310      	adds	r3, #16
 800783a:	4618      	mov	r0, r3
 800783c:	f000 ff40 	bl	80086c0 <xTaskRemoveFromEventList>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007846:	4b3d      	ldr	r3, [pc, #244]	; (800793c <xQueueReceive+0x1bc>)
 8007848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	f3bf 8f4f 	dsb	sy
 8007852:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007856:	f001 fe7d 	bl	8009554 <vPortExitCritical>
				return pdPASS;
 800785a:	2301      	movs	r3, #1
 800785c:	e069      	b.n	8007932 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d103      	bne.n	800786c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007864:	f001 fe76 	bl	8009554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007868:	2300      	movs	r3, #0
 800786a:	e062      	b.n	8007932 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d106      	bne.n	8007880 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007872:	f107 0310 	add.w	r3, r7, #16
 8007876:	4618      	mov	r0, r3
 8007878:	f000 ff86 	bl	8008788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800787c:	2301      	movs	r3, #1
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007880:	f001 fe68 	bl	8009554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007884:	f000 fcf8 	bl	8008278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007888:	f001 fe34 	bl	80094f4 <vPortEnterCritical>
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007892:	b25b      	sxtb	r3, r3
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007898:	d103      	bne.n	80078a2 <xQueueReceive+0x122>
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078a8:	b25b      	sxtb	r3, r3
 80078aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ae:	d103      	bne.n	80078b8 <xQueueReceive+0x138>
 80078b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078b8:	f001 fe4c 	bl	8009554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078bc:	1d3a      	adds	r2, r7, #4
 80078be:	f107 0310 	add.w	r3, r7, #16
 80078c2:	4611      	mov	r1, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 ff75 	bl	80087b4 <xTaskCheckForTimeOut>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d123      	bne.n	8007918 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078d2:	f000 f997 	bl	8007c04 <prvIsQueueEmpty>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d017      	beq.n	800790c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	3324      	adds	r3, #36	; 0x24
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	4611      	mov	r1, r2
 80078e4:	4618      	mov	r0, r3
 80078e6:	f000 fe9b 	bl	8008620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078ec:	f000 f938 	bl	8007b60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80078f0:	f000 fcd0 	bl	8008294 <xTaskResumeAll>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d189      	bne.n	800780e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80078fa:	4b10      	ldr	r3, [pc, #64]	; (800793c <xQueueReceive+0x1bc>)
 80078fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007900:	601a      	str	r2, [r3, #0]
 8007902:	f3bf 8f4f 	dsb	sy
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	e780      	b.n	800780e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800790c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800790e:	f000 f927 	bl	8007b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007912:	f000 fcbf 	bl	8008294 <xTaskResumeAll>
 8007916:	e77a      	b.n	800780e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007918:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791a:	f000 f921 	bl	8007b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800791e:	f000 fcb9 	bl	8008294 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007924:	f000 f96e 	bl	8007c04 <prvIsQueueEmpty>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	f43f af6f 	beq.w	800780e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007930:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007932:	4618      	mov	r0, r3
 8007934:	3730      	adds	r7, #48	; 0x30
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	e000ed04 	.word	0xe000ed04

08007940 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b08e      	sub	sp, #56	; 0x38
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	623b      	str	r3, [r7, #32]
}
 8007968:	bf00      	nop
 800796a:	e7fe      	b.n	800796a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d103      	bne.n	800797a <xQueueReceiveFromISR+0x3a>
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <xQueueReceiveFromISR+0x3e>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <xQueueReceiveFromISR+0x40>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10a      	bne.n	800799a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	61fb      	str	r3, [r7, #28]
}
 8007996:	bf00      	nop
 8007998:	e7fe      	b.n	8007998 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800799a:	f001 fe8d 	bl	80096b8 <vPortValidateInterruptPriority>
	__asm volatile
 800799e:	f3ef 8211 	mrs	r2, BASEPRI
 80079a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	61ba      	str	r2, [r7, #24]
 80079b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80079b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d02f      	beq.n	8007a26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079d0:	68b9      	ldr	r1, [r7, #8]
 80079d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079d4:	f000 f89e 	bl	8007b14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079da:	1e5a      	subs	r2, r3, #1
 80079dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80079e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80079e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079e8:	d112      	bne.n	8007a10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	691b      	ldr	r3, [r3, #16]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d016      	beq.n	8007a20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	3310      	adds	r3, #16
 80079f6:	4618      	mov	r0, r3
 80079f8:	f000 fe62 	bl	80086c0 <xTaskRemoveFromEventList>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d00e      	beq.n	8007a20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	e007      	b.n	8007a20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a14:	3301      	adds	r3, #1
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	b25a      	sxtb	r2, r3
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007a20:	2301      	movs	r3, #1
 8007a22:	637b      	str	r3, [r7, #52]	; 0x34
 8007a24:	e001      	b.n	8007a2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007a26:	2300      	movs	r3, #0
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f383 8811 	msr	BASEPRI, r3
}
 8007a34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3738      	adds	r7, #56	; 0x38
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10d      	bne.n	8007a7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d14d      	bne.n	8007b02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f001 f804 	bl	8008a78 <xTaskPriorityDisinherit>
 8007a70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	609a      	str	r2, [r3, #8]
 8007a78:	e043      	b.n	8007b02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d119      	bne.n	8007ab4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6858      	ldr	r0, [r3, #4]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	461a      	mov	r2, r3
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	f002 f878 	bl	8009b80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	441a      	add	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	685a      	ldr	r2, [r3, #4]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d32b      	bcc.n	8007b02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	605a      	str	r2, [r3, #4]
 8007ab2:	e026      	b.n	8007b02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	68d8      	ldr	r0, [r3, #12]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abc:	461a      	mov	r2, r3
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	f002 f85e 	bl	8009b80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007acc:	425b      	negs	r3, r3
 8007ace:	441a      	add	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	68da      	ldr	r2, [r3, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d207      	bcs.n	8007af0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	425b      	negs	r3, r3
 8007aea:	441a      	add	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d105      	bne.n	8007b02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	3b01      	subs	r3, #1
 8007b00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b0a:	697b      	ldr	r3, [r7, #20]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3718      	adds	r7, #24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d018      	beq.n	8007b58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	441a      	add	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	68da      	ldr	r2, [r3, #12]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d303      	bcc.n	8007b48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	68d9      	ldr	r1, [r3, #12]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b50:	461a      	mov	r2, r3
 8007b52:	6838      	ldr	r0, [r7, #0]
 8007b54:	f002 f814 	bl	8009b80 <memcpy>
	}
}
 8007b58:	bf00      	nop
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b68:	f001 fcc4 	bl	80094f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b74:	e011      	b.n	8007b9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d012      	beq.n	8007ba4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3324      	adds	r3, #36	; 0x24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 fd9c 	bl	80086c0 <xTaskRemoveFromEventList>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b8e:	f000 fe73 	bl	8008878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	dce9      	bgt.n	8007b76 <prvUnlockQueue+0x16>
 8007ba2:	e000      	b.n	8007ba6 <prvUnlockQueue+0x46>
					break;
 8007ba4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	22ff      	movs	r2, #255	; 0xff
 8007baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007bae:	f001 fcd1 	bl	8009554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007bb2:	f001 fc9f 	bl	80094f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007bbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007bbe:	e011      	b.n	8007be4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d012      	beq.n	8007bee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	3310      	adds	r3, #16
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fd77 	bl	80086c0 <xTaskRemoveFromEventList>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007bd8:	f000 fe4e 	bl	8008878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007bdc:	7bbb      	ldrb	r3, [r7, #14]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b2db      	uxtb	r3, r3
 8007be2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	dce9      	bgt.n	8007bc0 <prvUnlockQueue+0x60>
 8007bec:	e000      	b.n	8007bf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007bee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	22ff      	movs	r2, #255	; 0xff
 8007bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007bf8:	f001 fcac 	bl	8009554 <vPortExitCritical>
}
 8007bfc:	bf00      	nop
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}

08007c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c0c:	f001 fc72 	bl	80094f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	60fb      	str	r3, [r7, #12]
 8007c1c:	e001      	b.n	8007c22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c22:	f001 fc97 	bl	8009554 <vPortExitCritical>

	return xReturn;
 8007c26:	68fb      	ldr	r3, [r7, #12]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c38:	f001 fc5c 	bl	80094f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d102      	bne.n	8007c4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	e001      	b.n	8007c52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c52:	f001 fc7f 	bl	8009554 <vPortExitCritical>

	return xReturn;
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	e014      	b.n	8007c9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c70:	4a0f      	ldr	r2, [pc, #60]	; (8007cb0 <vQueueAddToRegistry+0x50>)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10b      	bne.n	8007c94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c7c:	490c      	ldr	r1, [pc, #48]	; (8007cb0 <vQueueAddToRegistry+0x50>)
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c86:	4a0a      	ldr	r2, [pc, #40]	; (8007cb0 <vQueueAddToRegistry+0x50>)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	00db      	lsls	r3, r3, #3
 8007c8c:	4413      	add	r3, r2
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c92:	e006      	b.n	8007ca2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	3301      	adds	r3, #1
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2b07      	cmp	r3, #7
 8007c9e:	d9e7      	bls.n	8007c70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007ca0:	bf00      	nop
 8007ca2:	bf00      	nop
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	20004d5c 	.word	0x20004d5c

08007cb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007cc4:	f001 fc16 	bl	80094f4 <vPortEnterCritical>
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cce:	b25b      	sxtb	r3, r3
 8007cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd4:	d103      	bne.n	8007cde <vQueueWaitForMessageRestricted+0x2a>
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ce4:	b25b      	sxtb	r3, r3
 8007ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cea:	d103      	bne.n	8007cf4 <vQueueWaitForMessageRestricted+0x40>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cf4:	f001 fc2e 	bl	8009554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	3324      	adds	r3, #36	; 0x24
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	68b9      	ldr	r1, [r7, #8]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fcad 	bl	8008668 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d0e:	6978      	ldr	r0, [r7, #20]
 8007d10:	f7ff ff26 	bl	8007b60 <prvUnlockQueue>
	}
 8007d14:	bf00      	nop
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b08e      	sub	sp, #56	; 0x38
 8007d20:	af04      	add	r7, sp, #16
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10a      	bne.n	8007d46 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d34:	f383 8811 	msr	BASEPRI, r3
 8007d38:	f3bf 8f6f 	isb	sy
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	623b      	str	r3, [r7, #32]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <xTaskCreateStatic+0x46>
	__asm volatile
 8007d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d50:	f383 8811 	msr	BASEPRI, r3
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	f3bf 8f4f 	dsb	sy
 8007d5c:	61fb      	str	r3, [r7, #28]
}
 8007d5e:	bf00      	nop
 8007d60:	e7fe      	b.n	8007d60 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d62:	235c      	movs	r3, #92	; 0x5c
 8007d64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b5c      	cmp	r3, #92	; 0x5c
 8007d6a:	d00a      	beq.n	8007d82 <xTaskCreateStatic+0x66>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	61bb      	str	r3, [r7, #24]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d01e      	beq.n	8007dc8 <xTaskCreateStatic+0xac>
 8007d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01b      	beq.n	8007dc8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d98:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007da2:	2300      	movs	r3, #0
 8007da4:	9303      	str	r3, [sp, #12]
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	f107 0314 	add.w	r3, r7, #20
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	68b9      	ldr	r1, [r7, #8]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f850 	bl	8007e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dc2:	f000 f8dd 	bl	8007f80 <prvAddNewTaskToReadyList>
 8007dc6:	e001      	b.n	8007dcc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007dcc:	697b      	ldr	r3, [r7, #20]
	}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3728      	adds	r7, #40	; 0x28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b08c      	sub	sp, #48	; 0x30
 8007dda:	af04      	add	r7, sp, #16
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	603b      	str	r3, [r7, #0]
 8007de2:	4613      	mov	r3, r2
 8007de4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007de6:	88fb      	ldrh	r3, [r7, #6]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 fca4 	bl	8009738 <pvPortMalloc>
 8007df0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00e      	beq.n	8007e16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007df8:	205c      	movs	r0, #92	; 0x5c
 8007dfa:	f001 fc9d 	bl	8009738 <pvPortMalloc>
 8007dfe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	697a      	ldr	r2, [r7, #20]
 8007e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8007e0c:	e005      	b.n	8007e1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e0e:	6978      	ldr	r0, [r7, #20]
 8007e10:	f001 fd5e 	bl	80098d0 <vPortFree>
 8007e14:	e001      	b.n	8007e1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d017      	beq.n	8007e50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e28:	88fa      	ldrh	r2, [r7, #6]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9303      	str	r3, [sp, #12]
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	9301      	str	r3, [sp, #4]
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	68b9      	ldr	r1, [r7, #8]
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f80e 	bl	8007e60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e44:	69f8      	ldr	r0, [r7, #28]
 8007e46:	f000 f89b 	bl	8007f80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	61bb      	str	r3, [r7, #24]
 8007e4e:	e002      	b.n	8007e56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e56:	69bb      	ldr	r3, [r7, #24]
	}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3720      	adds	r7, #32
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b088      	sub	sp, #32
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	461a      	mov	r2, r3
 8007e78:	21a5      	movs	r1, #165	; 0xa5
 8007e7a:	f001 fe8f 	bl	8009b9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e90:	69bb      	ldr	r3, [r7, #24]
 8007e92:	f023 0307 	bic.w	r3, r3, #7
 8007e96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	f003 0307 	and.w	r3, r3, #7
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	617b      	str	r3, [r7, #20]
}
 8007eb4:	bf00      	nop
 8007eb6:	e7fe      	b.n	8007eb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01f      	beq.n	8007efe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	61fb      	str	r3, [r7, #28]
 8007ec2:	e012      	b.n	8007eea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ec4:	68ba      	ldr	r2, [r7, #8]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	7819      	ldrb	r1, [r3, #0]
 8007ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	3334      	adds	r3, #52	; 0x34
 8007ed4:	460a      	mov	r2, r1
 8007ed6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ed8:	68ba      	ldr	r2, [r7, #8]
 8007eda:	69fb      	ldr	r3, [r7, #28]
 8007edc:	4413      	add	r3, r2
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d006      	beq.n	8007ef2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	2b0f      	cmp	r3, #15
 8007eee:	d9e9      	bls.n	8007ec4 <prvInitialiseNewTask+0x64>
 8007ef0:	e000      	b.n	8007ef4 <prvInitialiseNewTask+0x94>
			{
				break;
 8007ef2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007efc:	e003      	b.n	8007f06 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	2b37      	cmp	r3, #55	; 0x37
 8007f0a:	d901      	bls.n	8007f10 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f0c:	2337      	movs	r3, #55	; 0x37
 8007f0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2200      	movs	r2, #0
 8007f20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f24:	3304      	adds	r3, #4
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff f8be 	bl	80070a8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	3318      	adds	r3, #24
 8007f30:	4618      	mov	r0, r3
 8007f32:	f7ff f8b9 	bl	80070a8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	2200      	movs	r2, #0
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f5a:	683a      	ldr	r2, [r7, #0]
 8007f5c:	68f9      	ldr	r1, [r7, #12]
 8007f5e:	69b8      	ldr	r0, [r7, #24]
 8007f60:	f001 f99a 	bl	8009298 <pxPortInitialiseStack>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d002      	beq.n	8007f76 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f76:	bf00      	nop
 8007f78:	3720      	adds	r7, #32
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f88:	f001 fab4 	bl	80094f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f8c:	4b2d      	ldr	r3, [pc, #180]	; (8008044 <prvAddNewTaskToReadyList+0xc4>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3301      	adds	r3, #1
 8007f92:	4a2c      	ldr	r2, [pc, #176]	; (8008044 <prvAddNewTaskToReadyList+0xc4>)
 8007f94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f96:	4b2c      	ldr	r3, [pc, #176]	; (8008048 <prvAddNewTaskToReadyList+0xc8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d109      	bne.n	8007fb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f9e:	4a2a      	ldr	r2, [pc, #168]	; (8008048 <prvAddNewTaskToReadyList+0xc8>)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007fa4:	4b27      	ldr	r3, [pc, #156]	; (8008044 <prvAddNewTaskToReadyList+0xc4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d110      	bne.n	8007fce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fac:	f000 fc88 	bl	80088c0 <prvInitialiseTaskLists>
 8007fb0:	e00d      	b.n	8007fce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007fb2:	4b26      	ldr	r3, [pc, #152]	; (800804c <prvAddNewTaskToReadyList+0xcc>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d109      	bne.n	8007fce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fba:	4b23      	ldr	r3, [pc, #140]	; (8008048 <prvAddNewTaskToReadyList+0xc8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d802      	bhi.n	8007fce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fc8:	4a1f      	ldr	r2, [pc, #124]	; (8008048 <prvAddNewTaskToReadyList+0xc8>)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fce:	4b20      	ldr	r3, [pc, #128]	; (8008050 <prvAddNewTaskToReadyList+0xd0>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	4a1e      	ldr	r2, [pc, #120]	; (8008050 <prvAddNewTaskToReadyList+0xd0>)
 8007fd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	; (8008050 <prvAddNewTaskToReadyList+0xd0>)
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe4:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <prvAddNewTaskToReadyList+0xd4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d903      	bls.n	8007ff4 <prvAddNewTaskToReadyList+0x74>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	4a18      	ldr	r2, [pc, #96]	; (8008054 <prvAddNewTaskToReadyList+0xd4>)
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4413      	add	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4a15      	ldr	r2, [pc, #84]	; (8008058 <prvAddNewTaskToReadyList+0xd8>)
 8008002:	441a      	add	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3304      	adds	r3, #4
 8008008:	4619      	mov	r1, r3
 800800a:	4610      	mov	r0, r2
 800800c:	f7ff f859 	bl	80070c2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008010:	f001 faa0 	bl	8009554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008014:	4b0d      	ldr	r3, [pc, #52]	; (800804c <prvAddNewTaskToReadyList+0xcc>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00e      	beq.n	800803a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800801c:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <prvAddNewTaskToReadyList+0xc8>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008026:	429a      	cmp	r2, r3
 8008028:	d207      	bcs.n	800803a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800802a:	4b0c      	ldr	r3, [pc, #48]	; (800805c <prvAddNewTaskToReadyList+0xdc>)
 800802c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000c38 	.word	0x20000c38
 8008048:	20000764 	.word	0x20000764
 800804c:	20000c44 	.word	0x20000c44
 8008050:	20000c54 	.word	0x20000c54
 8008054:	20000c40 	.word	0x20000c40
 8008058:	20000768 	.word	0x20000768
 800805c:	e000ed04 	.word	0xe000ed04

08008060 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008068:	f001 fa44 	bl	80094f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d102      	bne.n	8008078 <vTaskDelete+0x18>
 8008072:	4b2c      	ldr	r3, [pc, #176]	; (8008124 <vTaskDelete+0xc4>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	e000      	b.n	800807a <vTaskDelete+0x1a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3304      	adds	r3, #4
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff f87b 	bl	800717c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3318      	adds	r3, #24
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff f872 	bl	800717c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008098:	4b23      	ldr	r3, [pc, #140]	; (8008128 <vTaskDelete+0xc8>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	4a22      	ldr	r2, [pc, #136]	; (8008128 <vTaskDelete+0xc8>)
 80080a0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80080a2:	4b20      	ldr	r3, [pc, #128]	; (8008124 <vTaskDelete+0xc4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d10b      	bne.n	80080c4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	481e      	ldr	r0, [pc, #120]	; (800812c <vTaskDelete+0xcc>)
 80080b4:	f7ff f805 	bl	80070c2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80080b8:	4b1d      	ldr	r3, [pc, #116]	; (8008130 <vTaskDelete+0xd0>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3301      	adds	r3, #1
 80080be:	4a1c      	ldr	r2, [pc, #112]	; (8008130 <vTaskDelete+0xd0>)
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	e009      	b.n	80080d8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80080c4:	4b1b      	ldr	r3, [pc, #108]	; (8008134 <vTaskDelete+0xd4>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	4a1a      	ldr	r2, [pc, #104]	; (8008134 <vTaskDelete+0xd4>)
 80080cc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fc64 	bl	800899c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80080d4:	f000 fc92 	bl	80089fc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80080d8:	f001 fa3c 	bl	8009554 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80080dc:	4b16      	ldr	r3, [pc, #88]	; (8008138 <vTaskDelete+0xd8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01b      	beq.n	800811c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <vTaskDelete+0xc4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d116      	bne.n	800811c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <vTaskDelete+0xdc>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00a      	beq.n	800810c <vTaskDelete+0xac>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	60bb      	str	r3, [r7, #8]
}
 8008108:	bf00      	nop
 800810a:	e7fe      	b.n	800810a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800810c:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <vTaskDelete+0xe0>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800811c:	bf00      	nop
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000764 	.word	0x20000764
 8008128:	20000c54 	.word	0x20000c54
 800812c:	20000c0c 	.word	0x20000c0c
 8008130:	20000c20 	.word	0x20000c20
 8008134:	20000c38 	.word	0x20000c38
 8008138:	20000c44 	.word	0x20000c44
 800813c:	20000c60 	.word	0x20000c60
 8008140:	e000ed04 	.word	0xe000ed04

08008144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800814c:	2300      	movs	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d017      	beq.n	8008186 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008156:	4b13      	ldr	r3, [pc, #76]	; (80081a4 <vTaskDelay+0x60>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00a      	beq.n	8008174 <vTaskDelay+0x30>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60bb      	str	r3, [r7, #8]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008174:	f000 f880 	bl	8008278 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008178:	2100      	movs	r1, #0
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fcea 	bl	8008b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008180:	f000 f888 	bl	8008294 <xTaskResumeAll>
 8008184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d107      	bne.n	800819c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800818c:	4b06      	ldr	r3, [pc, #24]	; (80081a8 <vTaskDelay+0x64>)
 800818e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800819c:	bf00      	nop
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000c60 	.word	0x20000c60
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08a      	sub	sp, #40	; 0x28
 80081b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80081ba:	463a      	mov	r2, r7
 80081bc:	1d39      	adds	r1, r7, #4
 80081be:	f107 0308 	add.w	r3, r7, #8
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe ff1c 	bl	8007000 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	9202      	str	r2, [sp, #8]
 80081d0:	9301      	str	r3, [sp, #4]
 80081d2:	2300      	movs	r3, #0
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	2300      	movs	r3, #0
 80081d8:	460a      	mov	r2, r1
 80081da:	4921      	ldr	r1, [pc, #132]	; (8008260 <vTaskStartScheduler+0xb4>)
 80081dc:	4821      	ldr	r0, [pc, #132]	; (8008264 <vTaskStartScheduler+0xb8>)
 80081de:	f7ff fd9d 	bl	8007d1c <xTaskCreateStatic>
 80081e2:	4603      	mov	r3, r0
 80081e4:	4a20      	ldr	r2, [pc, #128]	; (8008268 <vTaskStartScheduler+0xbc>)
 80081e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081e8:	4b1f      	ldr	r3, [pc, #124]	; (8008268 <vTaskStartScheduler+0xbc>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081f0:	2301      	movs	r3, #1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	e001      	b.n	80081fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d102      	bne.n	8008206 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008200:	f000 fcfc 	bl	8008bfc <xTimerCreateTimerTask>
 8008204:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d116      	bne.n	800823a <vTaskStartScheduler+0x8e>
	__asm volatile
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	613b      	str	r3, [r7, #16]
}
 800821e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008220:	4b12      	ldr	r3, [pc, #72]	; (800826c <vTaskStartScheduler+0xc0>)
 8008222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008226:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008228:	4b11      	ldr	r3, [pc, #68]	; (8008270 <vTaskStartScheduler+0xc4>)
 800822a:	2201      	movs	r2, #1
 800822c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800822e:	4b11      	ldr	r3, [pc, #68]	; (8008274 <vTaskStartScheduler+0xc8>)
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008234:	f001 f8bc 	bl	80093b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008238:	e00e      	b.n	8008258 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008240:	d10a      	bne.n	8008258 <vTaskStartScheduler+0xac>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	60fb      	str	r3, [r7, #12]
}
 8008254:	bf00      	nop
 8008256:	e7fe      	b.n	8008256 <vTaskStartScheduler+0xaa>
}
 8008258:	bf00      	nop
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	08009dec 	.word	0x08009dec
 8008264:	08008891 	.word	0x08008891
 8008268:	20000c5c 	.word	0x20000c5c
 800826c:	20000c58 	.word	0x20000c58
 8008270:	20000c44 	.word	0x20000c44
 8008274:	20000c3c 	.word	0x20000c3c

08008278 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008278:	b480      	push	{r7}
 800827a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800827c:	4b04      	ldr	r3, [pc, #16]	; (8008290 <vTaskSuspendAll+0x18>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3301      	adds	r3, #1
 8008282:	4a03      	ldr	r2, [pc, #12]	; (8008290 <vTaskSuspendAll+0x18>)
 8008284:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008286:	bf00      	nop
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20000c60 	.word	0x20000c60

08008294 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082a2:	4b42      	ldr	r3, [pc, #264]	; (80083ac <xTaskResumeAll+0x118>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d10a      	bne.n	80082c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80082aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ae:	f383 8811 	msr	BASEPRI, r3
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	f3bf 8f4f 	dsb	sy
 80082ba:	603b      	str	r3, [r7, #0]
}
 80082bc:	bf00      	nop
 80082be:	e7fe      	b.n	80082be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082c0:	f001 f918 	bl	80094f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082c4:	4b39      	ldr	r3, [pc, #228]	; (80083ac <xTaskResumeAll+0x118>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3b01      	subs	r3, #1
 80082ca:	4a38      	ldr	r2, [pc, #224]	; (80083ac <xTaskResumeAll+0x118>)
 80082cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ce:	4b37      	ldr	r3, [pc, #220]	; (80083ac <xTaskResumeAll+0x118>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d162      	bne.n	800839c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082d6:	4b36      	ldr	r3, [pc, #216]	; (80083b0 <xTaskResumeAll+0x11c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d05e      	beq.n	800839c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082de:	e02f      	b.n	8008340 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e0:	4b34      	ldr	r3, [pc, #208]	; (80083b4 <xTaskResumeAll+0x120>)
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3318      	adds	r3, #24
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe ff45 	bl	800717c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fe ff40 	bl	800717c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008300:	4b2d      	ldr	r3, [pc, #180]	; (80083b8 <xTaskResumeAll+0x124>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	429a      	cmp	r2, r3
 8008306:	d903      	bls.n	8008310 <xTaskResumeAll+0x7c>
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	4a2a      	ldr	r2, [pc, #168]	; (80083b8 <xTaskResumeAll+0x124>)
 800830e:	6013      	str	r3, [r2, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008314:	4613      	mov	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4413      	add	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4a27      	ldr	r2, [pc, #156]	; (80083bc <xTaskResumeAll+0x128>)
 800831e:	441a      	add	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3304      	adds	r3, #4
 8008324:	4619      	mov	r1, r3
 8008326:	4610      	mov	r0, r2
 8008328:	f7fe fecb 	bl	80070c2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008330:	4b23      	ldr	r3, [pc, #140]	; (80083c0 <xTaskResumeAll+0x12c>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008336:	429a      	cmp	r2, r3
 8008338:	d302      	bcc.n	8008340 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800833a:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <xTaskResumeAll+0x130>)
 800833c:	2201      	movs	r2, #1
 800833e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008340:	4b1c      	ldr	r3, [pc, #112]	; (80083b4 <xTaskResumeAll+0x120>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d1cb      	bne.n	80082e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800834e:	f000 fb55 	bl	80089fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008352:	4b1d      	ldr	r3, [pc, #116]	; (80083c8 <xTaskResumeAll+0x134>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d010      	beq.n	8008380 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800835e:	f000 f847 	bl	80083f0 <xTaskIncrementTick>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008368:	4b16      	ldr	r3, [pc, #88]	; (80083c4 <xTaskResumeAll+0x130>)
 800836a:	2201      	movs	r2, #1
 800836c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	3b01      	subs	r3, #1
 8008372:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1f1      	bne.n	800835e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800837a:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <xTaskResumeAll+0x134>)
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008380:	4b10      	ldr	r3, [pc, #64]	; (80083c4 <xTaskResumeAll+0x130>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d009      	beq.n	800839c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008388:	2301      	movs	r3, #1
 800838a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800838c:	4b0f      	ldr	r3, [pc, #60]	; (80083cc <xTaskResumeAll+0x138>)
 800838e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800839c:	f001 f8da 	bl	8009554 <vPortExitCritical>

	return xAlreadyYielded;
 80083a0:	68bb      	ldr	r3, [r7, #8]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000c60 	.word	0x20000c60
 80083b0:	20000c38 	.word	0x20000c38
 80083b4:	20000bf8 	.word	0x20000bf8
 80083b8:	20000c40 	.word	0x20000c40
 80083bc:	20000768 	.word	0x20000768
 80083c0:	20000764 	.word	0x20000764
 80083c4:	20000c4c 	.word	0x20000c4c
 80083c8:	20000c48 	.word	0x20000c48
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083d6:	4b05      	ldr	r3, [pc, #20]	; (80083ec <xTaskGetTickCount+0x1c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083dc:	687b      	ldr	r3, [r7, #4]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	20000c3c 	.word	0x20000c3c

080083f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083fa:	4b4f      	ldr	r3, [pc, #316]	; (8008538 <xTaskIncrementTick+0x148>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f040 808f 	bne.w	8008522 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008404:	4b4d      	ldr	r3, [pc, #308]	; (800853c <xTaskIncrementTick+0x14c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800840c:	4a4b      	ldr	r2, [pc, #300]	; (800853c <xTaskIncrementTick+0x14c>)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d120      	bne.n	800845a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008418:	4b49      	ldr	r3, [pc, #292]	; (8008540 <xTaskIncrementTick+0x150>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <xTaskIncrementTick+0x48>
	__asm volatile
 8008422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	603b      	str	r3, [r7, #0]
}
 8008434:	bf00      	nop
 8008436:	e7fe      	b.n	8008436 <xTaskIncrementTick+0x46>
 8008438:	4b41      	ldr	r3, [pc, #260]	; (8008540 <xTaskIncrementTick+0x150>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60fb      	str	r3, [r7, #12]
 800843e:	4b41      	ldr	r3, [pc, #260]	; (8008544 <xTaskIncrementTick+0x154>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a3f      	ldr	r2, [pc, #252]	; (8008540 <xTaskIncrementTick+0x150>)
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	4a3f      	ldr	r2, [pc, #252]	; (8008544 <xTaskIncrementTick+0x154>)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6013      	str	r3, [r2, #0]
 800844c:	4b3e      	ldr	r3, [pc, #248]	; (8008548 <xTaskIncrementTick+0x158>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3301      	adds	r3, #1
 8008452:	4a3d      	ldr	r2, [pc, #244]	; (8008548 <xTaskIncrementTick+0x158>)
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	f000 fad1 	bl	80089fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800845a:	4b3c      	ldr	r3, [pc, #240]	; (800854c <xTaskIncrementTick+0x15c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	429a      	cmp	r2, r3
 8008462:	d349      	bcc.n	80084f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008464:	4b36      	ldr	r3, [pc, #216]	; (8008540 <xTaskIncrementTick+0x150>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d104      	bne.n	8008478 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846e:	4b37      	ldr	r3, [pc, #220]	; (800854c <xTaskIncrementTick+0x15c>)
 8008470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008474:	601a      	str	r2, [r3, #0]
					break;
 8008476:	e03f      	b.n	80084f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008478:	4b31      	ldr	r3, [pc, #196]	; (8008540 <xTaskIncrementTick+0x150>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	429a      	cmp	r2, r3
 800848e:	d203      	bcs.n	8008498 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008490:	4a2e      	ldr	r2, [pc, #184]	; (800854c <xTaskIncrementTick+0x15c>)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008496:	e02f      	b.n	80084f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	3304      	adds	r3, #4
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe fe6d 	bl	800717c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d004      	beq.n	80084b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	3318      	adds	r3, #24
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fe64 	bl	800717c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	4b25      	ldr	r3, [pc, #148]	; (8008550 <xTaskIncrementTick+0x160>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d903      	bls.n	80084c8 <xTaskIncrementTick+0xd8>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c4:	4a22      	ldr	r2, [pc, #136]	; (8008550 <xTaskIncrementTick+0x160>)
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4a1f      	ldr	r2, [pc, #124]	; (8008554 <xTaskIncrementTick+0x164>)
 80084d6:	441a      	add	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7fe fdef 	bl	80070c2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <xTaskIncrementTick+0x168>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d3b8      	bcc.n	8008464 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084f2:	2301      	movs	r3, #1
 80084f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f6:	e7b5      	b.n	8008464 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084f8:	4b17      	ldr	r3, [pc, #92]	; (8008558 <xTaskIncrementTick+0x168>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fe:	4915      	ldr	r1, [pc, #84]	; (8008554 <xTaskIncrementTick+0x164>)
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d901      	bls.n	8008514 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008510:	2301      	movs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008514:	4b11      	ldr	r3, [pc, #68]	; (800855c <xTaskIncrementTick+0x16c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d007      	beq.n	800852c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e004      	b.n	800852c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008522:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <xTaskIncrementTick+0x170>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	3301      	adds	r3, #1
 8008528:	4a0d      	ldr	r2, [pc, #52]	; (8008560 <xTaskIncrementTick+0x170>)
 800852a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800852c:	697b      	ldr	r3, [r7, #20]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000c60 	.word	0x20000c60
 800853c:	20000c3c 	.word	0x20000c3c
 8008540:	20000bf0 	.word	0x20000bf0
 8008544:	20000bf4 	.word	0x20000bf4
 8008548:	20000c50 	.word	0x20000c50
 800854c:	20000c58 	.word	0x20000c58
 8008550:	20000c40 	.word	0x20000c40
 8008554:	20000768 	.word	0x20000768
 8008558:	20000764 	.word	0x20000764
 800855c:	20000c4c 	.word	0x20000c4c
 8008560:	20000c48 	.word	0x20000c48

08008564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800856a:	4b28      	ldr	r3, [pc, #160]	; (800860c <vTaskSwitchContext+0xa8>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008572:	4b27      	ldr	r3, [pc, #156]	; (8008610 <vTaskSwitchContext+0xac>)
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008578:	e041      	b.n	80085fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800857a:	4b25      	ldr	r3, [pc, #148]	; (8008610 <vTaskSwitchContext+0xac>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008580:	4b24      	ldr	r3, [pc, #144]	; (8008614 <vTaskSwitchContext+0xb0>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	e010      	b.n	80085aa <vTaskSwitchContext+0x46>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10a      	bne.n	80085a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	607b      	str	r3, [r7, #4]
}
 80085a0:	bf00      	nop
 80085a2:	e7fe      	b.n	80085a2 <vTaskSwitchContext+0x3e>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	491b      	ldr	r1, [pc, #108]	; (8008618 <vTaskSwitchContext+0xb4>)
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d0e4      	beq.n	8008588 <vTaskSwitchContext+0x24>
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4613      	mov	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4a13      	ldr	r2, [pc, #76]	; (8008618 <vTaskSwitchContext+0xb4>)
 80085ca:	4413      	add	r3, r2
 80085cc:	60bb      	str	r3, [r7, #8]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	605a      	str	r2, [r3, #4]
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	3308      	adds	r3, #8
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d104      	bne.n	80085ee <vTaskSwitchContext+0x8a>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	605a      	str	r2, [r3, #4]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	4a09      	ldr	r2, [pc, #36]	; (800861c <vTaskSwitchContext+0xb8>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	4a06      	ldr	r2, [pc, #24]	; (8008614 <vTaskSwitchContext+0xb0>)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6013      	str	r3, [r2, #0]
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	20000c60 	.word	0x20000c60
 8008610:	20000c4c 	.word	0x20000c4c
 8008614:	20000c40 	.word	0x20000c40
 8008618:	20000768 	.word	0x20000768
 800861c:	20000764 	.word	0x20000764

08008620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10a      	bne.n	8008646 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	e7fe      	b.n	8008644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008646:	4b07      	ldr	r3, [pc, #28]	; (8008664 <vTaskPlaceOnEventList+0x44>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3318      	adds	r3, #24
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7fe fd5b 	bl	800710a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008654:	2101      	movs	r1, #1
 8008656:	6838      	ldr	r0, [r7, #0]
 8008658:	f000 fa7c 	bl	8008b54 <prvAddCurrentTaskToDelayedList>
}
 800865c:	bf00      	nop
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20000764 	.word	0x20000764

08008668 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	617b      	str	r3, [r7, #20]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <vTaskPlaceOnEventListRestricted+0x54>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3318      	adds	r3, #24
 8008696:	4619      	mov	r1, r3
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f7fe fd12 	bl	80070c2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80086a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	68b8      	ldr	r0, [r7, #8]
 80086ae:	f000 fa51 	bl	8008b54 <prvAddCurrentTaskToDelayedList>
	}
 80086b2:	bf00      	nop
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	20000764 	.word	0x20000764

080086c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10a      	bne.n	80086ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	60fb      	str	r3, [r7, #12]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	3318      	adds	r3, #24
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fe fd43 	bl	800717c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086f6:	4b1e      	ldr	r3, [pc, #120]	; (8008770 <xTaskRemoveFromEventList+0xb0>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d11d      	bne.n	800873a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	3304      	adds	r3, #4
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fd3a 	bl	800717c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870c:	4b19      	ldr	r3, [pc, #100]	; (8008774 <xTaskRemoveFromEventList+0xb4>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d903      	bls.n	800871c <xTaskRemoveFromEventList+0x5c>
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008718:	4a16      	ldr	r2, [pc, #88]	; (8008774 <xTaskRemoveFromEventList+0xb4>)
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	4a13      	ldr	r2, [pc, #76]	; (8008778 <xTaskRemoveFromEventList+0xb8>)
 800872a:	441a      	add	r2, r3
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	3304      	adds	r3, #4
 8008730:	4619      	mov	r1, r3
 8008732:	4610      	mov	r0, r2
 8008734:	f7fe fcc5 	bl	80070c2 <vListInsertEnd>
 8008738:	e005      	b.n	8008746 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	3318      	adds	r3, #24
 800873e:	4619      	mov	r1, r3
 8008740:	480e      	ldr	r0, [pc, #56]	; (800877c <xTaskRemoveFromEventList+0xbc>)
 8008742:	f7fe fcbe 	bl	80070c2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800874a:	4b0d      	ldr	r3, [pc, #52]	; (8008780 <xTaskRemoveFromEventList+0xc0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008750:	429a      	cmp	r2, r3
 8008752:	d905      	bls.n	8008760 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008754:	2301      	movs	r3, #1
 8008756:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008758:	4b0a      	ldr	r3, [pc, #40]	; (8008784 <xTaskRemoveFromEventList+0xc4>)
 800875a:	2201      	movs	r2, #1
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	e001      	b.n	8008764 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008760:	2300      	movs	r3, #0
 8008762:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008764:	697b      	ldr	r3, [r7, #20]
}
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000c60 	.word	0x20000c60
 8008774:	20000c40 	.word	0x20000c40
 8008778:	20000768 	.word	0x20000768
 800877c:	20000bf8 	.word	0x20000bf8
 8008780:	20000764 	.word	0x20000764
 8008784:	20000c4c 	.word	0x20000c4c

08008788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008790:	4b06      	ldr	r3, [pc, #24]	; (80087ac <vTaskInternalSetTimeOutState+0x24>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008798:	4b05      	ldr	r3, [pc, #20]	; (80087b0 <vTaskInternalSetTimeOutState+0x28>)
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	605a      	str	r2, [r3, #4]
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr
 80087ac:	20000c50 	.word	0x20000c50
 80087b0:	20000c3c 	.word	0x20000c3c

080087b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b088      	sub	sp, #32
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10a      	bne.n	80087da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	613b      	str	r3, [r7, #16]
}
 80087d6:	bf00      	nop
 80087d8:	e7fe      	b.n	80087d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	60fb      	str	r3, [r7, #12]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087f6:	f000 fe7d 	bl	80094f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087fa:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <xTaskCheckForTimeOut+0xbc>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	1ad3      	subs	r3, r2, r3
 8008808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008812:	d102      	bne.n	800881a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008814:	2300      	movs	r3, #0
 8008816:	61fb      	str	r3, [r7, #28]
 8008818:	e023      	b.n	8008862 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	4b15      	ldr	r3, [pc, #84]	; (8008874 <xTaskCheckForTimeOut+0xc0>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	429a      	cmp	r2, r3
 8008824:	d007      	beq.n	8008836 <xTaskCheckForTimeOut+0x82>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	69ba      	ldr	r2, [r7, #24]
 800882c:	429a      	cmp	r2, r3
 800882e:	d302      	bcc.n	8008836 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008830:	2301      	movs	r3, #1
 8008832:	61fb      	str	r3, [r7, #28]
 8008834:	e015      	b.n	8008862 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	429a      	cmp	r2, r3
 800883e:	d20b      	bcs.n	8008858 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	1ad2      	subs	r2, r2, r3
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff ff9b 	bl	8008788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008852:	2300      	movs	r3, #0
 8008854:	61fb      	str	r3, [r7, #28]
 8008856:	e004      	b.n	8008862 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800885e:	2301      	movs	r3, #1
 8008860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008862:	f000 fe77 	bl	8009554 <vPortExitCritical>

	return xReturn;
 8008866:	69fb      	ldr	r3, [r7, #28]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3720      	adds	r7, #32
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	20000c3c 	.word	0x20000c3c
 8008874:	20000c50 	.word	0x20000c50

08008878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800887c:	4b03      	ldr	r3, [pc, #12]	; (800888c <vTaskMissedYield+0x14>)
 800887e:	2201      	movs	r2, #1
 8008880:	601a      	str	r2, [r3, #0]
}
 8008882:	bf00      	nop
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	20000c4c 	.word	0x20000c4c

08008890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008898:	f000 f852 	bl	8008940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800889c:	4b06      	ldr	r3, [pc, #24]	; (80088b8 <prvIdleTask+0x28>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d9f9      	bls.n	8008898 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088a4:	4b05      	ldr	r3, [pc, #20]	; (80088bc <prvIdleTask+0x2c>)
 80088a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088b4:	e7f0      	b.n	8008898 <prvIdleTask+0x8>
 80088b6:	bf00      	nop
 80088b8:	20000768 	.word	0x20000768
 80088bc:	e000ed04 	.word	0xe000ed04

080088c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088c6:	2300      	movs	r3, #0
 80088c8:	607b      	str	r3, [r7, #4]
 80088ca:	e00c      	b.n	80088e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4a12      	ldr	r2, [pc, #72]	; (8008920 <prvInitialiseTaskLists+0x60>)
 80088d8:	4413      	add	r3, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fbc4 	bl	8007068 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3301      	adds	r3, #1
 80088e4:	607b      	str	r3, [r7, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b37      	cmp	r3, #55	; 0x37
 80088ea:	d9ef      	bls.n	80088cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088ec:	480d      	ldr	r0, [pc, #52]	; (8008924 <prvInitialiseTaskLists+0x64>)
 80088ee:	f7fe fbbb 	bl	8007068 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088f2:	480d      	ldr	r0, [pc, #52]	; (8008928 <prvInitialiseTaskLists+0x68>)
 80088f4:	f7fe fbb8 	bl	8007068 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088f8:	480c      	ldr	r0, [pc, #48]	; (800892c <prvInitialiseTaskLists+0x6c>)
 80088fa:	f7fe fbb5 	bl	8007068 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088fe:	480c      	ldr	r0, [pc, #48]	; (8008930 <prvInitialiseTaskLists+0x70>)
 8008900:	f7fe fbb2 	bl	8007068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008904:	480b      	ldr	r0, [pc, #44]	; (8008934 <prvInitialiseTaskLists+0x74>)
 8008906:	f7fe fbaf 	bl	8007068 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800890a:	4b0b      	ldr	r3, [pc, #44]	; (8008938 <prvInitialiseTaskLists+0x78>)
 800890c:	4a05      	ldr	r2, [pc, #20]	; (8008924 <prvInitialiseTaskLists+0x64>)
 800890e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008910:	4b0a      	ldr	r3, [pc, #40]	; (800893c <prvInitialiseTaskLists+0x7c>)
 8008912:	4a05      	ldr	r2, [pc, #20]	; (8008928 <prvInitialiseTaskLists+0x68>)
 8008914:	601a      	str	r2, [r3, #0]
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000768 	.word	0x20000768
 8008924:	20000bc8 	.word	0x20000bc8
 8008928:	20000bdc 	.word	0x20000bdc
 800892c:	20000bf8 	.word	0x20000bf8
 8008930:	20000c0c 	.word	0x20000c0c
 8008934:	20000c24 	.word	0x20000c24
 8008938:	20000bf0 	.word	0x20000bf0
 800893c:	20000bf4 	.word	0x20000bf4

08008940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008946:	e019      	b.n	800897c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008948:	f000 fdd4 	bl	80094f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894c:	4b10      	ldr	r3, [pc, #64]	; (8008990 <prvCheckTasksWaitingTermination+0x50>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3304      	adds	r3, #4
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fc0f 	bl	800717c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800895e:	4b0d      	ldr	r3, [pc, #52]	; (8008994 <prvCheckTasksWaitingTermination+0x54>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3b01      	subs	r3, #1
 8008964:	4a0b      	ldr	r2, [pc, #44]	; (8008994 <prvCheckTasksWaitingTermination+0x54>)
 8008966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008968:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <prvCheckTasksWaitingTermination+0x58>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3b01      	subs	r3, #1
 800896e:	4a0a      	ldr	r2, [pc, #40]	; (8008998 <prvCheckTasksWaitingTermination+0x58>)
 8008970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008972:	f000 fdef 	bl	8009554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f810 	bl	800899c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <prvCheckTasksWaitingTermination+0x58>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e1      	bne.n	8008948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008984:	bf00      	nop
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000c0c 	.word	0x20000c0c
 8008994:	20000c38 	.word	0x20000c38
 8008998:	20000c20 	.word	0x20000c20

0800899c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d108      	bne.n	80089c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 ff8c 	bl	80098d0 <vPortFree>
				vPortFree( pxTCB );
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 ff89 	bl	80098d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089be:	e018      	b.n	80089f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d103      	bne.n	80089d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 ff80 	bl	80098d0 <vPortFree>
	}
 80089d0:	e00f      	b.n	80089f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d00a      	beq.n	80089f2 <prvDeleteTCB+0x56>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	60fb      	str	r3, [r7, #12]
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <prvDeleteTCB+0x54>
	}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a02:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <prvResetNextTaskUnblockTime+0x38>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <prvResetNextTaskUnblockTime+0x3c>)
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a14:	e008      	b.n	8008a28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a16:	4b07      	ldr	r3, [pc, #28]	; (8008a34 <prvResetNextTaskUnblockTime+0x38>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	4a04      	ldr	r2, [pc, #16]	; (8008a38 <prvResetNextTaskUnblockTime+0x3c>)
 8008a26:	6013      	str	r3, [r2, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	20000bf0 	.word	0x20000bf0
 8008a38:	20000c58 	.word	0x20000c58

08008a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a42:	4b0b      	ldr	r3, [pc, #44]	; (8008a70 <xTaskGetSchedulerState+0x34>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d102      	bne.n	8008a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	e008      	b.n	8008a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a50:	4b08      	ldr	r3, [pc, #32]	; (8008a74 <xTaskGetSchedulerState+0x38>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	607b      	str	r3, [r7, #4]
 8008a5c:	e001      	b.n	8008a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a62:	687b      	ldr	r3, [r7, #4]
	}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	20000c44 	.word	0x20000c44
 8008a74:	20000c60 	.word	0x20000c60

08008a78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b086      	sub	sp, #24
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d056      	beq.n	8008b3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a8e:	4b2e      	ldr	r3, [pc, #184]	; (8008b48 <xTaskPriorityDisinherit+0xd0>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d00a      	beq.n	8008aae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	f383 8811 	msr	BASEPRI, r3
 8008aa0:	f3bf 8f6f 	isb	sy
 8008aa4:	f3bf 8f4f 	dsb	sy
 8008aa8:	60fb      	str	r3, [r7, #12]
}
 8008aaa:	bf00      	nop
 8008aac:	e7fe      	b.n	8008aac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10a      	bne.n	8008acc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	60bb      	str	r3, [r7, #8]
}
 8008ac8:	bf00      	nop
 8008aca:	e7fe      	b.n	8008aca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad0:	1e5a      	subs	r2, r3, #1
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d02c      	beq.n	8008b3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d128      	bne.n	8008b3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	3304      	adds	r3, #4
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7fe fb44 	bl	800717c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b0c:	4b0f      	ldr	r3, [pc, #60]	; (8008b4c <xTaskPriorityDisinherit+0xd4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d903      	bls.n	8008b1c <xTaskPriorityDisinherit+0xa4>
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	4a0c      	ldr	r2, [pc, #48]	; (8008b4c <xTaskPriorityDisinherit+0xd4>)
 8008b1a:	6013      	str	r3, [r2, #0]
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b20:	4613      	mov	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4a09      	ldr	r2, [pc, #36]	; (8008b50 <xTaskPriorityDisinherit+0xd8>)
 8008b2a:	441a      	add	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	3304      	adds	r3, #4
 8008b30:	4619      	mov	r1, r3
 8008b32:	4610      	mov	r0, r2
 8008b34:	f7fe fac5 	bl	80070c2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b3c:	697b      	ldr	r3, [r7, #20]
	}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3718      	adds	r7, #24
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	20000764 	.word	0x20000764
 8008b4c:	20000c40 	.word	0x20000c40
 8008b50:	20000768 	.word	0x20000768

08008b54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b5e:	4b21      	ldr	r3, [pc, #132]	; (8008be4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b64:	4b20      	ldr	r3, [pc, #128]	; (8008be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3304      	adds	r3, #4
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe fb06 	bl	800717c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b76:	d10a      	bne.n	8008b8e <prvAddCurrentTaskToDelayedList+0x3a>
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d007      	beq.n	8008b8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b7e:	4b1a      	ldr	r3, [pc, #104]	; (8008be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4819      	ldr	r0, [pc, #100]	; (8008bec <prvAddCurrentTaskToDelayedList+0x98>)
 8008b88:	f7fe fa9b 	bl	80070c2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b8c:	e026      	b.n	8008bdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4413      	add	r3, r2
 8008b94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b96:	4b14      	ldr	r3, [pc, #80]	; (8008be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d209      	bcs.n	8008bba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba6:	4b12      	ldr	r3, [pc, #72]	; (8008bf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4b0f      	ldr	r3, [pc, #60]	; (8008be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3304      	adds	r3, #4
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4610      	mov	r0, r2
 8008bb4:	f7fe faa9 	bl	800710a <vListInsert>
}
 8008bb8:	e010      	b.n	8008bdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bba:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fe fa9f 	bl	800710a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bcc:	4b0a      	ldr	r3, [pc, #40]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d202      	bcs.n	8008bdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bd6:	4a08      	ldr	r2, [pc, #32]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	6013      	str	r3, [r2, #0]
}
 8008bdc:	bf00      	nop
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20000c3c 	.word	0x20000c3c
 8008be8:	20000764 	.word	0x20000764
 8008bec:	20000c24 	.word	0x20000c24
 8008bf0:	20000bf4 	.word	0x20000bf4
 8008bf4:	20000bf0 	.word	0x20000bf0
 8008bf8:	20000c58 	.word	0x20000c58

08008bfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08a      	sub	sp, #40	; 0x28
 8008c00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c06:	f000 fb07 	bl	8009218 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c0a:	4b1c      	ldr	r3, [pc, #112]	; (8008c7c <xTimerCreateTimerTask+0x80>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d021      	beq.n	8008c56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c16:	2300      	movs	r3, #0
 8008c18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c1a:	1d3a      	adds	r2, r7, #4
 8008c1c:	f107 0108 	add.w	r1, r7, #8
 8008c20:	f107 030c 	add.w	r3, r7, #12
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7fe fa05 	bl	8007034 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	68fa      	ldr	r2, [r7, #12]
 8008c30:	9202      	str	r2, [sp, #8]
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	2302      	movs	r3, #2
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	460a      	mov	r2, r1
 8008c3c:	4910      	ldr	r1, [pc, #64]	; (8008c80 <xTimerCreateTimerTask+0x84>)
 8008c3e:	4811      	ldr	r0, [pc, #68]	; (8008c84 <xTimerCreateTimerTask+0x88>)
 8008c40:	f7ff f86c 	bl	8007d1c <xTaskCreateStatic>
 8008c44:	4603      	mov	r3, r0
 8008c46:	4a10      	ldr	r2, [pc, #64]	; (8008c88 <xTimerCreateTimerTask+0x8c>)
 8008c48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c4a:	4b0f      	ldr	r3, [pc, #60]	; (8008c88 <xTimerCreateTimerTask+0x8c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c52:	2301      	movs	r3, #1
 8008c54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c60:	f383 8811 	msr	BASEPRI, r3
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	f3bf 8f4f 	dsb	sy
 8008c6c:	613b      	str	r3, [r7, #16]
}
 8008c6e:	bf00      	nop
 8008c70:	e7fe      	b.n	8008c70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c72:	697b      	ldr	r3, [r7, #20]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	20000c94 	.word	0x20000c94
 8008c80:	08009df4 	.word	0x08009df4
 8008c84:	08008dc1 	.word	0x08008dc1
 8008c88:	20000c98 	.word	0x20000c98

08008c8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b08a      	sub	sp, #40	; 0x28
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
 8008c98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <xTimerGenericCommand+0x2e>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	623b      	str	r3, [r7, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cba:	4b1a      	ldr	r3, [pc, #104]	; (8008d24 <xTimerGenericCommand+0x98>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d02a      	beq.n	8008d18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	2b05      	cmp	r3, #5
 8008cd2:	dc18      	bgt.n	8008d06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cd4:	f7ff feb2 	bl	8008a3c <xTaskGetSchedulerState>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d109      	bne.n	8008cf2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cde:	4b11      	ldr	r3, [pc, #68]	; (8008d24 <xTimerGenericCommand+0x98>)
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	f107 0110 	add.w	r1, r7, #16
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cea:	f7fe fbaf 	bl	800744c <xQueueGenericSend>
 8008cee:	6278      	str	r0, [r7, #36]	; 0x24
 8008cf0:	e012      	b.n	8008d18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <xTimerGenericCommand+0x98>)
 8008cf4:	6818      	ldr	r0, [r3, #0]
 8008cf6:	f107 0110 	add.w	r1, r7, #16
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f7fe fba5 	bl	800744c <xQueueGenericSend>
 8008d02:	6278      	str	r0, [r7, #36]	; 0x24
 8008d04:	e008      	b.n	8008d18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d06:	4b07      	ldr	r3, [pc, #28]	; (8008d24 <xTimerGenericCommand+0x98>)
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	f107 0110 	add.w	r1, r7, #16
 8008d0e:	2300      	movs	r3, #0
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	f7fe fc99 	bl	8007648 <xQueueGenericSendFromISR>
 8008d16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3728      	adds	r7, #40	; 0x28
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000c94 	.word	0x20000c94

08008d28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af02      	add	r7, sp, #8
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d32:	4b22      	ldr	r3, [pc, #136]	; (8008dbc <prvProcessExpiredTimer+0x94>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fa1b 	bl	800717c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d4c:	f003 0304 	and.w	r3, r3, #4
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d022      	beq.n	8008d9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	699a      	ldr	r2, [r3, #24]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	18d1      	adds	r1, r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	683a      	ldr	r2, [r7, #0]
 8008d60:	6978      	ldr	r0, [r7, #20]
 8008d62:	f000 f8d1 	bl	8008f08 <prvInsertTimerInActiveList>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01f      	beq.n	8008dac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	2300      	movs	r3, #0
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	2100      	movs	r1, #0
 8008d76:	6978      	ldr	r0, [r7, #20]
 8008d78:	f7ff ff88 	bl	8008c8c <xTimerGenericCommand>
 8008d7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d113      	bne.n	8008dac <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	60fb      	str	r3, [r7, #12]
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008da0:	f023 0301 	bic.w	r3, r3, #1
 8008da4:	b2da      	uxtb	r2, r3
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	6a1b      	ldr	r3, [r3, #32]
 8008db0:	6978      	ldr	r0, [r7, #20]
 8008db2:	4798      	blx	r3
}
 8008db4:	bf00      	nop
 8008db6:	3718      	adds	r7, #24
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	20000c8c 	.word	0x20000c8c

08008dc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dc8:	f107 0308 	add.w	r3, r7, #8
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f000 f857 	bl	8008e80 <prvGetNextExpireTime>
 8008dd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f000 f803 	bl	8008de4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dde:	f000 f8d5 	bl	8008f8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008de2:	e7f1      	b.n	8008dc8 <prvTimerTask+0x8>

08008de4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dee:	f7ff fa43 	bl	8008278 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008df2:	f107 0308 	add.w	r3, r7, #8
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 f866 	bl	8008ec8 <prvSampleTimeNow>
 8008dfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d130      	bne.n	8008e66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10a      	bne.n	8008e20 <prvProcessTimerOrBlockTask+0x3c>
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d806      	bhi.n	8008e20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e12:	f7ff fa3f 	bl	8008294 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e16:	68f9      	ldr	r1, [r7, #12]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff ff85 	bl	8008d28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e1e:	e024      	b.n	8008e6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d008      	beq.n	8008e38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <prvProcessTimerOrBlockTask+0x90>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <prvProcessTimerOrBlockTask+0x50>
 8008e30:	2301      	movs	r3, #1
 8008e32:	e000      	b.n	8008e36 <prvProcessTimerOrBlockTask+0x52>
 8008e34:	2300      	movs	r3, #0
 8008e36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e38:	4b0f      	ldr	r3, [pc, #60]	; (8008e78 <prvProcessTimerOrBlockTask+0x94>)
 8008e3a:	6818      	ldr	r0, [r3, #0]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	683a      	ldr	r2, [r7, #0]
 8008e44:	4619      	mov	r1, r3
 8008e46:	f7fe ff35 	bl	8007cb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e4a:	f7ff fa23 	bl	8008294 <xTaskResumeAll>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10a      	bne.n	8008e6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e54:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <prvProcessTimerOrBlockTask+0x98>)
 8008e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	f3bf 8f6f 	isb	sy
}
 8008e64:	e001      	b.n	8008e6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e66:	f7ff fa15 	bl	8008294 <xTaskResumeAll>
}
 8008e6a:	bf00      	nop
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20000c90 	.word	0x20000c90
 8008e78:	20000c94 	.word	0x20000c94
 8008e7c:	e000ed04 	.word	0xe000ed04

08008e80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e80:	b480      	push	{r7}
 8008e82:	b085      	sub	sp, #20
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e88:	4b0e      	ldr	r3, [pc, #56]	; (8008ec4 <prvGetNextExpireTime+0x44>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <prvGetNextExpireTime+0x16>
 8008e92:	2201      	movs	r2, #1
 8008e94:	e000      	b.n	8008e98 <prvGetNextExpireTime+0x18>
 8008e96:	2200      	movs	r2, #0
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ea4:	4b07      	ldr	r3, [pc, #28]	; (8008ec4 <prvGetNextExpireTime+0x44>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	e001      	b.n	8008eb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3714      	adds	r7, #20
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20000c8c 	.word	0x20000c8c

08008ec8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ed0:	f7ff fa7e 	bl	80083d0 <xTaskGetTickCount>
 8008ed4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	; (8008f04 <prvSampleTimeNow+0x3c>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d205      	bcs.n	8008eec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ee0:	f000 f936 	bl	8009150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]
 8008eea:	e002      	b.n	8008ef2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ef2:	4a04      	ldr	r2, [pc, #16]	; (8008f04 <prvSampleTimeNow+0x3c>)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000c9c 	.word	0x20000c9c

08008f08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d812      	bhi.n	8008f54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	1ad2      	subs	r2, r2, r3
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d302      	bcc.n	8008f42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	e01b      	b.n	8008f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f42:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <prvInsertTimerInActiveList+0x7c>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	3304      	adds	r3, #4
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f7fe f8dc 	bl	800710a <vListInsert>
 8008f52:	e012      	b.n	8008f7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d206      	bcs.n	8008f6a <prvInsertTimerInActiveList+0x62>
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d302      	bcc.n	8008f6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f64:	2301      	movs	r3, #1
 8008f66:	617b      	str	r3, [r7, #20]
 8008f68:	e007      	b.n	8008f7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f6a:	4b07      	ldr	r3, [pc, #28]	; (8008f88 <prvInsertTimerInActiveList+0x80>)
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4619      	mov	r1, r3
 8008f74:	4610      	mov	r0, r2
 8008f76:	f7fe f8c8 	bl	800710a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f7a:	697b      	ldr	r3, [r7, #20]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000c90 	.word	0x20000c90
 8008f88:	20000c8c 	.word	0x20000c8c

08008f8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08e      	sub	sp, #56	; 0x38
 8008f90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f92:	e0ca      	b.n	800912a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	da18      	bge.n	8008fcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f9a:	1d3b      	adds	r3, r7, #4
 8008f9c:	3304      	adds	r3, #4
 8008f9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008faa:	f383 8811 	msr	BASEPRI, r3
 8008fae:	f3bf 8f6f 	isb	sy
 8008fb2:	f3bf 8f4f 	dsb	sy
 8008fb6:	61fb      	str	r3, [r7, #28]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc2:	6850      	ldr	r0, [r2, #4]
 8008fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fc6:	6892      	ldr	r2, [r2, #8]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f2c0 80aa 	blt.w	8009128 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d004      	beq.n	8008fea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fe f8c9 	bl	800717c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fea:	463b      	mov	r3, r7
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff ff6b 	bl	8008ec8 <prvSampleTimeNow>
 8008ff2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	f200 8097 	bhi.w	800912a <prvProcessReceivedCommands+0x19e>
 8008ffc:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <prvProcessReceivedCommands+0x78>)
 8008ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009002:	bf00      	nop
 8009004:	0800902d 	.word	0x0800902d
 8009008:	0800902d 	.word	0x0800902d
 800900c:	0800902d 	.word	0x0800902d
 8009010:	080090a1 	.word	0x080090a1
 8009014:	080090b5 	.word	0x080090b5
 8009018:	080090ff 	.word	0x080090ff
 800901c:	0800902d 	.word	0x0800902d
 8009020:	0800902d 	.word	0x0800902d
 8009024:	080090a1 	.word	0x080090a1
 8009028:	080090b5 	.word	0x080090b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800902c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009032:	f043 0301 	orr.w	r3, r3, #1
 8009036:	b2da      	uxtb	r2, r3
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800903e:	68ba      	ldr	r2, [r7, #8]
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	18d1      	adds	r1, r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800904c:	f7ff ff5c 	bl	8008f08 <prvInsertTimerInActiveList>
 8009050:	4603      	mov	r3, r0
 8009052:	2b00      	cmp	r3, #0
 8009054:	d069      	beq.n	800912a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009064:	f003 0304 	and.w	r3, r3, #4
 8009068:	2b00      	cmp	r3, #0
 800906a:	d05e      	beq.n	800912a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	441a      	add	r2, r3
 8009074:	2300      	movs	r3, #0
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	2300      	movs	r3, #0
 800907a:	2100      	movs	r1, #0
 800907c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800907e:	f7ff fe05 	bl	8008c8c <xTimerGenericCommand>
 8009082:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d14f      	bne.n	800912a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	61bb      	str	r3, [r7, #24]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a6:	f023 0301 	bic.w	r3, r3, #1
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80090b2:	e03a      	b.n	800912a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090ba:	f043 0301 	orr.w	r3, r3, #1
 80090be:	b2da      	uxtb	r2, r3
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10a      	bne.n	80090ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	617b      	str	r3, [r7, #20]
}
 80090e6:	bf00      	nop
 80090e8:	e7fe      	b.n	80090e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ec:	699a      	ldr	r2, [r3, #24]
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	18d1      	adds	r1, r2, r3
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090f8:	f7ff ff06 	bl	8008f08 <prvInsertTimerInActiveList>
					break;
 80090fc:	e015      	b.n	800912a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d103      	bne.n	8009114 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800910c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800910e:	f000 fbdf 	bl	80098d0 <vPortFree>
 8009112:	e00a      	b.n	800912a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800911a:	f023 0301 	bic.w	r3, r3, #1
 800911e:	b2da      	uxtb	r2, r3
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009126:	e000      	b.n	800912a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009128:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800912a:	4b08      	ldr	r3, [pc, #32]	; (800914c <prvProcessReceivedCommands+0x1c0>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	1d39      	adds	r1, r7, #4
 8009130:	2200      	movs	r2, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe fb24 	bl	8007780 <xQueueReceive>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	f47f af2a 	bne.w	8008f94 <prvProcessReceivedCommands+0x8>
	}
}
 8009140:	bf00      	nop
 8009142:	bf00      	nop
 8009144:	3730      	adds	r7, #48	; 0x30
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000c94 	.word	0x20000c94

08009150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009156:	e048      	b.n	80091ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009158:	4b2d      	ldr	r3, [pc, #180]	; (8009210 <prvSwitchTimerLists+0xc0>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009162:	4b2b      	ldr	r3, [pc, #172]	; (8009210 <prvSwitchTimerLists+0xc0>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3304      	adds	r3, #4
 8009170:	4618      	mov	r0, r3
 8009172:	f7fe f803 	bl	800717c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6a1b      	ldr	r3, [r3, #32]
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d02e      	beq.n	80091ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4413      	add	r3, r2
 8009194:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009196:	68ba      	ldr	r2, [r7, #8]
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	429a      	cmp	r2, r3
 800919c:	d90e      	bls.n	80091bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	68fa      	ldr	r2, [r7, #12]
 80091a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091aa:	4b19      	ldr	r3, [pc, #100]	; (8009210 <prvSwitchTimerLists+0xc0>)
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f7fd ffa8 	bl	800710a <vListInsert>
 80091ba:	e016      	b.n	80091ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091bc:	2300      	movs	r3, #0
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	2300      	movs	r3, #0
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	2100      	movs	r1, #0
 80091c6:	68f8      	ldr	r0, [r7, #12]
 80091c8:	f7ff fd60 	bl	8008c8c <xTimerGenericCommand>
 80091cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d10a      	bne.n	80091ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d8:	f383 8811 	msr	BASEPRI, r3
 80091dc:	f3bf 8f6f 	isb	sy
 80091e0:	f3bf 8f4f 	dsb	sy
 80091e4:	603b      	str	r3, [r7, #0]
}
 80091e6:	bf00      	nop
 80091e8:	e7fe      	b.n	80091e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091ea:	4b09      	ldr	r3, [pc, #36]	; (8009210 <prvSwitchTimerLists+0xc0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1b1      	bne.n	8009158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091f4:	4b06      	ldr	r3, [pc, #24]	; (8009210 <prvSwitchTimerLists+0xc0>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091fa:	4b06      	ldr	r3, [pc, #24]	; (8009214 <prvSwitchTimerLists+0xc4>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a04      	ldr	r2, [pc, #16]	; (8009210 <prvSwitchTimerLists+0xc0>)
 8009200:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009202:	4a04      	ldr	r2, [pc, #16]	; (8009214 <prvSwitchTimerLists+0xc4>)
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	6013      	str	r3, [r2, #0]
}
 8009208:	bf00      	nop
 800920a:	3718      	adds	r7, #24
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000c8c 	.word	0x20000c8c
 8009214:	20000c90 	.word	0x20000c90

08009218 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800921e:	f000 f969 	bl	80094f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009222:	4b15      	ldr	r3, [pc, #84]	; (8009278 <prvCheckForValidListAndQueue+0x60>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d120      	bne.n	800926c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800922a:	4814      	ldr	r0, [pc, #80]	; (800927c <prvCheckForValidListAndQueue+0x64>)
 800922c:	f7fd ff1c 	bl	8007068 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009230:	4813      	ldr	r0, [pc, #76]	; (8009280 <prvCheckForValidListAndQueue+0x68>)
 8009232:	f7fd ff19 	bl	8007068 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009236:	4b13      	ldr	r3, [pc, #76]	; (8009284 <prvCheckForValidListAndQueue+0x6c>)
 8009238:	4a10      	ldr	r2, [pc, #64]	; (800927c <prvCheckForValidListAndQueue+0x64>)
 800923a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800923c:	4b12      	ldr	r3, [pc, #72]	; (8009288 <prvCheckForValidListAndQueue+0x70>)
 800923e:	4a10      	ldr	r2, [pc, #64]	; (8009280 <prvCheckForValidListAndQueue+0x68>)
 8009240:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009242:	2300      	movs	r3, #0
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <prvCheckForValidListAndQueue+0x74>)
 8009248:	4a11      	ldr	r2, [pc, #68]	; (8009290 <prvCheckForValidListAndQueue+0x78>)
 800924a:	2110      	movs	r1, #16
 800924c:	200a      	movs	r0, #10
 800924e:	f7fe f827 	bl	80072a0 <xQueueGenericCreateStatic>
 8009252:	4603      	mov	r3, r0
 8009254:	4a08      	ldr	r2, [pc, #32]	; (8009278 <prvCheckForValidListAndQueue+0x60>)
 8009256:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009258:	4b07      	ldr	r3, [pc, #28]	; (8009278 <prvCheckForValidListAndQueue+0x60>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <prvCheckForValidListAndQueue+0x60>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	490b      	ldr	r1, [pc, #44]	; (8009294 <prvCheckForValidListAndQueue+0x7c>)
 8009266:	4618      	mov	r0, r3
 8009268:	f7fe fcfa 	bl	8007c60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800926c:	f000 f972 	bl	8009554 <vPortExitCritical>
}
 8009270:	bf00      	nop
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000c94 	.word	0x20000c94
 800927c:	20000c64 	.word	0x20000c64
 8009280:	20000c78 	.word	0x20000c78
 8009284:	20000c8c 	.word	0x20000c8c
 8009288:	20000c90 	.word	0x20000c90
 800928c:	20000d40 	.word	0x20000d40
 8009290:	20000ca0 	.word	0x20000ca0
 8009294:	08009dfc 	.word	0x08009dfc

08009298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	3b04      	subs	r3, #4
 80092a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80092b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	3b04      	subs	r3, #4
 80092b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f023 0201 	bic.w	r2, r3, #1
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3b04      	subs	r3, #4
 80092c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092c8:	4a0c      	ldr	r2, [pc, #48]	; (80092fc <pxPortInitialiseStack+0x64>)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	3b14      	subs	r3, #20
 80092d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3b04      	subs	r3, #4
 80092de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f06f 0202 	mvn.w	r2, #2
 80092e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	3b20      	subs	r3, #32
 80092ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092ee:	68fb      	ldr	r3, [r7, #12]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	08009301 	.word	0x08009301

08009300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800930a:	4b12      	ldr	r3, [pc, #72]	; (8009354 <prvTaskExitError+0x54>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009312:	d00a      	beq.n	800932a <prvTaskExitError+0x2a>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	60fb      	str	r3, [r7, #12]
}
 8009326:	bf00      	nop
 8009328:	e7fe      	b.n	8009328 <prvTaskExitError+0x28>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	60bb      	str	r3, [r7, #8]
}
 800933c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800933e:	bf00      	nop
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d0fc      	beq.n	8009340 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009346:	bf00      	nop
 8009348:	bf00      	nop
 800934a:	3714      	adds	r7, #20
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	2000001c 	.word	0x2000001c
	...

08009360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009360:	4b07      	ldr	r3, [pc, #28]	; (8009380 <pxCurrentTCBConst2>)
 8009362:	6819      	ldr	r1, [r3, #0]
 8009364:	6808      	ldr	r0, [r1, #0]
 8009366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800936a:	f380 8809 	msr	PSP, r0
 800936e:	f3bf 8f6f 	isb	sy
 8009372:	f04f 0000 	mov.w	r0, #0
 8009376:	f380 8811 	msr	BASEPRI, r0
 800937a:	4770      	bx	lr
 800937c:	f3af 8000 	nop.w

08009380 <pxCurrentTCBConst2>:
 8009380:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009384:	bf00      	nop
 8009386:	bf00      	nop

08009388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009388:	4808      	ldr	r0, [pc, #32]	; (80093ac <prvPortStartFirstTask+0x24>)
 800938a:	6800      	ldr	r0, [r0, #0]
 800938c:	6800      	ldr	r0, [r0, #0]
 800938e:	f380 8808 	msr	MSP, r0
 8009392:	f04f 0000 	mov.w	r0, #0
 8009396:	f380 8814 	msr	CONTROL, r0
 800939a:	b662      	cpsie	i
 800939c:	b661      	cpsie	f
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	df00      	svc	0
 80093a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093aa:	bf00      	nop
 80093ac:	e000ed08 	.word	0xe000ed08

080093b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093b6:	4b46      	ldr	r3, [pc, #280]	; (80094d0 <xPortStartScheduler+0x120>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a46      	ldr	r2, [pc, #280]	; (80094d4 <xPortStartScheduler+0x124>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d10a      	bne.n	80093d6 <xPortStartScheduler+0x26>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	613b      	str	r3, [r7, #16]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093d6:	4b3e      	ldr	r3, [pc, #248]	; (80094d0 <xPortStartScheduler+0x120>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a3f      	ldr	r2, [pc, #252]	; (80094d8 <xPortStartScheduler+0x128>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d10a      	bne.n	80093f6 <xPortStartScheduler+0x46>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	60fb      	str	r3, [r7, #12]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093f6:	4b39      	ldr	r3, [pc, #228]	; (80094dc <xPortStartScheduler+0x12c>)
 80093f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	22ff      	movs	r2, #255	; 0xff
 8009406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009418:	b2da      	uxtb	r2, r3
 800941a:	4b31      	ldr	r3, [pc, #196]	; (80094e0 <xPortStartScheduler+0x130>)
 800941c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800941e:	4b31      	ldr	r3, [pc, #196]	; (80094e4 <xPortStartScheduler+0x134>)
 8009420:	2207      	movs	r2, #7
 8009422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009424:	e009      	b.n	800943a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009426:	4b2f      	ldr	r3, [pc, #188]	; (80094e4 <xPortStartScheduler+0x134>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3b01      	subs	r3, #1
 800942c:	4a2d      	ldr	r2, [pc, #180]	; (80094e4 <xPortStartScheduler+0x134>)
 800942e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	b2db      	uxtb	r3, r3
 8009438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800943a:	78fb      	ldrb	r3, [r7, #3]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009442:	2b80      	cmp	r3, #128	; 0x80
 8009444:	d0ef      	beq.n	8009426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009446:	4b27      	ldr	r3, [pc, #156]	; (80094e4 <xPortStartScheduler+0x134>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f1c3 0307 	rsb	r3, r3, #7
 800944e:	2b04      	cmp	r3, #4
 8009450:	d00a      	beq.n	8009468 <xPortStartScheduler+0xb8>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	f383 8811 	msr	BASEPRI, r3
 800945a:	f3bf 8f6f 	isb	sy
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	60bb      	str	r3, [r7, #8]
}
 8009464:	bf00      	nop
 8009466:	e7fe      	b.n	8009466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009468:	4b1e      	ldr	r3, [pc, #120]	; (80094e4 <xPortStartScheduler+0x134>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	021b      	lsls	r3, r3, #8
 800946e:	4a1d      	ldr	r2, [pc, #116]	; (80094e4 <xPortStartScheduler+0x134>)
 8009470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009472:	4b1c      	ldr	r3, [pc, #112]	; (80094e4 <xPortStartScheduler+0x134>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800947a:	4a1a      	ldr	r2, [pc, #104]	; (80094e4 <xPortStartScheduler+0x134>)
 800947c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	b2da      	uxtb	r2, r3
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009486:	4b18      	ldr	r3, [pc, #96]	; (80094e8 <xPortStartScheduler+0x138>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a17      	ldr	r2, [pc, #92]	; (80094e8 <xPortStartScheduler+0x138>)
 800948c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009492:	4b15      	ldr	r3, [pc, #84]	; (80094e8 <xPortStartScheduler+0x138>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a14      	ldr	r2, [pc, #80]	; (80094e8 <xPortStartScheduler+0x138>)
 8009498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800949c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800949e:	f000 f8dd 	bl	800965c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094a2:	4b12      	ldr	r3, [pc, #72]	; (80094ec <xPortStartScheduler+0x13c>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094a8:	f000 f8fc 	bl	80096a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094ac:	4b10      	ldr	r3, [pc, #64]	; (80094f0 <xPortStartScheduler+0x140>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a0f      	ldr	r2, [pc, #60]	; (80094f0 <xPortStartScheduler+0x140>)
 80094b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80094b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094b8:	f7ff ff66 	bl	8009388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094bc:	f7ff f852 	bl	8008564 <vTaskSwitchContext>
	prvTaskExitError();
 80094c0:	f7ff ff1e 	bl	8009300 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	e000ed00 	.word	0xe000ed00
 80094d4:	410fc271 	.word	0x410fc271
 80094d8:	410fc270 	.word	0x410fc270
 80094dc:	e000e400 	.word	0xe000e400
 80094e0:	20000d90 	.word	0x20000d90
 80094e4:	20000d94 	.word	0x20000d94
 80094e8:	e000ed20 	.word	0xe000ed20
 80094ec:	2000001c 	.word	0x2000001c
 80094f0:	e000ef34 	.word	0xe000ef34

080094f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
	__asm volatile
 80094fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fe:	f383 8811 	msr	BASEPRI, r3
 8009502:	f3bf 8f6f 	isb	sy
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	607b      	str	r3, [r7, #4]
}
 800950c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800950e:	4b0f      	ldr	r3, [pc, #60]	; (800954c <vPortEnterCritical+0x58>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3301      	adds	r3, #1
 8009514:	4a0d      	ldr	r2, [pc, #52]	; (800954c <vPortEnterCritical+0x58>)
 8009516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009518:	4b0c      	ldr	r3, [pc, #48]	; (800954c <vPortEnterCritical+0x58>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d10f      	bne.n	8009540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009520:	4b0b      	ldr	r3, [pc, #44]	; (8009550 <vPortEnterCritical+0x5c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00a      	beq.n	8009540 <vPortEnterCritical+0x4c>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	603b      	str	r3, [r7, #0]
}
 800953c:	bf00      	nop
 800953e:	e7fe      	b.n	800953e <vPortEnterCritical+0x4a>
	}
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	2000001c 	.word	0x2000001c
 8009550:	e000ed04 	.word	0xe000ed04

08009554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800955a:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <vPortExitCritical+0x50>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10a      	bne.n	8009578 <vPortExitCritical+0x24>
	__asm volatile
 8009562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	607b      	str	r3, [r7, #4]
}
 8009574:	bf00      	nop
 8009576:	e7fe      	b.n	8009576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <vPortExitCritical+0x50>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3b01      	subs	r3, #1
 800957e:	4a09      	ldr	r2, [pc, #36]	; (80095a4 <vPortExitCritical+0x50>)
 8009580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009582:	4b08      	ldr	r3, [pc, #32]	; (80095a4 <vPortExitCritical+0x50>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d105      	bne.n	8009596 <vPortExitCritical+0x42>
 800958a:	2300      	movs	r3, #0
 800958c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	f383 8811 	msr	BASEPRI, r3
}
 8009594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	2000001c 	.word	0x2000001c
	...

080095b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095b0:	f3ef 8009 	mrs	r0, PSP
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	4b15      	ldr	r3, [pc, #84]	; (8009610 <pxCurrentTCBConst>)
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	f01e 0f10 	tst.w	lr, #16
 80095c0:	bf08      	it	eq
 80095c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	6010      	str	r0, [r2, #0]
 80095cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095d4:	f380 8811 	msr	BASEPRI, r0
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f7fe ffc0 	bl	8008564 <vTaskSwitchContext>
 80095e4:	f04f 0000 	mov.w	r0, #0
 80095e8:	f380 8811 	msr	BASEPRI, r0
 80095ec:	bc09      	pop	{r0, r3}
 80095ee:	6819      	ldr	r1, [r3, #0]
 80095f0:	6808      	ldr	r0, [r1, #0]
 80095f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f6:	f01e 0f10 	tst.w	lr, #16
 80095fa:	bf08      	it	eq
 80095fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009600:	f380 8809 	msr	PSP, r0
 8009604:	f3bf 8f6f 	isb	sy
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	f3af 8000 	nop.w

08009610 <pxCurrentTCBConst>:
 8009610:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009614:	bf00      	nop
 8009616:	bf00      	nop

08009618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	607b      	str	r3, [r7, #4]
}
 8009630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009632:	f7fe fedd 	bl	80083f0 <xTaskIncrementTick>
 8009636:	4603      	mov	r3, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	d003      	beq.n	8009644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <xPortSysTickHandler+0x40>)
 800963e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	2300      	movs	r3, #0
 8009646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	f383 8811 	msr	BASEPRI, r3
}
 800964e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	e000ed04 	.word	0xe000ed04

0800965c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800965c:	b480      	push	{r7}
 800965e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009660:	4b0b      	ldr	r3, [pc, #44]	; (8009690 <vPortSetupTimerInterrupt+0x34>)
 8009662:	2200      	movs	r2, #0
 8009664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009666:	4b0b      	ldr	r3, [pc, #44]	; (8009694 <vPortSetupTimerInterrupt+0x38>)
 8009668:	2200      	movs	r2, #0
 800966a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800966c:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <vPortSetupTimerInterrupt+0x3c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a0a      	ldr	r2, [pc, #40]	; (800969c <vPortSetupTimerInterrupt+0x40>)
 8009672:	fba2 2303 	umull	r2, r3, r2, r3
 8009676:	099b      	lsrs	r3, r3, #6
 8009678:	4a09      	ldr	r2, [pc, #36]	; (80096a0 <vPortSetupTimerInterrupt+0x44>)
 800967a:	3b01      	subs	r3, #1
 800967c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800967e:	4b04      	ldr	r3, [pc, #16]	; (8009690 <vPortSetupTimerInterrupt+0x34>)
 8009680:	2207      	movs	r2, #7
 8009682:	601a      	str	r2, [r3, #0]
}
 8009684:	bf00      	nop
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	e000e010 	.word	0xe000e010
 8009694:	e000e018 	.word	0xe000e018
 8009698:	20000000 	.word	0x20000000
 800969c:	10624dd3 	.word	0x10624dd3
 80096a0:	e000e014 	.word	0xe000e014

080096a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80096b4 <vPortEnableVFP+0x10>
 80096a8:	6801      	ldr	r1, [r0, #0]
 80096aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80096ae:	6001      	str	r1, [r0, #0]
 80096b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096b2:	bf00      	nop
 80096b4:	e000ed88 	.word	0xe000ed88

080096b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096be:	f3ef 8305 	mrs	r3, IPSR
 80096c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2b0f      	cmp	r3, #15
 80096c8:	d914      	bls.n	80096f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096ca:	4a17      	ldr	r2, [pc, #92]	; (8009728 <vPortValidateInterruptPriority+0x70>)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	4413      	add	r3, r2
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096d4:	4b15      	ldr	r3, [pc, #84]	; (800972c <vPortValidateInterruptPriority+0x74>)
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	7afa      	ldrb	r2, [r7, #11]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d20a      	bcs.n	80096f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	607b      	str	r3, [r7, #4]
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096f4:	4b0e      	ldr	r3, [pc, #56]	; (8009730 <vPortValidateInterruptPriority+0x78>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096fc:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <vPortValidateInterruptPriority+0x7c>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	429a      	cmp	r2, r3
 8009702:	d90a      	bls.n	800971a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	603b      	str	r3, [r7, #0]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <vPortValidateInterruptPriority+0x60>
	}
 800971a:	bf00      	nop
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	e000e3f0 	.word	0xe000e3f0
 800972c:	20000d90 	.word	0x20000d90
 8009730:	e000ed0c 	.word	0xe000ed0c
 8009734:	20000d94 	.word	0x20000d94

08009738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b08a      	sub	sp, #40	; 0x28
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009740:	2300      	movs	r3, #0
 8009742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009744:	f7fe fd98 	bl	8008278 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009748:	4b5b      	ldr	r3, [pc, #364]	; (80098b8 <pvPortMalloc+0x180>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d101      	bne.n	8009754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009750:	f000 f920 	bl	8009994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009754:	4b59      	ldr	r3, [pc, #356]	; (80098bc <pvPortMalloc+0x184>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4013      	ands	r3, r2
 800975c:	2b00      	cmp	r3, #0
 800975e:	f040 8093 	bne.w	8009888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01d      	beq.n	80097a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009768:	2208      	movs	r2, #8
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	4413      	add	r3, r2
 800976e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	2b00      	cmp	r3, #0
 8009778:	d014      	beq.n	80097a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f023 0307 	bic.w	r3, r3, #7
 8009780:	3308      	adds	r3, #8
 8009782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	2b00      	cmp	r3, #0
 800978c:	d00a      	beq.n	80097a4 <pvPortMalloc+0x6c>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	617b      	str	r3, [r7, #20]
}
 80097a0:	bf00      	nop
 80097a2:	e7fe      	b.n	80097a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d06e      	beq.n	8009888 <pvPortMalloc+0x150>
 80097aa:	4b45      	ldr	r3, [pc, #276]	; (80098c0 <pvPortMalloc+0x188>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d869      	bhi.n	8009888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097b4:	4b43      	ldr	r3, [pc, #268]	; (80098c4 <pvPortMalloc+0x18c>)
 80097b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097b8:	4b42      	ldr	r3, [pc, #264]	; (80098c4 <pvPortMalloc+0x18c>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097be:	e004      	b.n	80097ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d903      	bls.n	80097dc <pvPortMalloc+0xa4>
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1f1      	bne.n	80097c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097dc:	4b36      	ldr	r3, [pc, #216]	; (80098b8 <pvPortMalloc+0x180>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d050      	beq.n	8009888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2208      	movs	r2, #8
 80097ec:	4413      	add	r3, r2
 80097ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	1ad2      	subs	r2, r2, r3
 8009800:	2308      	movs	r3, #8
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	429a      	cmp	r2, r3
 8009806:	d91f      	bls.n	8009848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4413      	add	r3, r2
 800980e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	f003 0307 	and.w	r3, r3, #7
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <pvPortMalloc+0xf8>
	__asm volatile
 800981a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800981e:	f383 8811 	msr	BASEPRI, r3
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	f3bf 8f4f 	dsb	sy
 800982a:	613b      	str	r3, [r7, #16]
}
 800982c:	bf00      	nop
 800982e:	e7fe      	b.n	800982e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	685a      	ldr	r2, [r3, #4]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	1ad2      	subs	r2, r2, r3
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009842:	69b8      	ldr	r0, [r7, #24]
 8009844:	f000 f908 	bl	8009a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009848:	4b1d      	ldr	r3, [pc, #116]	; (80098c0 <pvPortMalloc+0x188>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	4a1b      	ldr	r2, [pc, #108]	; (80098c0 <pvPortMalloc+0x188>)
 8009854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009856:	4b1a      	ldr	r3, [pc, #104]	; (80098c0 <pvPortMalloc+0x188>)
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4b1b      	ldr	r3, [pc, #108]	; (80098c8 <pvPortMalloc+0x190>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	429a      	cmp	r2, r3
 8009860:	d203      	bcs.n	800986a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009862:	4b17      	ldr	r3, [pc, #92]	; (80098c0 <pvPortMalloc+0x188>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a18      	ldr	r2, [pc, #96]	; (80098c8 <pvPortMalloc+0x190>)
 8009868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <pvPortMalloc+0x184>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	431a      	orrs	r2, r3
 8009874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	2200      	movs	r2, #0
 800987c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800987e:	4b13      	ldr	r3, [pc, #76]	; (80098cc <pvPortMalloc+0x194>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	3301      	adds	r3, #1
 8009884:	4a11      	ldr	r2, [pc, #68]	; (80098cc <pvPortMalloc+0x194>)
 8009886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009888:	f7fe fd04 	bl	8008294 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00a      	beq.n	80098ac <pvPortMalloc+0x174>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	60fb      	str	r3, [r7, #12]
}
 80098a8:	bf00      	nop
 80098aa:	e7fe      	b.n	80098aa <pvPortMalloc+0x172>
	return pvReturn;
 80098ac:	69fb      	ldr	r3, [r7, #28]
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3728      	adds	r7, #40	; 0x28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	200049a0 	.word	0x200049a0
 80098bc:	200049b4 	.word	0x200049b4
 80098c0:	200049a4 	.word	0x200049a4
 80098c4:	20004998 	.word	0x20004998
 80098c8:	200049a8 	.word	0x200049a8
 80098cc:	200049ac 	.word	0x200049ac

080098d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d04d      	beq.n	800997e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098e2:	2308      	movs	r3, #8
 80098e4:	425b      	negs	r3, r3
 80098e6:	697a      	ldr	r2, [r7, #20]
 80098e8:	4413      	add	r3, r2
 80098ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	4b24      	ldr	r3, [pc, #144]	; (8009988 <vPortFree+0xb8>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4013      	ands	r3, r2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d10a      	bne.n	8009914 <vPortFree+0x44>
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	60fb      	str	r3, [r7, #12]
}
 8009910:	bf00      	nop
 8009912:	e7fe      	b.n	8009912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00a      	beq.n	8009932 <vPortFree+0x62>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60bb      	str	r3, [r7, #8]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	685a      	ldr	r2, [r3, #4]
 8009936:	4b14      	ldr	r3, [pc, #80]	; (8009988 <vPortFree+0xb8>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4013      	ands	r3, r2
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01e      	beq.n	800997e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d11a      	bne.n	800997e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	4b0e      	ldr	r3, [pc, #56]	; (8009988 <vPortFree+0xb8>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	43db      	mvns	r3, r3
 8009952:	401a      	ands	r2, r3
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009958:	f7fe fc8e 	bl	8008278 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	4b0a      	ldr	r3, [pc, #40]	; (800998c <vPortFree+0xbc>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4413      	add	r3, r2
 8009966:	4a09      	ldr	r2, [pc, #36]	; (800998c <vPortFree+0xbc>)
 8009968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800996a:	6938      	ldr	r0, [r7, #16]
 800996c:	f000 f874 	bl	8009a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009970:	4b07      	ldr	r3, [pc, #28]	; (8009990 <vPortFree+0xc0>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3301      	adds	r3, #1
 8009976:	4a06      	ldr	r2, [pc, #24]	; (8009990 <vPortFree+0xc0>)
 8009978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800997a:	f7fe fc8b 	bl	8008294 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800997e:	bf00      	nop
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	200049b4 	.word	0x200049b4
 800998c:	200049a4 	.word	0x200049a4
 8009990:	200049b0 	.word	0x200049b0

08009994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800999a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800999e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099a0:	4b27      	ldr	r3, [pc, #156]	; (8009a40 <prvHeapInit+0xac>)
 80099a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f003 0307 	and.w	r3, r3, #7
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00c      	beq.n	80099c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	3307      	adds	r3, #7
 80099b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f023 0307 	bic.w	r3, r3, #7
 80099ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	4a1f      	ldr	r2, [pc, #124]	; (8009a40 <prvHeapInit+0xac>)
 80099c4:	4413      	add	r3, r2
 80099c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099cc:	4a1d      	ldr	r2, [pc, #116]	; (8009a44 <prvHeapInit+0xb0>)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099d2:	4b1c      	ldr	r3, [pc, #112]	; (8009a44 <prvHeapInit+0xb0>)
 80099d4:	2200      	movs	r2, #0
 80099d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	4413      	add	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099e0:	2208      	movs	r2, #8
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	1a9b      	subs	r3, r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f023 0307 	bic.w	r3, r3, #7
 80099ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4a15      	ldr	r2, [pc, #84]	; (8009a48 <prvHeapInit+0xb4>)
 80099f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <prvHeapInit+0xb4>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2200      	movs	r2, #0
 80099fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099fe:	4b12      	ldr	r3, [pc, #72]	; (8009a48 <prvHeapInit+0xb4>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	1ad2      	subs	r2, r2, r3
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a14:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <prvHeapInit+0xb4>)
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <prvHeapInit+0xb8>)
 8009a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	4a09      	ldr	r2, [pc, #36]	; (8009a50 <prvHeapInit+0xbc>)
 8009a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a2c:	4b09      	ldr	r3, [pc, #36]	; (8009a54 <prvHeapInit+0xc0>)
 8009a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a32:	601a      	str	r2, [r3, #0]
}
 8009a34:	bf00      	nop
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	20000d98 	.word	0x20000d98
 8009a44:	20004998 	.word	0x20004998
 8009a48:	200049a0 	.word	0x200049a0
 8009a4c:	200049a8 	.word	0x200049a8
 8009a50:	200049a4 	.word	0x200049a4
 8009a54:	200049b4 	.word	0x200049b4

08009a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a60:	4b28      	ldr	r3, [pc, #160]	; (8009b04 <prvInsertBlockIntoFreeList+0xac>)
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	e002      	b.n	8009a6c <prvInsertBlockIntoFreeList+0x14>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	60fb      	str	r3, [r7, #12]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d8f7      	bhi.n	8009a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	68ba      	ldr	r2, [r7, #8]
 8009a80:	4413      	add	r3, r2
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d108      	bne.n	8009a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	441a      	add	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	441a      	add	r2, r3
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d118      	bne.n	8009ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	4b15      	ldr	r3, [pc, #84]	; (8009b08 <prvInsertBlockIntoFreeList+0xb0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d00d      	beq.n	8009ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	441a      	add	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	601a      	str	r2, [r3, #0]
 8009ad4:	e008      	b.n	8009ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ad6:	4b0c      	ldr	r3, [pc, #48]	; (8009b08 <prvInsertBlockIntoFreeList+0xb0>)
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	e003      	b.n	8009ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d002      	beq.n	8009af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009af6:	bf00      	nop
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	20004998 	.word	0x20004998
 8009b08:	200049a0 	.word	0x200049a0

08009b0c <__errno>:
 8009b0c:	4b01      	ldr	r3, [pc, #4]	; (8009b14 <__errno+0x8>)
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	20000020 	.word	0x20000020

08009b18 <__libc_init_array>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	4d0d      	ldr	r5, [pc, #52]	; (8009b50 <__libc_init_array+0x38>)
 8009b1c:	4c0d      	ldr	r4, [pc, #52]	; (8009b54 <__libc_init_array+0x3c>)
 8009b1e:	1b64      	subs	r4, r4, r5
 8009b20:	10a4      	asrs	r4, r4, #2
 8009b22:	2600      	movs	r6, #0
 8009b24:	42a6      	cmp	r6, r4
 8009b26:	d109      	bne.n	8009b3c <__libc_init_array+0x24>
 8009b28:	4d0b      	ldr	r5, [pc, #44]	; (8009b58 <__libc_init_array+0x40>)
 8009b2a:	4c0c      	ldr	r4, [pc, #48]	; (8009b5c <__libc_init_array+0x44>)
 8009b2c:	f000 f906 	bl	8009d3c <_init>
 8009b30:	1b64      	subs	r4, r4, r5
 8009b32:	10a4      	asrs	r4, r4, #2
 8009b34:	2600      	movs	r6, #0
 8009b36:	42a6      	cmp	r6, r4
 8009b38:	d105      	bne.n	8009b46 <__libc_init_array+0x2e>
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b40:	4798      	blx	r3
 8009b42:	3601      	adds	r6, #1
 8009b44:	e7ee      	b.n	8009b24 <__libc_init_array+0xc>
 8009b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b4a:	4798      	blx	r3
 8009b4c:	3601      	adds	r6, #1
 8009b4e:	e7f2      	b.n	8009b36 <__libc_init_array+0x1e>
 8009b50:	0800f898 	.word	0x0800f898
 8009b54:	0800f898 	.word	0x0800f898
 8009b58:	0800f898 	.word	0x0800f898
 8009b5c:	0800f89c 	.word	0x0800f89c

08009b60 <malloc>:
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <malloc+0xc>)
 8009b62:	4601      	mov	r1, r0
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f000 b871 	b.w	8009c4c <_malloc_r>
 8009b6a:	bf00      	nop
 8009b6c:	20000020 	.word	0x20000020

08009b70 <free>:
 8009b70:	4b02      	ldr	r3, [pc, #8]	; (8009b7c <free+0xc>)
 8009b72:	4601      	mov	r1, r0
 8009b74:	6818      	ldr	r0, [r3, #0]
 8009b76:	f000 b819 	b.w	8009bac <_free_r>
 8009b7a:	bf00      	nop
 8009b7c:	20000020 	.word	0x20000020

08009b80 <memcpy>:
 8009b80:	440a      	add	r2, r1
 8009b82:	4291      	cmp	r1, r2
 8009b84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009b88:	d100      	bne.n	8009b8c <memcpy+0xc>
 8009b8a:	4770      	bx	lr
 8009b8c:	b510      	push	{r4, lr}
 8009b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b96:	4291      	cmp	r1, r2
 8009b98:	d1f9      	bne.n	8009b8e <memcpy+0xe>
 8009b9a:	bd10      	pop	{r4, pc}

08009b9c <memset>:
 8009b9c:	4402      	add	r2, r0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d100      	bne.n	8009ba6 <memset+0xa>
 8009ba4:	4770      	bx	lr
 8009ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8009baa:	e7f9      	b.n	8009ba0 <memset+0x4>

08009bac <_free_r>:
 8009bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009bae:	2900      	cmp	r1, #0
 8009bb0:	d048      	beq.n	8009c44 <_free_r+0x98>
 8009bb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bb6:	9001      	str	r0, [sp, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f1a1 0404 	sub.w	r4, r1, #4
 8009bbe:	bfb8      	it	lt
 8009bc0:	18e4      	addlt	r4, r4, r3
 8009bc2:	f000 f8ad 	bl	8009d20 <__malloc_lock>
 8009bc6:	4a20      	ldr	r2, [pc, #128]	; (8009c48 <_free_r+0x9c>)
 8009bc8:	9801      	ldr	r0, [sp, #4]
 8009bca:	6813      	ldr	r3, [r2, #0]
 8009bcc:	4615      	mov	r5, r2
 8009bce:	b933      	cbnz	r3, 8009bde <_free_r+0x32>
 8009bd0:	6063      	str	r3, [r4, #4]
 8009bd2:	6014      	str	r4, [r2, #0]
 8009bd4:	b003      	add	sp, #12
 8009bd6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bda:	f000 b8a7 	b.w	8009d2c <__malloc_unlock>
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	d90b      	bls.n	8009bfa <_free_r+0x4e>
 8009be2:	6821      	ldr	r1, [r4, #0]
 8009be4:	1862      	adds	r2, r4, r1
 8009be6:	4293      	cmp	r3, r2
 8009be8:	bf04      	itt	eq
 8009bea:	681a      	ldreq	r2, [r3, #0]
 8009bec:	685b      	ldreq	r3, [r3, #4]
 8009bee:	6063      	str	r3, [r4, #4]
 8009bf0:	bf04      	itt	eq
 8009bf2:	1852      	addeq	r2, r2, r1
 8009bf4:	6022      	streq	r2, [r4, #0]
 8009bf6:	602c      	str	r4, [r5, #0]
 8009bf8:	e7ec      	b.n	8009bd4 <_free_r+0x28>
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	b10b      	cbz	r3, 8009c04 <_free_r+0x58>
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	d9fa      	bls.n	8009bfa <_free_r+0x4e>
 8009c04:	6811      	ldr	r1, [r2, #0]
 8009c06:	1855      	adds	r5, r2, r1
 8009c08:	42a5      	cmp	r5, r4
 8009c0a:	d10b      	bne.n	8009c24 <_free_r+0x78>
 8009c0c:	6824      	ldr	r4, [r4, #0]
 8009c0e:	4421      	add	r1, r4
 8009c10:	1854      	adds	r4, r2, r1
 8009c12:	42a3      	cmp	r3, r4
 8009c14:	6011      	str	r1, [r2, #0]
 8009c16:	d1dd      	bne.n	8009bd4 <_free_r+0x28>
 8009c18:	681c      	ldr	r4, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	6053      	str	r3, [r2, #4]
 8009c1e:	4421      	add	r1, r4
 8009c20:	6011      	str	r1, [r2, #0]
 8009c22:	e7d7      	b.n	8009bd4 <_free_r+0x28>
 8009c24:	d902      	bls.n	8009c2c <_free_r+0x80>
 8009c26:	230c      	movs	r3, #12
 8009c28:	6003      	str	r3, [r0, #0]
 8009c2a:	e7d3      	b.n	8009bd4 <_free_r+0x28>
 8009c2c:	6825      	ldr	r5, [r4, #0]
 8009c2e:	1961      	adds	r1, r4, r5
 8009c30:	428b      	cmp	r3, r1
 8009c32:	bf04      	itt	eq
 8009c34:	6819      	ldreq	r1, [r3, #0]
 8009c36:	685b      	ldreq	r3, [r3, #4]
 8009c38:	6063      	str	r3, [r4, #4]
 8009c3a:	bf04      	itt	eq
 8009c3c:	1949      	addeq	r1, r1, r5
 8009c3e:	6021      	streq	r1, [r4, #0]
 8009c40:	6054      	str	r4, [r2, #4]
 8009c42:	e7c7      	b.n	8009bd4 <_free_r+0x28>
 8009c44:	b003      	add	sp, #12
 8009c46:	bd30      	pop	{r4, r5, pc}
 8009c48:	200049b8 	.word	0x200049b8

08009c4c <_malloc_r>:
 8009c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c4e:	1ccd      	adds	r5, r1, #3
 8009c50:	f025 0503 	bic.w	r5, r5, #3
 8009c54:	3508      	adds	r5, #8
 8009c56:	2d0c      	cmp	r5, #12
 8009c58:	bf38      	it	cc
 8009c5a:	250c      	movcc	r5, #12
 8009c5c:	2d00      	cmp	r5, #0
 8009c5e:	4606      	mov	r6, r0
 8009c60:	db01      	blt.n	8009c66 <_malloc_r+0x1a>
 8009c62:	42a9      	cmp	r1, r5
 8009c64:	d903      	bls.n	8009c6e <_malloc_r+0x22>
 8009c66:	230c      	movs	r3, #12
 8009c68:	6033      	str	r3, [r6, #0]
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c6e:	f000 f857 	bl	8009d20 <__malloc_lock>
 8009c72:	4921      	ldr	r1, [pc, #132]	; (8009cf8 <_malloc_r+0xac>)
 8009c74:	680a      	ldr	r2, [r1, #0]
 8009c76:	4614      	mov	r4, r2
 8009c78:	b99c      	cbnz	r4, 8009ca2 <_malloc_r+0x56>
 8009c7a:	4f20      	ldr	r7, [pc, #128]	; (8009cfc <_malloc_r+0xb0>)
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	b923      	cbnz	r3, 8009c8a <_malloc_r+0x3e>
 8009c80:	4621      	mov	r1, r4
 8009c82:	4630      	mov	r0, r6
 8009c84:	f000 f83c 	bl	8009d00 <_sbrk_r>
 8009c88:	6038      	str	r0, [r7, #0]
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f000 f837 	bl	8009d00 <_sbrk_r>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	d123      	bne.n	8009cde <_malloc_r+0x92>
 8009c96:	230c      	movs	r3, #12
 8009c98:	6033      	str	r3, [r6, #0]
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f000 f846 	bl	8009d2c <__malloc_unlock>
 8009ca0:	e7e3      	b.n	8009c6a <_malloc_r+0x1e>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	1b5b      	subs	r3, r3, r5
 8009ca6:	d417      	bmi.n	8009cd8 <_malloc_r+0x8c>
 8009ca8:	2b0b      	cmp	r3, #11
 8009caa:	d903      	bls.n	8009cb4 <_malloc_r+0x68>
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	441c      	add	r4, r3
 8009cb0:	6025      	str	r5, [r4, #0]
 8009cb2:	e004      	b.n	8009cbe <_malloc_r+0x72>
 8009cb4:	6863      	ldr	r3, [r4, #4]
 8009cb6:	42a2      	cmp	r2, r4
 8009cb8:	bf0c      	ite	eq
 8009cba:	600b      	streq	r3, [r1, #0]
 8009cbc:	6053      	strne	r3, [r2, #4]
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f000 f834 	bl	8009d2c <__malloc_unlock>
 8009cc4:	f104 000b 	add.w	r0, r4, #11
 8009cc8:	1d23      	adds	r3, r4, #4
 8009cca:	f020 0007 	bic.w	r0, r0, #7
 8009cce:	1ac2      	subs	r2, r0, r3
 8009cd0:	d0cc      	beq.n	8009c6c <_malloc_r+0x20>
 8009cd2:	1a1b      	subs	r3, r3, r0
 8009cd4:	50a3      	str	r3, [r4, r2]
 8009cd6:	e7c9      	b.n	8009c6c <_malloc_r+0x20>
 8009cd8:	4622      	mov	r2, r4
 8009cda:	6864      	ldr	r4, [r4, #4]
 8009cdc:	e7cc      	b.n	8009c78 <_malloc_r+0x2c>
 8009cde:	1cc4      	adds	r4, r0, #3
 8009ce0:	f024 0403 	bic.w	r4, r4, #3
 8009ce4:	42a0      	cmp	r0, r4
 8009ce6:	d0e3      	beq.n	8009cb0 <_malloc_r+0x64>
 8009ce8:	1a21      	subs	r1, r4, r0
 8009cea:	4630      	mov	r0, r6
 8009cec:	f000 f808 	bl	8009d00 <_sbrk_r>
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d1dd      	bne.n	8009cb0 <_malloc_r+0x64>
 8009cf4:	e7cf      	b.n	8009c96 <_malloc_r+0x4a>
 8009cf6:	bf00      	nop
 8009cf8:	200049b8 	.word	0x200049b8
 8009cfc:	200049bc 	.word	0x200049bc

08009d00 <_sbrk_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d06      	ldr	r5, [pc, #24]	; (8009d1c <_sbrk_r+0x1c>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	602b      	str	r3, [r5, #0]
 8009d0c:	f7f7 fe0a 	bl	8001924 <_sbrk>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_sbrk_r+0x1a>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_sbrk_r+0x1a>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	20004d9c 	.word	0x20004d9c

08009d20 <__malloc_lock>:
 8009d20:	4801      	ldr	r0, [pc, #4]	; (8009d28 <__malloc_lock+0x8>)
 8009d22:	f000 b809 	b.w	8009d38 <__retarget_lock_acquire_recursive>
 8009d26:	bf00      	nop
 8009d28:	20004da4 	.word	0x20004da4

08009d2c <__malloc_unlock>:
 8009d2c:	4801      	ldr	r0, [pc, #4]	; (8009d34 <__malloc_unlock+0x8>)
 8009d2e:	f000 b804 	b.w	8009d3a <__retarget_lock_release_recursive>
 8009d32:	bf00      	nop
 8009d34:	20004da4 	.word	0x20004da4

08009d38 <__retarget_lock_acquire_recursive>:
 8009d38:	4770      	bx	lr

08009d3a <__retarget_lock_release_recursive>:
 8009d3a:	4770      	bx	lr

08009d3c <_init>:
 8009d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d3e:	bf00      	nop
 8009d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d42:	bc08      	pop	{r3}
 8009d44:	469e      	mov	lr, r3
 8009d46:	4770      	bx	lr

08009d48 <_fini>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	bf00      	nop
 8009d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d4e:	bc08      	pop	{r3}
 8009d50:	469e      	mov	lr, r3
 8009d52:	4770      	bx	lr
